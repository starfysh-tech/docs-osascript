{"collection": "applescript-language-guide", "path": "Index/index_of_book.md", "title": "Index", "body": "# Index\n\n|  |\n| --- |\n| A number represents a single reference to a topic. |\n| A number with a \"+\" sign represents a longer discussion of a topic. |\n|  |\n\n  \n  \n\n**[Symbols](#Symbols)   [A](#A)   [B](#B)   [C](#C)   [D](#D)   [E](#E)   [F](#F)   [G](#G)   [H](#H)   [I](#I)   [K](#K)   [L](#L)   [M](#M)   [N](#N)   [O](#O)   [P](#P)   [Q](#Q)   [R](#R)   [S](#S)   [T](#T)   [U](#U)   [V](#V)   [W](#W)   [Y](#Y)**\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"Symbols\"></a>Symbols | | |\n| \\* operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1020) | | |\n| + operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1022) | | |\n| / operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1030) | | |\n| = operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_989) | | |\n| & (concatenation) operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1046) | | |\n| & operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_987) | | |\n| & operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1048) | | |\n| &gt; operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_996) | | |\n| &gt;= operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1003) | | |\n| &lt; operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_999) | | |\n| &lt;= operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1008) | | |\n| \" character [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_624) | | |\n| \\\\ character [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_622) | | |\n| ^ operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1036) | | |\n| {} characters [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_577) | | |\n| \\| in identifiers [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_400) | | |\n| \\| in syntax definitions [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_527) | | |\n|  | | |\n|  | | |\n|  | | |\n|  | | |\n|  | | |\n|  | | |\n|  | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"A\"></a>A | | |\n| a reference to operator [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_300) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_598) [3](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1041) [4](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1049) [5](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1050) | | |\n| about handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_933) | | |\n| above handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_934) | | |\n| absolute object specifiers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_296) | | |\n| activate command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_662) | | |\n| adding folder items to Folder Actions handler [1](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_920) | | |\n| addition operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1024) | | |\n| addition |  |  |  | | --- | --- | --- | |  | of date values [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_566) | | | | |\n| administrator privileges parameter |  | of command do shell script [1](../reference/ASLR_cmds.md) | | | | |\n| after reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| against handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_935) | | |\n| alert volume parameter |  | of command set volume [1](../reference/ASLR_cmds.md) | | | | |\n| alias class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_530) | | |\n| alias |  |  |  | | --- | --- | --- | |  | specifying a file by [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_371) | | | | |\n| aliases and files [1+](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_368) | | |\n| aliases |  |  |  | | --- | --- | --- | |  | working with [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_373) | | | | |\n| altering line endings parameter |  | of command do shell script [1](../reference/ASLR_cmds.md) | | | | |\n| and operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_984) | | |\n| angle brackets in scripts [1+](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_435) | | |\n| apart from handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_936) | | |\n| Apple event code [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_433) | | |\n| Apple events [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_520) | | |\n| AppleScript character set (Unicode) [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_397) | | |\n| AppleScript constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_337)|  | AppleScript [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_336) | | |  | current application [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_349) | | | | |\n| AppleScript global constants [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_332) | | |\n| AppleScript property |  |  |  | | --- | --- | --- | |  | missing value [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_352) | | |  | pi constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_338) | | |  | result [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_340) | | |  | text constants [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_343) | | |  | text item delimiters [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_345) | | |  | version [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_347) | | | | |\n| AppleScript suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_642) | | |\n| AppleScript |  |  |  | | --- | --- | --- | |  | commands [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_310) | | |  | constants [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_335) | | |  | defined [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_519) | | |  | error numbers [1](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_907) [2](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_909) [3](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_911) [4](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_913) | | |  | fundamentals [1+](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_275) | | |  | keywords [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_402) [2+](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_967) | | |  | lexical conventions [1+](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_396) | | |  | script objects [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_447) | | |  | unsupported terms [1](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1131) | | |  | variables and properties [1+](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_484) | | | | |\n| application class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_533) | | |\n| application commands [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_316) | | |\n| application object [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_309) | | |\n| applications |  |  |  | | --- | --- | --- | |  | remote [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_381) | | | | |\n| arbitrary reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1067) | | |\n| arithmetic, date-time [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_564) | | |\n| around handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_937) | | |\n| as (coercion) operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1051) | | |\n| as operator [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_306) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1038) | | |\n| as parameter |  | of command choose application [1](../reference/ASLR_cmds.md) | | |  | of command display alert [1](../reference/ASLR_cmds.md) | | |  | of command do shell script [1](../reference/ASLR_cmds.md) | | |  | of command get [1](../reference/ASLR_cmds.md) | | |  | of command path to (application) [1](../reference/ASLR_cmds.md) | | |  | of command path to (folder) [1](../reference/ASLR_cmds.md) | | |  | of command read [1](../reference/ASLR_cmds.md) | | |  | of command the clipboard [1](../reference/ASLR_cmds.md) | | |  | of command write [1](../reference/ASLR_cmds.md) | | | | |\n| as user name parameter |  | of command mount volume [1](../reference/ASLR_cmds.md) | | | | |\n| ASCII character command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_663) | | |\n| ASCII number command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_664) | | |\n| aside from handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_938) | | |\n| assignment statement [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_416) | | |\n| associativity, of operators [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1045) | | |\n| at handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_939) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"B\"></a>B | | |\n| back of reserved words [1](../reference/ASLR_reference_forms.md) | | |\n| back reserved word [1](../reference/ASLR_reference_forms.md) [2](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1129) | | |\n| backslash character in text [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_621) | | |\n| beep command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_665) | | |\n| before parameter |  | of command read [1](../reference/ASLR_cmds.md) | | | | |\n| before reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| beginning reserved word [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1125) | | |\n| begins with operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1014) | | |\n| behind reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| below handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_940) | | |\n| beneath handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_941) | | |\n| beside handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_942) | | |\n| between handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_943) | | |\n| binary operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_978) | | |\n| Bonjour |  |  |  | | --- | --- | --- | |  | and remote applications [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_386) [2](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_702) | | |  | service types [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_705) | | | | |\n| boolean class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_540) | | |\n| Boolean constants [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_411) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_355) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_543) | | |\n| boolean expressions [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_857) | | |\n| brackets [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_524) | | |\n| but keyword [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_839) | | |\n| buttons parameter |  | of command display alert [1](../reference/ASLR_cmds.md) | | |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| by handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_944) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"C\"></a>C | | |\n| cancel button name parameter |  | of command choose from list [1](../reference/ASLR_cmds.md) | | | | |\n| cancel button parameter |  | of command display alert [1](../reference/ASLR_cmds.md) | | |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| case attribute [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_840) | | |\n| character element [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_614) | | |\n| character|  | elements of a text object [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_615) | | | | |\n| chevrons [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_432) [2](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_438) | | |\n| child script objects [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_473) | | |\n| choose application command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_666) | | |\n| choose color command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_671) | | |\n| choose file command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_673) | | |\n| choose file name command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_680) | | |\n| choose folder command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_684) | | |\n| choose from list command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_690) | | |\n| choose remote application command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_698) | | |\n| choose URL command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_703) | | |\n| class class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_546) | | |\n| class property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_531) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_534) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_541) [4](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_547) [5](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_549) [6](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_551) [7](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_573) [8](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_578) [9](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_590) [10](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_593) [11](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_595) [12](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_604) [13](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_610) [14](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_638) | | |\n| class |  |  |  | | --- | --- | --- | |  | defined [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_529) | | |  | reference [1+](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_528) | | | | |\n| classes |  |  |  | | --- | --- | --- | |  | mutable [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_492) | | | | |\n| Clipboard Commands suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_644) | | |\n| clipboard info command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_707) | | |\n| close access command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_709) | | |\n| closing folder window for Folder Actions handler [1](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_921) | | |\n| coercion operator (as) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1039) | | |\n| coercion |  |  |  | | --- | --- | --- | |  | see object conversion [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_305) | | | | |\n| comes after operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_998) | | |\n| comes before operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1001) | | |\n| commands |  |  |  | | --- | --- | --- | |  | AppleScript [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_311) | | |  | application [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_317) | | |  | defined [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_640) | | |  | direct parameter of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_322) | | |  | reference [1+](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_641) | | |  | scripting addition [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_312) | | |  | target of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_318) | | |  | user-defined [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_315) | | |  | waiting for completion of [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_900) | | | | |\n| comments [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_404)|  | block [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_405) | | |  | end-of-line [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_406) | | | | |\n| completion |  |  |  | | --- | --- | --- | |  | of commands [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_901) | | | | |\n| compound statements [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_427) | | |\n| concatenation operator (&) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_988) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1047) | | |\n| considering / ignoring (application responses) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_849) | | |\n| considering / ignoring (text comparison) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_836) | | |\n| considering and ignoring statements [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_835) | | |\n| considering statements (application responses) [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_851) | | |\n| considering statements (string comparison) [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_838) | | |\n| constant class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_548) | | |\n| constant |  |  |  | | --- | --- | --- | |  | defined [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_410) | | | | |\n| constants |  |  |  | | --- | --- | --- | |  | AppleScript [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_334) | | |  | Boolean [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_412) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_354) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_542) | | |  | days of the week [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_555) | | |  | months of the year [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_557) | | |  | text [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_627) | | |  | white space [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_626) | | | | |\n| constructor functions [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_459) | | |\n| containers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_290) | | |\n| contains operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1016) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1053) | | |\n| contains, is contained by operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1052) | | |\n| contents property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_301) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_303) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_599) [4](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_600) | | |\n| continue statement |  | defined [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_927) | | |  | in script objects [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_475) | | | | |\n| control statements reference [1+](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_834) | | |\n| conventions in this book [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_521) | | |\n| copy command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_710) | | |\n| count command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_712) | | |\n| current application and parent property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_351) | | |\n| current application constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_350) | | |\n| current date command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_713) | | |\n| current script [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_363) | | |\n| current target [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_358) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_365) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"D\"></a>D | | |\n| date class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_550) | | |\n| date string property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_561) | | |\n| date, relative [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_567) | | |\n| date-time arithmetic [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_563) | | |\n| day property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_552) | | |\n| days of the week constants [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_554) | | |\n| debugging tips [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_389)|  | flow of control [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_390) | | |  | log statements [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_391) | | |  | third party debuggers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_394) | | | | |\n| default answer parameter |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| default button parameter |  | of command display alert [1](../reference/ASLR_cmds.md) | | |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| default color parameter |  | of command choose color [1](../reference/ASLR_cmds.md) | | | | |\n| default items parameter |  | of command choose from list [1](../reference/ASLR_cmds.md) | | | | |\n| default location parameter |  | of command choose file [1](../reference/ASLR_cmds.md) | | |  | of command choose file name [1](../reference/ASLR_cmds.md) | | |  | of command choose folder [1](../reference/ASLR_cmds.md) | | | | |\n| default name parameter |  | of command choose file name [1](../reference/ASLR_cmds.md) | | | | |\n| delay command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_714) | | |\n| delegation [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_476) | | |\n| diacriticals attribute [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_843) | | |\n| dictionary |  |  |  | | --- | --- | --- | |  | defined [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_278) | | |  | displaying [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_279) | | |  | when not available [1](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_440) | | | | |\n| direct parameter of commands [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_320) | | |\n| display alert command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_715) | | |\n| display dialog command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_722) | | |\n| display notification command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_733) | | |\n| displaying parameter |  | of command say [1](../reference/ASLR_cmds.md) | | | | |\n| div operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1032) | | |\n|  | | |\n| do shell script command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_737) | | |\n| does not come after operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1009) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1012) | | |\n| does not come before operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1006) | | |\n| does not contain operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1017) | | |\n| does not equal operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_995) | | |\n| double angle brackets [1+](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_436) | | |\n| double-quote character [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_623) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"E\"></a>E | | |\n| editable URL parameter |  | of command choose URL [1](../reference/ASLR_cmds.md) | | | | |\n| eighth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| elements of objects [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_284) | | |\n| ellipsis in syntax definitions [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_525) | | |\n| else clause [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_864) | | |\n| else if clause [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_863) | | |\n| empty list [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_576) | | |\n| empty selection allowed parameter |  | of command choose from list [1](../reference/ASLR_cmds.md) | | | | |\n| enabling remote applications [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_383) | | |\n| end reserved word [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1128) | | |\n| ends with operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1015) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1063) | | |\n| eppc-style specifier [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_385) | | |\n| equal operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1056) | | |\n| equal, is not equal to operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1055) | | |\n| equals operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_992) | | |\n| error control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_856) | | |\n| error numbers |  |  |  | | --- | --- | --- | |  | AppleScript [1](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_908) [2](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_910) [3](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_912) [4](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_914) | | |  | defined [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_854) | | | | |\n| error reporting parameter |  | of command open location [1](../reference/ASLR_cmds.md) | | | | |\n| error |  |  |  | | --- | --- | --- | |  | expression [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_855) | | |  | handlers [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_887) | | |  | handling [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_328) | | |  | message [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_853) | | |  | user cancelled [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_329) | | | | |\n| errors |  |  |  | | --- | --- | --- | |  | resignaling in scripts [1](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_917) | | |  | signaling in scripts [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_852) | | |  | types of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_331) | | |  | working with [1+](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_915) | | | | |\n| evaluation |  |  |  | | --- | --- | --- | |  | defined [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_420) | | |  | of expressions [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_422) | | | | |\n| Event Log History window [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_891) | | |\n| event timed out error message [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_902) | | |\n| every reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1070) | | |\n| every reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| exit control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_866) | | |\n| exit from repeat loop [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_869) | | |\n| explicit run handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_261) | | |\n| exponent operator (^) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1037) | | |\n| expressions [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_419)|  | boolean [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_858) | | |  | evaluation of [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_421) | | | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"F\"></a>F | | |\n| false constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_357) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_545) | | |\n| fifth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| file class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_571) | | |\n| File Commands suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_646) | | |\n| File Read/Write suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_648) | | |\n| files and aliases [1+](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_369) | | |\n| files, specifying |  |  |  | | --- | --- | --- | |  | by alias [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_370) | | |  | by name [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_374) | | |  | by pathname [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_377) | | | | |\n| filter reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1074) | | |\n| first reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| Folder Actions reference [1+](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_919) | | |\n| folder creation parameter |  | of command path to (folder) [1](../reference/ASLR_cmds.md) | | | | |\n| for handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_945) | | |\n| for parameter |  | of command clipboard info [1](../reference/ASLR_cmds.md) | | |  | of command read [1](../reference/ASLR_cmds.md) | | |  | of command write [1](../reference/ASLR_cmds.md) | | | | |\n| fourth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| from handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_946) | | |\n| from parameter |  | of command path to (folder) [1](../reference/ASLR_cmds.md) | | |  | of command random number [1](../reference/ASLR_cmds.md) | | |  | of command read [1](../reference/ASLR_cmds.md) | | | | |\n| from reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| from table parameter |  | of command localized string [1](../reference/ASLR_cmds.md) | | | | |\n| front of reserved words [1](../reference/ASLR_reference_forms.md) | | |\n| front reserved word [1](../reference/ASLR_reference_forms.md) [2](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1126) | | |\n| frontmost property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_535) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"G\"></a>G | | |\n| get command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_743) | | |\n| get eof command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_745) | | |\n| get volume settings command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_746) | | |\n| given handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_957) | | |\n| giving up after parameter |  | of command display alert [1](../reference/ASLR_cmds.md) | | |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| global constants |  |  |  | | --- | --- | --- | |  | of AppleScript [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_333) | | | | |\n| global variables [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_490) [2](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_507)|  | persistence of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_516) | | |  | scope of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_501) | | | | |\n| greater than operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_997) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1059) | | |\n| greater than or equal to operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1004) | | |\n| greater than, less than operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1058) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"H\"></a>H | | |\n| handle CGI request (unsupported) [1](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1133) | | |\n| handlers |  |  |  |  |  |  |  |  |  | | --- | --- | --- | --- | --- | --- | --- | --- | --- | |  | call syntax |  |  |  | | --- | --- | --- | |  |  | labeled parameters [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_958) | |  |  | positional parameters [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_962) [2](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_965) | | | |  | calling from a tell statement [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_247) | | |  | defined [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_230) | | |  | defining simple [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_232) | | |  | defining syntax |  |  |  | | --- | --- | --- | |  |  | labeled parameters [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_932) | |  |  | no parameters [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_233) | |  |  | positional parameters [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_961) [2](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_964) | | | |  | errors in [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_245) | | |  | for errors [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_888) | | |  | for stay-open script applications [1+](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_267) | | |  | idle [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_268) | | |  | in script applications [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_251) | | |  | libraries of [1](../reference/ASLR_load_script.md#//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_976) | | |  | open [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_265) | | |  | overview [1+](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_229) | | |  | quit [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_270) | | |  | recursive [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_242) | | |  | reference [1+](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_926) | | |  | run [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_259) | | |  | scope of identifiers declared within [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_517) | | | | |\n| has parameter |  | of command system attribute [1](../reference/ASLR_cmds.md) | | | | |\n| hidden answer parameter |  | of command display dialog [1](../reference/ASLR_cmds.md) | | | | |\n| hyphens attribute [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_844) [2](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_845) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"I\"></a>I | | |\n| id property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_536) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_606) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_611) | | |\n| ID reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1083) | | |\n| id reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| identifiers [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_398) | | |\n| idle handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_269) | | |\n| if (compound) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_861) | | |\n| if (simple) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_860) | | |\n| ignoring statements (application responses) [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_850) | | |\n| ignoring statements (string comparison) [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_837) | | |\n| implicit run handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_262) | | |\n| implicitly specified subcontainers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_288) | | |\n| in AppleTalk zone parameter |  | of command mount volume [1](../reference/ASLR_cmds.md) | | | | |\n| in back of reserved words [1](../reference/ASLR_reference_forms.md) | | |\n| in bundle parameter |  | of command localized string [1](../reference/ASLR_cmds.md) | | |  | of command path to resource [1](../reference/ASLR_cmds.md) | | | | |\n| in directory parameter |  | of command path to resource [1](../reference/ASLR_cmds.md) | | | | |\n| in front of reserved words [1](../reference/ASLR_reference_forms.md) | | |\n| in parameter |  | of command offset [1](../reference/ASLR_cmds.md) | | |  | of command run script [1](../reference/ASLR_cmds.md) | | |  | of command store script [1](../reference/ASLR_cmds.md) | | |  | of command summarize [1](../reference/ASLR_cmds.md) | | | | |\n| in|  | for specifying a container [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_292) | | |  | with date objects [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_570) | | | | |\n| index reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1086) | | |\n| index reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| info for command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_747) | | |\n| inheritance [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_466)|  | examples of [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_474) | | | | |\n| initializing script objects [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_455) | | |\n| input volume parameter |  | of command set volume [1](../reference/ASLR_cmds.md) | | | | |\n| insertion point [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_327) | | |\n| insertion point object |  |  |  | | --- | --- | --- | |  | and index reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1127) | | |  | and relative reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1124) | | | | |\n| instead of handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_947) | | |\n| integer class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_572) | | |\n| integral division operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1033) | | |\n| internet address (unsupported) [1](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1134) | | |\n| Internet suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_650) | | |\n| into handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_948) | | |\n| invisibles parameter |  | of command choose file [1](../reference/ASLR_cmds.md) | | |  | of command choose folder [1](../reference/ASLR_cmds.md) | | |  | of command list folder [1](../reference/ASLR_cmds.md) | | | | |\n| is contained by operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1018) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1054) | | |\n| is equal to operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_990) | | |\n| is not contained by operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1019) | | |\n| is not equal to operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1057) | | |\n| is not greater than operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1011) | | |\n| is not less than operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1005) | | |\n| is not operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_994) | | |\n| is operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_991) | | |\n| it keyword [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_360) | | |\n| item element [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_584) | | |\n| items [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_575) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_602) | | |\n| its reserved word [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_367) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"K\"></a>K | | |\n| keywords, AppleScript [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_403) [2](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_969) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"L\"></a>L | | |\n| labeled parameters, of handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_234) | | |\n| language elements in syntax definitions [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_522) | | |\n| large lists |  |  |  | | --- | --- | --- | |  | inserting in [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_588) | | | | |\n| last reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| launch command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_749) | | |\n| length property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_579) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_596) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_612) | | |\n| less than operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1000) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1060) | | |\n| less than or equal to operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1010) | | |\n| libraries of handlers [1](../reference/ASLR_load_script.md#//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_975) | | |\n| lifetime of variables and properties [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_504) | | |\n| linefeed constant [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_630) | | |\n| list class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_574) | | |\n| list disks command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_751) | | |\n| list folder command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_752) | | |\n| lists |  |  |  | | --- | --- | --- | |  | inserting in large [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_587) | | |  | merging [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_586) | | | | |\n| literal expressions [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_409) | | |\n| load script command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_754) [2](../reference/ASLR_load_script.md#//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_974) | | |\n| local variables [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_488) [2](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_509) [3](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_458)|  | scope of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_502) | | | | |\n| localized string command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_755) | | |\n| location parameters [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_325) | | |\n| log command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_758) | | |\n| log statements [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_392) | | |\n| loop variable [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_876) [2](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_878) | | |\n| lowercase letters [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_842) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"M\"></a>M | | |\n| me keyword [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_361) | | |\n| merging lists [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_585) | | |\n| message parameter |  | of command display alert [1](../reference/ASLR_cmds.md) | | | | |\n| middle reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1102) | | |\n| middle reserved word [1](../reference/ASLR_reference_forms.md) | | |\n|  | | |\n| Miscellaneous Commands suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_652) | | |\n| missing value constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_353) | | |\n| mod operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1034) | | |\n| month property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_556) | | |\n| months of the year constants [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_558) | | |\n| mount volume command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_759) | | |\n| moving folder window for Folder Actions handler [1](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_922) | | |\n| multiple selections allowed parameter |  | of command choose application [1](../reference/ASLR_cmds.md) | | |  | of command choose file [1](../reference/ASLR_cmds.md) | | |  | of command choose folder [1](../reference/ASLR_cmds.md) | | |  | of command choose from list [1](../reference/ASLR_cmds.md) | | | | |\n| multiplication operator (\\*) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1021) | | |\n| mutable classes [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_491) | | |\n| my reserved word [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_477) | | |\n| my|  | in tell statements [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_249) | | | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"N\"></a>N | | |\n| name property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_537) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_605) | | |\n| name reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1105) | | |\n| name |  |  |  | | --- | --- | --- | |  | specifying a file by [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_376) | | | | |\n| named reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| nested tell statements [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_880)|  | examples [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_884) | | | | |\n| ninth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| not operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1040) | | |\n| number class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_589) | | |\n| numeric literal [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_413) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"O\"></a>O | | |\n| object conversion (coercion) [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_304) | | |\n| object conversion |  |  |  | | --- | --- | --- | |  | table of supported conversions [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_307) | | | | |\n| object specifiers [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_423) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_286)|  | absolute [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_295) | | |  | contents of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_287) | | |  | evaluating with contents property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_302) | | |  | implicitly specified subcontainers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_289) | | |  | in reference objects [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_299) | | |  | relative [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_297) | | | | |\n| objects |  |  |  | | --- | --- | --- | |  | elements of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_285) | | |  | properties of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_282) | | |  | script |  |  |  | | --- | --- | --- | |  |  | initializing [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_454) | |  |  | parent [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_471) | |  |  | sending commands to [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_464) | | | |  | using in AppleScript [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_280) | | | | |\n| of me|  | in tell statements [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_248) | | | | |\n| of my keyword [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_362) | | |\n| of parameter |  | of command offset [1](../reference/ASLR_cmds.md) | | | | |\n| of type parameter |  | of command choose file [1](../reference/ASLR_cmds.md) | | | | |\n| of|  | for specifying a container [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_291) | | |  | with date objects [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_568) | | | | |\n| offset command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_764) | | |\n| OK button name parameter |  | of command choose from list [1](../reference/ASLR_cmds.md) | | | | |\n| on handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_949) | | |\n| on server parameter |  | of command mount volume [1](../reference/ASLR_cmds.md) | | | | |\n| onto handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_950) | | |\n| open for access command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_767) | | |\n| open handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_266) | | |\n| open location command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_769) | | |\n| opening folder Folder Actions handler [1](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_923) | | |\n| operators |  |  |  | | --- | --- | --- | |  | binary [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_979) | | |  | defined [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_981) | | |  | listed, with descriptions [1+](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_983) | | |  | precedence [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1043) | | |  | reference [1+](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_977) | | |  | unary [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_982) | | | | |\n| or operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_986) | | |\n| out of handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_951) | | |\n| output muted parameter |  | of command set volume [1](../reference/ASLR_cmds.md) | | | | |\n| output volume parameter |  | of command set volume [1](../reference/ASLR_cmds.md) | | | | |\n| over handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_952) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"P\"></a>P | | |\n| paragraph element [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_616) | | |\n| parameter variables [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_456) [2](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_929) | | |\n| parameters |  |  |  | | --- | --- | --- | |  | direct [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_321) | | |  | in continue statements [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_928) | | |  | labeled [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_235) | | |  | location [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_324) | | |  | passing by reference versus value [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_246) | | |  | patterned [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_238) | | |  | positional [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_237) [2](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_241) | | | | |\n| parent property [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_468) | | |\n| parent script objects [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_469) | | |\n| password parameter |  | of command do shell script [1](../reference/ASLR_cmds.md) | | | | |\n| path to (application) command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_771) | | |\n| path to (folder) command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_773) | | |\n| path to resource command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_777) | | |\n| pathname |  |  |  | | --- | --- | --- | |  | specifying a file by [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_375) | | | | |\n| paths, specifying a file with [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_372) | | |\n| patterned parameters [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_239) | | |\n| persistence |  |  |  | | --- | --- | --- | |  | of global variables [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_515) | | |  | of script properties [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_513) | | | | |\n| pi constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_339) | | |\n| placeholders in syntax definitions [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_523) | | |\n| plural object names [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1073) | | |\n| plus symbol (+) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1023) | | |\n| positional parameters, of handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_236) [2](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_240) | | |\n| POSIX file class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_591) | | |\n| POSIX files |  |  |  | | --- | --- | --- | |  | using with files and aliases [1+](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_326) | | | | |\n| POSIX path property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_532) | | |\n| possessive notation ('s) [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_294) | | |\n| possessive object names [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_293) | | |\n| precedence |  |  |  | | --- | --- | --- | |  | of attributes [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_848) | | |  | of operations [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1044) | | | | |\n| properties |  |  |  | | --- | --- | --- | |  | declaring [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_485) | | |  | lifetime of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_506) | | |  | of objects [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_283) | | |  | of script objects [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_451) | | |  | scope of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_500) | | | | |\n| property reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1108) | | |\n| punctuation attribute [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_846) | | |\n| put, (Deprecated--use copy) [1](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_970) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"Q\"></a>Q | | |\n| quit handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_271) | | |\n| quoted form property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_613) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"R\"></a>R | | |\n| random number command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_780) | | |\n| range reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1110) | | |\n| raw apple events [1](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_443) | | |\n| raw data |  |  |  | | --- | --- | --- | |  | displayed by AppleScript [1](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_441) | | |  | entering in a script [1](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_442) | | | | |\n| raw format [1](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_439) | | |\n| read command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_784) | | |\n| real class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_592) | | |\n| record class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_594) | | |\n| recursion [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_243) | | |\n| recursive handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_244) | | |\n| reference class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_597) | | |\n| reference forms [1+](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1065)|  | arbitrary [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1068) | | |  | defined [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1066) | | |  | every [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1071) | | |  | filter [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1075) | | |  | ID [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1084) | | |  | index [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1087) | | |  | middle [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1103) | | |  | name [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1106) | | |  | property [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1109) | | |  | range [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1111) | | |  | relative [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1116) | | | | |\n| relative object specifiers [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_298) | | |\n| relative reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1115) | | |\n| relative to|  | with date objects [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_569) | | | | |\n| remainder operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1035) | | |\n| remote applications [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_382)|  | choosing [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_699) | | |  | enabling [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_384) | | |  | targeting [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_387) | | | | |\n| removing folder items from Folder Actions handler [1](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_924) | | |\n| reopen command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_750) | | |\n| repeat (forever) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_868) | | |\n| repeat (number) times control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_870) | | |\n| repeat control statements [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_865) | | |\n| repeat until control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_872) | | |\n| repeat while control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_873) | | |\n| repeat with loopVariable (from startValue to stopValue) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_875) | | |\n| repeat with loopVariable (in list) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_877) | | |\n| replacing parameter |  | of command store script [1](../reference/ASLR_cmds.md) | | | | |\n| reserved words (see keywords) [1](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_968) | | |\n| rest of property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_581) | | |\n| rest property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_580) | | |\n| Result pane [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_431) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_342) | | |\n| result property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_341) | | |\n| result variable [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_430) | | |\n| result, of statement [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_429) | | |\n| return character |  |  |  | | --- | --- | --- | |  | in text objects [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_634) | | | | |\n| return constant [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_629) | | |\n| return statement [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_930)|  | in handler definition [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_231) | | | | |\n| returning, Deprecated reserved word [1](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_971) | | |\n| reverse property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_582) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_583) | | |\n| RGB color class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_601) | | |\n| round command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_793) | | |\n| rounding parameter |  | of command round [1](../reference/ASLR_cmds.md) | | | | |\n| run command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_795) | | |\n| run handlers [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_260)|  | explicit [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_263) | | |  | implicit [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_264) | | |  | in script objects [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_452) [2](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_465) | | | | |\n| run script command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_797) | | |\n| running property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_538) | | |\n| runTarget parameter |  | of command run [1](../reference/ASLR_cmds.md) | | | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"S\"></a>S | | |\n| saving to parameter |  | of command say [1](../reference/ASLR_cmds.md) | | | | |\n| say command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_800) | | |\n| scope |  |  |  | | --- | --- | --- | |  | of variables and properties [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_499) | | |  | shadowing [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_511) [2](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_467) | | | | |\n| script applications [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_252)|  | calling [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_273) | | |  | handlers for [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_250) | | |  | Mac OS 9 compatible [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_253) | | |  | modern bundle format [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_254) | | |  | startup screen in [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_256) | | |  | stay-open [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_258) | | | | |\n| script class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_603) | | |\n| Script Editor |  |  |  | | --- | --- | --- | |  | Event Log History window [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_393) [2](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_890) | | |  | location in system [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_277) | | |  | overview [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_276) | | | | |\n| script objects [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_448)|  | child [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_472) | | |  | contents of [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_281) | | |  | defined [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_449) | | |  | initializing [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_453) | | |  | parent [1+](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_470) | | |  | scope of identifiers declared at top level of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_512) | | |  | sending commands to [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_463) | | |  | syntax of [1](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_450) | | | | |\n| script properties |  |  |  | | --- | --- | --- | |  | persistence of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_514) | | |  | scope of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_495) | | | | |\n| script, current [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_364) | | |\n| scripting addition |  |  |  | | --- | --- | --- | |  | command [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_313) | | |  | overview [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_308) | | | | |\n| scripting components command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_805) | | |\n| Scripting suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_654) | | |\n| second reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| set command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_806) [2](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_807) | | |\n| set eof command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_809) | | |\n| set the clipboard to command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_811) | | |\n| set volume command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_812) | | |\n| seventh reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| short-circuiting, during evaluation [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_985) | | |\n| showing package contents parameter |  | of command choose file [1](../reference/ASLR_cmds.md) | | |  | of command choose folder [1](../reference/ASLR_cmds.md) | | | | |\n| showing parameter |  | of command choose URL [1](../reference/ASLR_cmds.md) | | | | |\n| simple statements [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_425) | | |\n| since handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_953) | | |\n| sixth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| size parameter |  | of command info for [1](../reference/ASLR_cmds.md) | | | | |\n| slash symbol (/) [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1029) | | |\n| some reserved word [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1069) | | |\n| sound name parameter |  | of command display notification [1](../reference/ASLR_cmds.md) | | | | |\n| space constant [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_631) | | |\n| special characters |  |  |  | | --- | --- | --- | |  | in identifiers [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_401) | | |  | in text [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_619) | | | | |\n| Standard suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_656) | | |\n| starting at parameter |  | of command write [1](../reference/ASLR_cmds.md) | | | | |\n| starts with operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1013) [2](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1062) | | |\n| starts with, ends with operator [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1061) | | |\n| startup screen in script applications [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_255) | | |\n| statements [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_424)|  | compound [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_428) | | |  | simple [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_426) | | | | |\n| stay-open script applications [1](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_257) | | |\n| store script command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_817) | | |\n| storing values in variables [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_418) | | |\n| string class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_635) | | |\n| String Commands suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_658) | | |\n| subtitle parameter |  | of command display notification [1](../reference/ASLR_cmds.md) | | | | |\n| subtraction of date values [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_565) | | |\n|  | | |\n| suites |  |  |  | | --- | --- | --- | |  | AppleScript [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_643) | | |  | Clipboard Commands [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_645) | | |  | File Commands [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_647) | | |  | File Read/Write [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_649) | | |  | Internet [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_651) | | |  | Miscellaneous Commands [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_653) | | |  | Scripting [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_655) | | |  | Standard [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_657) | | |  | String Commands [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_659) | | |  | User Interaction [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_661) | | | | |\n| summarize command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_820) | | |\n| synonyms for whose [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1079) | | |\n| system attribute command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_822) | | |\n| system info command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_824) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"T\"></a>T | | |\n| tab character |  |  |  | | --- | --- | --- | |  | in text objects [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_633) | | | | |\n| tab constant [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_632) | | |\n| target, current [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_359) [2](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_366) | | |\n| target |  |  |  | | --- | --- | --- | |  | of commands [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_319) | | | | |\n| targeting remote applications [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_388) | | |\n| tell (compound) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_883) | | |\n| tell (simple) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_882) | | |\n| tell statements [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_323) [2](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_879)|  | nested [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_881) | | |  | nested, examples of [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_885) | | | | |\n| tenth reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| terminating |  |  |  | | --- | --- | --- | |  | handler execution [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_931) | | |  | repeat statement execution [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_867) | | | | |\n| test |  |  |  | | --- | --- | --- | |  | Boolean [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_859) | | |  | in filter reference form [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1076) | | | | |\n| text class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_608) | | |\n| text element [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_617) | | |\n| text item delimiters|  | AppleScript property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_346) | | | | |\n| text literal [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_414) | | |\n| text|  | as replacement for string [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_609) | | |  | constants [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_344) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_628) | | |  | special characters in [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_620) | | | | |\n| that reserved word [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1078) | | |\n| the clipboard command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_825) | | |\n| the reserved word (syntactic no-op) [1](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_972) | | |\n| then reserved word [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_862) | | |\n| third reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| through handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_955) | | |\n| through reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| thru handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_954) | | |\n| thru reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| time property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_560) | | |\n| time string property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_562) | | |\n| time to GMT command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_827) | | |\n| timeout, default value [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_898) | | |\n| times reserved word [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_871) | | |\n| to parameter |  | of command copy [1](../reference/ASLR_cmds.md) | | |  | of command random number [1](../reference/ASLR_cmds.md) | | |  | of command read [1](../reference/ASLR_cmds.md) | | |  | of command set [1](../reference/ASLR_cmds.md) | | |  | of command set eof [1](../reference/ASLR_cmds.md) | | |  | of command write [1](../reference/ASLR_cmds.md) | | | | |\n| transaction reserved word [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_905) | | |\n| true constant [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_356) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_544) | | |\n| try control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_889) | | |\n| try statements [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_886) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"U\"></a>U | | |\n| unary operators [1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_980) | | |\n| under handler parameter label [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_956) | | |\n| Unicode text class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_636) | | |\n| unit types class [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_637) | | |\n| Unix executable |  |  |  | | --- | --- | --- | |  | making script into [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_407) | | | | |\n| unsupported terms [1](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1132) | | |\n| until parameter |  | of command read [1](../reference/ASLR_cmds.md) | | | | |\n| uppercase letters [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_841) | | |\n| use (AppleScript) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_892) | | |\n| use (application or script) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_894) | | |\n| use (framework) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_895) | | |\n| use (scripting additions) control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_893) | | |\n| user cancelled error [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_330) | | |\n| User Interaction suite [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_660) | | |\n| user name parameter |  | of command do shell script [1](../reference/ASLR_cmds.md) | | | | |\n| user-defined commands [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_314) | | |\n| using delimiter parameter |  | of command read [1](../reference/ASLR_cmds.md) | | | | |\n| using delimiters parameter |  | of command read [1](../reference/ASLR_cmds.md) | | | | |\n| using parameter |  | of command say [1](../reference/ASLR_cmds.md) | | | | |\n| using terms from control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_896) | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"V\"></a>V | | |\n| variables [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_415)|  | declaring [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_486) | | |  | declaring with copy command [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_494) | | |  | declaring with set command [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_493) | | |  | defined [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_417) | | |  | global [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_489) [2](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_497) [3](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_508) | | |  | lifetime of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_505) | | |  | local [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_487) [2](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_496) [3](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_510) [4](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_457) | | |  | scope of [1](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_498) [2](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_503) | | | | |\n| version property [1](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_348) [2](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_539) [3](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_607) | | |\n| vertical bar character (\\|) in identifiers [1](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_399) | | |\n| vertical bars (\\|) |  | in syntax definitions [1](../introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_526) | | | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"W\"></a>W | | |\n| waiting until completion parameter |  | of command say [1](../reference/ASLR_cmds.md) | | | | |\n| web page (unsupported) [1](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1135) | | |\n| weekday property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_553) | | |\n| where reserved word [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1077) [2](../reference/ASLR_reference_forms.md) | | |\n| while reserved word [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_874) | | |\n| white space attribute [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_847) | | |\n| white space constants [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_625) | | |\n| whose reserved word [1](../reference/ASLR_reference_forms.md) | | |\n| whose|  | synonyms for [1](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1080) | | | | |\n| with clause [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_959) | | |\n| with icon parameter |  | of command display dialog [1](../reference/ASLR_cmds.md) [2](../reference/ASLR_cmds.md) [3](../reference/ASLR_cmds.md) | | | | |\n| with parameters parameter |  | of command run script [1](../reference/ASLR_cmds.md) | | | | |\n| with password parameter |  | of command mount volume [1](../reference/ASLR_cmds.md) | | | | |\n| with prompt parameter |  | of command choose application [1](../reference/ASLR_cmds.md) | | |  | of command choose file [1](../reference/ASLR_cmds.md) | | |  | of command choose file name [1](../reference/ASLR_cmds.md) | | |  | of command choose folder [1](../reference/ASLR_cmds.md) | | |  | of command choose from list [1](../reference/ASLR_cmds.md) | | |  | of command choose remote application [1](../reference/ASLR_cmds.md) | | | | |\n| with seed parameter |  | of command random number [1](../reference/ASLR_cmds.md) | | | | |\n| with timeout control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_899) | | |\n| with timeout statements [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_897) [2](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_903) | | |\n| with title parameter |  | of command choose application [1](../reference/ASLR_cmds.md) | | |  | of command choose from list [1](../reference/ASLR_cmds.md) | | |  | of command choose remote application [1](../reference/ASLR_cmds.md) | | |  | of command display dialog [1](../reference/ASLR_cmds.md) | | |  | of command display notification [1](../reference/ASLR_cmds.md) | | | | |\n| with transaction control statement [1](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_904) | | |\n| without clause [1](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_960) | | |\n| word element [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_618) | | |\n| working with errors [1](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_916) | | |\n| write command [1](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_828) | | |\n| write permission parameter |  | of command open for access [1](../reference/ASLR_cmds.md) | | | | |\n\n|  |  |  |\n| --- | --- | --- |\n| <a id=\"Y\"></a>Y | | |\n| year property [1](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_559) | | |\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": null, "sha256": null, "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_about_handlers.md", "title": "About Handlers", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH\"></a>\n\n# About Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_229\"></a>When script developers want to factor and re-use their code, they can turn to handlers. A handler is a collection of statements that can be invoked by name. Handlers are also known as functions, subroutines, or methods.\n\nThis chapter describes how to work with handlers, in the following sections:\n\n* [Handler Basics](#//apple_ref/doc/uid/TP40000983-CH206-SW3)\n* [Handlers in Script Applications](#//apple_ref/doc/uid/TP40000983-CH206-SW14)\n\nFor detailed reference information, see [Handler Reference](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-163762).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW3\"></a>\n\n## Handler Basics\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_230\"></a>A *handler* is a collection of statements that can be invoked by name. Handlers are useful in scripts that perform the same action in more than one place. You can package statements that perform a specific task as a handler, give it a descriptive name, and call it from anywhere in the script. This makes the script shorter and easier to maintain.\n\nA script can contain one or more handlers. However, you can not nest a handler definition within another handler (although a script object defined in a handler can contain other handlers).\n\nThe definition for a handler specifies the parameters it uses, if any, and may specify a class or classes for the parameter and a default value.\n\nWhen you call a handler, you must list its parameters according to how they are specified in its definition. Handlers may have labeled, positional, or interleaved parameters, described in subsequent sections. If a parameter has a specified class, AppleScript will coerce the actual value to that class as if using the `as` operator. If a parameter has a default value, that parameter may be omitted.\n\nA handler definition can contain variable declarations and statements. It may use a `return` statement (described in detail in `return`) to return a value and exit the handler<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_231\"></a>.\n\nThe sections that follow provide additional information on working with handlers:\n\n* [Defining a Simple Handler](#//apple_ref/doc/uid/TP40000983-CH206-SW23)\n* [Handlers with Labeled Parameters](#//apple_ref/doc/uid/TP40000983-CH206-SW22)\n* [Handlers with Positional Parameters](#//apple_ref/doc/uid/TP40000983-CH206-SW13)\n* [Handlers with Patterned Positional Parameters](#//apple_ref/doc/uid/TP40000983-CH206-SW20)\n* [Recursive Handlers](#//apple_ref/doc/uid/TP40000983-CH206-SW11)\n* [Errors in Handlers](#//apple_ref/doc/uid/TP40000983-CH206-SW10)\n* [Passing by Reference Versus Passing by Value](#//apple_ref/doc/uid/TP40000983-CH206-SW4)\n* [Calling Handlers in a tell Statement](#//apple_ref/doc/uid/TP40000983-CH206-SW1)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW23\"></a>\n\n### Defining a Simple Handler\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_232\"></a>The following is a definition for a simple handler that takes any parameter value that can be displayed as text (presumably one representing a date) and displays it in a dialog box. The handler name is `rock`; its parameter is `around the clock`, where `around` is a parameter label and `clock` is the parameter name (`the` is an AppleScript filler for readability):\n\n```\non rock around the clock\n    display dialog (clock as text)\nend rock\n```\n\nThis handler allows an English-like calling statement:\n\n```\nrock around the current date -- call handler to display current date\n```\n\nA handler can have no parameters. To indicate that a handler has no parameters, you include a pair of empty parentheses after the handler name in both the handler definition and the handler call. For example, the following `helloWorld` script has no parameters.<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_233\"></a>\n\n```\non helloWorld()\n    display dialog \"Hello World\"\nend\n \nhelloWorld() -- Call the handler\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW22\"></a>\n\n### Handlers with Labeled Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_234\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_235\"></a>To define a handler with labeled parameters, you list the labels to use when calling the handler and the statements to be executed when it is called. (The syntax is shown in [Handler Syntax (Labeled Parameters)](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2).)\n\nHandlers with labeled parameters can also have a direct parameter. With the exception of the direct parameter, which must directly follow the handler name, labeled parameters can appear in any order, with the labels from the handler definition identifying the parameter values. This includes parameters listed in `given`, `with`, and `without` clauses (of which there can be any number).\n\nThe `findNumbers` handler in the following example uses the special label `given` to define a parameter with the label `given rounding`.\n\n```\nto findNumbers of numberList above minLimit given rounding:roundBoolean\n        set resultList to {}\n        repeat with i from 1 to (count items of numberList)\n            set x to item i of numberList\n            if roundBoolean then -- round the number\n                -- Use copy so original list isn’t modified.\n                copy (round x) to x\n            end if\n            if x &gt; minLimit then\n                set end of resultList to x\n            end if\n        end repeat\n        return resultList\nend findNumbers\n```\n\nThe next statements show how to call `findNumbers` by passing a predefined `list` variable:\n\n```\nset myList to {2, 5, 19.75, 99, 1}\nfindNumbers of myList above 19 given rounding:true\n    --result: {20, 99}\nfindNumbers of myList above 19 given rounding:false\n    --result: {19.75, 99}\n```\n\nYou can also specify the value of the `rounding` parameter by using a `with` or `without` clause to indicate `true` or `false`. (In fact, when you compile the previous examples, AppleScript automatically converts `given rounding:true` to `with rounding` and `given rounding:false` to `without rounding`.) These examples pass a `list` object directly, rather than using a `list` variable as in the previous case:\n\n```\nfindNumbers of {5.1, 20.1, 20.5, 33} above 20 with rounding\n    --result: {33}\n \nfindNumbers of {5.1, 20.1, 20.5, 33.7} above 20 without rounding\n    --result: {20.1, 20.5, 33.7}\n```\n\nHere is another handler that uses parameter labels:\n\n```\nto check for yourNumber from startRange thru endRange\n    if startRange ≤ yourNumber and yourNumber ≤ endRange then\n        display dialog \"Congratulations! Your number is included.\"\n    end if\nend check\n```\n\nThe following statement calls the handler, causing it to display the `\"Congratulations!\"` message\n\n```\ncheck for 8 from 7 thru 10 -- call the handler\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW13\"></a>\n\n### Handlers with Positional Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_236\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_237\"></a>The definition for a handler with positional parameters shows the order in which to list parameters when calling the handler and the statements to be executed when the handler is called. The definition must include parentheses, even if it doesn’t include any parameters. The syntax is shown in [Handler Syntax (Positional Parameters)](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-166812).\n\nIn the following example, the `minimumValue` routine returns the smaller of two values:\n\n```\non minimumValue(x, y)\n    if x &lt; y then\n        return x\n    else\n        return y\n    end if\nend minimumValue\n \n-- To call minimumValue:\nminimumValue(5, 105) --result: 5\n```\n\nThe first line of the `minimumValue` handler specifies the parameters of the handler. To call a handler with positional parameters you list the parameters in the same order as they are specified in the handler definition.\n\nIf a handler call is part of an expression, AppleScript uses the value returned by the handler to evaluate the expression. For example, to evaluate the following expression, AppleScript first calls `minimumValue`, then evaluates the rest of the expression.\n\n```\nminimumValue(5, 105) + 50 --result: 55\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW20\"></a>\n\n### Handlers with Patterned Positional Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_238\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_239\"></a>You can create a handler whose positional parameters define a pattern to match when calling the handler. For example, the following handler takes a single parameter whose pattern consists of two items in a list:\n\n```\non displayPoint({x, y})\n    display dialog (\"x = \" & x & \", y = \" & y)\nend displayPoint\n \n-- Calling the handler:\nset testPoint to {3, 8}\ndisplayPoint(testPoint)\n```\n\nA parameter pattern can be much more complex than a single list. The handler in the next example takes two numbers and a record whose properties include a list of bounds. The handler displays a dialog box summarizing some of the passed information.\n\n```\non hello(a, b, {length:l, bounds:{x, y, w, h}, name:n})\n    set q to a + b\n \n    set response to \"Hello \" & n & \", you  are \" & l & ¬\n        \" inches tall and occupy position (\" & x &  \", \" & y & \").\"\n \n    display dialog response\n \nend hello\n \nset thing to {bounds:{1, 2, 4, 5}, name:\"George\", length:72}\nhello (2, 3, thing)\n--result: A dialog displaying “Hello George, you are 72 inches  tall\n--          and occupy position (1,2).”\n```\n\nThe properties of a record passed to a handler with patterned parameters don’t have to be given in the same order in which they are given in the handler’s definition, as long as all the properties required to fit the pattern are present.\n\nThe following call to `minimumValue` uses the value from a handler call to `maximumValue` as its second parameter. The `maximumValue` handler (not shown) returns the larger of two passed numeric values.\n\n```\nminimumValue(20, maximumValue(1, 313)) --result: 20\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW2\"></a>\n\n### Handlers with Interleaved Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_240\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_241\"></a>A handler with interleaved parameters is a special case of one with positional parameters. The definition shows the order in which to list parameters when calling the handler and the statements to be executed when the handler is called, but the name of the handler is broken into pieces and interleaved with the parameters, which can make it easier to read. Handlers with interleaved parameters may be used in any script, but are especially useful with bridged Objective-C methods, since they naturally resemble Objective-C syntax. The syntax is shown in [Handler Syntax (Interleaved Parameters)](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW4).\n\nA handler with interleaved parameters may have only one parameter, as in this example:\n\n```\non areaOfCircleWithRadius:radius\n    return radius ^ 2 * pi\nend areaOfCircleWithRadius:\n```\n\nOr more than one, as in this example:\n\n```\non areaOfRectangleWithWidth:w height:h\n    return w * h\nend areaOfRectangleWithWidth:height:\n```\n\nTo call a handler with interleaved parameters, list the parameters in the same order as they are specified in the handler definition. Despite the resemblance to labeled parameters, the parameters may not be reordered. Also, the call must be explicitly sent to an object, even if the target object is the default, `it`. For example:\n\n```\nits foo:5 bar:105 --this works\ntell it to foo:5 bar:105 --as does this\nfoo:5 bar:105 --syntax error.\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW5\"></a>\n>\n> **Note:** The actual name of an interleaved-parameter handler is all the name parts strung together with underscores, and is equivalent to a handler defined using that name with positional parameters. For example, these two handler declarations are equivalent:\n>\n> ```\n> on tableView:t objectValueForTableColumn:c row:r\n> on tableView_objectValueForTableColumn_row_(t, c, r)\n> ```\n>\n> Given a compiled script, AppleScript will automatically translate between the two forms depending on whether or not the current system version supports interleaved parameters.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW12\"></a>\n\n### Parameter Specifications\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW18\"></a>\n>\n> **Note:** Parameter specifications are supported in OS X Yosemite v10.10 and later.\n\nThe parameter “name” in a handler definition may be a simple name, as shown above, or it may additionally specify a required class and, for labeled parameters, a default value. To specify a required class, follow the name with `as` *class* or `as {`*class*`,`…`}`. For example, you could declare a parameter to be specifically an integer like this:\n\n```\non factorial(x as integer)\n```\n\nThe effect is as if the handler began with `set x to x as integer`; if coercing the actual value to an integer fails, AppleScript throws an appropriate error, which may be caught with a `try` block. The class may be a list of classes, as described in [Operators Reference](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\nLabeled parameters may be declared with a default value by following the formal parameter name with `:`*literal*. Doing so makes the parameter optional when called. For example, this declares a `make` handler with a default value for the `with data` parameter:\n\n```\non make new theClass with data theData : missing value\n```\n\nThis handler can now be called without supplying a `with data` parameter; the handler would see `theData` set to the specified default `missing value`, which it could then test for and handle appropriately.\n\nA parameter may use both a type specification and a default value. For example, this declares a `make` handler with a `with properties` parameter that must be a record and has a default value of an empty record:\n\n```\non make new theClass with properties theProperties as record : {}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW11\"></a>\n\n### Recursive Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_242\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_243\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_244\"></a>A *recursive handler* is a handler that calls itself. For example, this recursive handler generates a factorial. (The factorial of a number is the product of all the positive integers from 1 to that number. For example, 4 factorial is equal to 1 \\* 2 \\* 3 \\* 4, or 24. The factorial of 0 is 1.)\n\n```\non factorial(x)\n    if x &gt; 0 then\n        return x * factorial(x - 1)\n    else\n        return 1\n    end if\nend factorial\n \n-- To call factorial:\nfactorial(10)   --result: 3628800\n```\n\nIn the example above, the handler `factorial` is called once, passing the value `10`. The handler then calls itself recursively with a value of `x - 1`, or `9`. Each time the handler calls itself, it makes another recursive call, until the value of `x` is `0`. When `x` is equal to `0`, AppleScript skips to the `else` clause and finishes executing all the partially executed handlers, including the original `factorial` call.\n\nWhen you call a recursive handler, AppleScript keeps track of the variables and pending statements in the original (partially executed) handler until the recursive handler has completed. Because each call uses some memory, the maximum number of pending handlers is limited by the available memory. As a result, a recursive handler may generate an error before the recursive calls complete.\n\nIn addition, a recursive handler may not be the most efficient solution to a problem. For example, the factorial handler shown above can be rewritten to use a `repeat` statement instead of a recursive call, as shown in the example in `repeat with loopVariable (from startValue to stopValue)`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW10\"></a>\n\n### Errors in Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_245\"></a>As with any AppleScript statements that may encounter an error, you can use a `try` statement to deal with possible errors in a handler. A `try` statement includes two collections of statements: one to be executed in the general case, and a second to be executed only if an error occurs.\n\nBy using one or more `try` statements with a handler, you can combine the advantages of reuse and error handling in one package. For a detailed example that demonstrates this approach, see [Working with Errors](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW4\"></a>\n\n### Passing by Reference Versus Passing by Value\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_246\"></a>Within a handler, each parameter is like a variable, providing access to passed information. AppleScript passes all parameters by reference, which means that a passed variable is shared between the handler and the caller, as if the handler had created a variable using the `set` command. However, it is important to remember a point raised in [Using the copy and set Commands](ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW7): only mutable objects can actually be changed.\n\nAs a result, a parameter’s class type determines whether information is effectively passed by value or by reference:\n\n* For mutable objects (those whose class is `date`, `list`, `record`, or `script`), information is passed *by reference*:\n\n  If a handler changes the value of a parameter of this type, the original object is changed.\n* For all other class types, information is effectively passed *by value*:\n\n  Although AppleScript passes a reference to the original object, that object cannot be changed. If the handler assigns a new value to a parameter of this type, the original object is unchanged.\n\nIf you *want* to pass by reference with a class type other than `date`, `list`, `record`, or `script`, you can pass a `reference` object that refers to the object in question. Although the handler will have access only to a copy of the `reference` object, the specified object will be the same. Changes to the specified object in the handler will change the original object, although changes to the `reference` object itself will not.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW1\"></a>\n\n### Calling Handlers in a tell Statement\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_247\"></a>To call a handler from within a `tell` statement, you must use the reserved words `of me` or `my` to indicate that the handler is part of the script and not a command that should be sent to the target of the `tell` statement.<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_248\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_249\"></a>\n\nFor example, the following script calls the `minimumValue` handler defined in [Handlers with Positional Parameters](#//apple_ref/doc/uid/TP40000983-CH206-SW13) from within a `tell` statement. If this call did not include the words `of me`, it would cause an error, because AppleScript would send the `minimumValue` command to TextEdit, which does not understand that message.\n\n```\ntell front document of application \"TextEdit\"\n    minimumValue(12, 400) of me\n    set paragraph 1 to result as text\nend tell\n--result: The handler call is successful.\n```\n\nInstead of using the words `of me`, you could insert the word `my` before the handler call:\n\n```\nmy minimumValue(12, 400)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW14\"></a>\n\n## Handlers in Script Applications\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_250\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_251\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_252\"></a>A *script application* is an application whose only function is to run the script associated with it. Script applications contain handlers that allow them to respond to commands. For example, many script applications can respond to the `run` command and the `open` command. A script application receives a `run` command whenever it is launched and an `open` command whenever another icon is dropped on its icon in the Finder. It can also contain other handlers to respond to commands such as `quit` or `print`.\n\nWhen saving a script in Script Editor, you can create a script application by choosing either Application or Application Bundle from the File Format options. Saving as Application results in a simple format that is compatible with Mac OS 9.<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_253\"></a> Saving as Application Bundle results in an application that uses the modern bundle format, with its specified directory structure, which is supported back to OS X v10.3.<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_254\"></a>\n\nWhen creating a script application, you can also specify whether a <a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_255\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_256\"></a>startup screen should appear before the application runs its script. Whatever you write in the Description pane of the script window in Script Editor is displayed in the startup screen. <a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_257\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_258\"></a>You can also specify in Script Editor whether a script application should stay open after running. The default is for the script to quit immediately after it is run.\n\nYou can run a script application from the Finder much like any other application. If it has a startup screen, the user must click the Run button or press the Return key before the script actually runs.\n\nConsider the following simple script\n\n```\ntell application \"Finder\"\n    close front window\nend tell\n```\n\nWhat this script does as a script application depends on what you specify when you save it. If you don’t specify a startup screen or tell it to stay open, it will automatically execute once, closing the front Finder window, and then quit.\n\nIf a script application modifies the value of a property, the changed value persists across launches of the application. For related information, see [Scope of Variables and Properties](ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW1).\n\nFor information about some common script application handlers, see the following sections:\n\n* [run Handlers](#//apple_ref/doc/uid/TP40000983-CH206-SW15)\n* [open Handlers](#//apple_ref/doc/uid/TP40000983-CH206-SW16)\n* [idle and quit Handlers for Stay-Open Applications](#//apple_ref/doc/uid/TP40000983-CH206-SW7)\n\nSee [Handler Reference](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-163762) for syntax information.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW15\"></a>\n\n### run Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_259\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_260\"></a>When you run a script or launch a script application, its `run` handler is invoked. A script’s `run` handler is defined in one of two ways:\n\n* As an implicit `run` handler, which consists of all statements declared outside any handler or nested `script` object in a script.\n\n  Declarations for properties and `global` variables are not considered statements in this context—that is, they are not considered to be part of an implicit `run` handler.\n* As an explicit `run` handler, which is enclosed within `on run` and `end` statements, similar to other handlers.<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_261\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_262\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_263\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_264\"></a>\n\nHaving both an implicit and an explicit `run` handler is not allowed, and causes a syntax error during compilation. If a script has no run handler (for example, a script that serves as a library of handlers, as described in [Parameter Specifications](#//apple_ref/doc/uid/TP40000983-CH206-SW12)), executing the script does nothing. However, sending it an explicit `run` command causes an error.\n\nThe following script demonstrates an implicit `run` handler. The script consists of a statement that invokes the `sayHello` handler, and the definition for the handler itself:\n\n```\nsayHello()\n \non sayHello()\n    display dialog \"Hello\"\nend sayHello\n```\n\nThe implicit `run` handler for this script consists of the statement `sayHello()`, which is the only statement outside the handler. If you save this script as a script application and then run the application, the script receives a `run` command, which causes it to execute the one statement in the implicit `run` handler.\n\nYou can rewrite the previous script to provide the exact same behavior with an explicit `run` handler:\n\n```\non run\n    sayHello()\nend run\n \non sayHello()\n    display dialog \"Hello\"\nend sayHello\n```\n\nWhether a script is saved as a script application or as a compiled script, its `run` handler is invoked when the script is run. You can also invoke a `run` handler in a script application from another script. For information about how to do this, see [Calling a Script Application From a Script](#//apple_ref/doc/uid/TP40000983-CH206-SW17).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW16\"></a>\n\n### open Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_265\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_266\"></a>Mac apps, including script applications, receive an `open` command whenever the user drops file, folder, or disk icons on the application’s Finder icon, even if the application is already running.\n\nIf the script in a script application includes an `open` handler, the handler is executed when the application receives the `open` command. The `open` handler takes a single parameter which provides a list of all the items to be opened. Each item in the list is an`alias` object.\n\nFor example, the following `open` handler makes a list of the pathnames of all items dropped on the script application’s icon and saves them in the frontmost TextEdit document:\n\n```\non open names\n    set pathNamesString to \"\" -- Start with empty text string.\n    repeat with i in names\n        -- In this loop, you can perform operations on each dropped item.\n        -- For now, just get the name and append a return character.\n        set iPath to (i as text)\n        set pathNamesString to pathNamesString & iPath & return\n    end repeat\n    -- Store list in open document, to verify what was dropped.\n    tell application \"TextEdit\"\n        set paragraph 1 of front document to pathNamesString\n    end tell\n    return\nend open\n```\n\nFiles, folders, or disks are not moved, copied, or affected in any way by merely dropping them on a script application. However, the script application’s handler can tell Finder to move, copy, or otherwise manipulate the items. For examples that work with Finder items, see [Folder Actions Reference](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-SW2).\n\nYou can also run an `open` handler by sending a script application the `open` command. For details, see [Calling a Script Application From a Script](#//apple_ref/doc/uid/TP40000983-CH206-SW17).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW7\"></a>\n\n### idle and quit Handlers for Stay-Open Applications\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_267\"></a>By default, a script application that receives a `run` or `open` command handles that single command and then quits. In contrast, a stay-open script application (one saved as Stay Open in Script Editor) stays open after it is launched.\n\nA stay-open script application can be useful for several reasons:\n\n* Stay-open script applications can receive and handle other commands in addition to `run` and `open`. This allows you to use a script application as a script server that, when it is running, provides a collection of handlers that can be invoked by any other script.\n* Stay-open script applications can perform periodic actions, even in the background, as long as the script application is running.\n\nTwo particular handlers that stay-open script applications often provide are an `idle` handler and a `quit` handler.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW8\"></a>\n\n#### idle Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_268\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_269\"></a>If a stay-open script application includes an `idle` handler, AppleScript sends the script application periodic `idle` commands—by default, every 30 seconds—allowing it to perform background tasks when it is not performing other actions.\n\nIf an `idle` handler returns a positive number, that number becomes the rate (in seconds) at which the handler is called. If the handler returns a non-numeric value, the rate is not changed. You can return 0 to maintain the default delay of 30 seconds.\n\nFor example, when saved as a stay-open application, the following script beeps every 5 seconds:\n\n```\non idle\n    beep\n    return 5\nend idle\n```\n\nThe result returned from a handler is just the result of the last statement, even if it doesn’t include the word `return` explicitly. (See `return` for more information.) For example, this handler gets called once a minute, because the value of the last statement is 60:\n\n```\non idle\n    set x to 10\n    beep\n    set x to x * 6  -- The handler returns the result (60).\nend idle\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW9\"></a>\n\n#### quit Handlers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_270\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_271\"></a>AppleScript sends a stay-open script application a `quit` command whenever the user chooses the Quit menu command or presses Command-Q while the application is active. If the script includes a `quit` handler, the statements in the handler are run before the application quits.\n\nA `quit` handler can be used to set script properties, tell another application to do something, display a dialog box, or perform almost any other task. If the handler includes a `continue quit` statement, the script application’s default quit behavior is invoked and it quits. If the `quit` handler returns before it encounters a `continue quit` statement, the application doesn’t quit.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW6\"></a>\n>\n> **Note:** The `continue` statement passes control back to the application’s default `quit` handler. For more information, see `continue`.\n\nFor example, this handler checks with the user before allowing the application to quit:\n\n```\non quit\n    display dialog \"Really quit?\" ¬\n        buttons {\"No\", \"Quit\"} default button  \"Quit\"\n    if the button returned of the result is \"Quit\" then\n        continue quit\n    end if\n    -- Without the continue statement, the application doesn't quit.\nend quit\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_8\"></a>\n\n**Warning:** \nIf AppleScript doesn’t encounter a `continue quit` statement while executing an `on quit` handler, it may seem to be impossible to quit the application. For example, if the handler shown above gets an error before the `continue quit` statement, the application won’t quit. If necessary, you can use Force Quit (Command-Option-Esc) to halt the application. <a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_272\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-SW17\"></a>\n\n## Calling a Script Application From a Script\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_273\"></a>A script can send commands to a script application just as it can to other applications. To launch a non-stay-open application and run its script, use a `launch` command followed by a `run` command, like this:\n\n```\nlaunch application \"NonStayOpen\"\nrun application \"NonStayOpen\"\n```\n\nThe `launch` command launches the script application without sending it an implicit `run` command. When the `run` command is sent to the script application, it processes the command, sends back a reply if necessary, and quits.\n\nSimilarly, to launch a non-stay-open application and run its `stringTest` handler (which takes a `text` object as a parameter), use a `launch` command followed by a `stringTest` command, like this:\n\n```\ntell application \"NonStayOpen\"\n    launch\n    stringTest(\"Some example text.\")\nend tell\n```\n\nFor information on how to create script applications, see [Handlers in Script Applications](#//apple_ref/doc/uid/TP40000983-CH206-SW14).<a id=\"//apple_ref/doc/uid/TP40000983-CH206-DontLinkElementID_274\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html", "sha256": "010b31a85da0326b0a7c8e3f0d5d5ceb15e1226bb424c3942dafd13de60c3757", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_fundamentals.md", "title": "AppleScript Fundamentals", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW2\"></a>\n\n# AppleScript Fundamentals\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_275\"></a>This chapter describes basic concepts that underlie the terminology and rules covered in the rest of this guide.\n\n* [Script Editor Application](#//apple_ref/doc/uid/TP40000983-CH218-SW36)\n* [AppleScript and Objects](#//apple_ref/doc/uid/TP40000983-CH218-SW1)\n* [Object Specifiers](#//apple_ref/doc/uid/TP40000983-CH218-SW7)\n* [Coercion (Object Conversion)](#//apple_ref/doc/uid/TP40000983-CH218-SW21)\n* [Scripting Additions](#//apple_ref/doc/uid/TP40000983-CH218-SW3)\n* [Commands Overview](#//apple_ref/doc/uid/TP40000983-CH218-SW8)\n* [AppleScript Error Handling](#//apple_ref/doc/uid/TP40000983-CH218-SW10)\n* [Global Constants in AppleScript](#//apple_ref/doc/uid/TP40000983-CH218-BAJBDEJI)\n* [The it and me Keywords](#//apple_ref/doc/uid/TP40000983-CH218-SW4)\n* [Aliases and Files](#//apple_ref/doc/uid/TP40000983-CH218-SW28)\n* [Remote Applications](#//apple_ref/doc/uid/TP40000983-CH218-SW9)\n* [Debugging AppleScript Scripts](#//apple_ref/doc/uid/TP40000983-CH218-SW20)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW36\"></a>\n\n## Script Editor Application\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_276\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_277\"></a>The Script Editor application is located in `/Applications/Utilities`. It provides the ability to edit, compile, and execute scripts, display application scripting terminologies, and save scripts in a variety of formats, such as compiled scripts, applications, and plain text.\n\nScript Editor can display the result of executing an AppleScript script and can display a log of the Apple events that are sent during execution of a script. In the Script Editor Preferences, you can also choose to keep a history of recent results or event logs.\n\nScript Editor has text formatting preferences for various types of script text, such as language keywords, comments, and so on. You can also turn on or off the Script Assistant, a code completion tool that can suggest and fill in scripting terms as you type. In addition, Script Editor provides a contextual menu to insert many types of boilerplate script statements, such as conditionals, comments, and error handlers.\n\nA *dictionary* <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_278\"></a>is the part of a scriptable application that specifies the scripting terms it understands. You can choose File &gt; Open Dictionary in Script Editor to display the dictionary<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_279\"></a> of a scriptable application or scripting addition on your computer. Or you can drag an application icon to the Script Editor icon to display its dictionary (if it has one).\n\nTo display a list that includes just the scriptable applications and scripting additions provided by macOS, choose Window &gt; Library. Double-click an item in the list to display its dictionary. Figure 2-1 shows the dictionary for the Finder application in OS X v10.5. The dictionary is labeled as “Finder.sdef”. The sdef format, along with other terminology formats, is described in “Specifying Scripting Terminology” in *[AppleScript Overview](../../applescript-overview/AppleScriptX.md#//apple_ref/doc/uid/10000156i)*.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-1153023-BBCCDDAF\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1153023\"></a>**Figure 2-1**  The Finder dictionary in Script Editor (in OS X v10.5)\n\n![The Finder dictionary in Script Editor (in OS X v10.5)](https://developer.apple.com/library/archive/applescript-language-guide/Art/finder_dictionary_2x.png)![The Finder dictionary in Script Editor (in OS X v10.5)](https://developer.apple.com/library/archive/applescript-language-guide/Art/finder_dictionary_2x.png)\n\nThere are also third-party editors for AppleScript.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW1\"></a>\n\n## AppleScript and Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_280\"></a>AppleScript is an object-oriented language. When you write, compile, and execute scripts, everything you work with is an object. An *object* is an instantiation of a class definition, which can include properties and actions. AppleScript defines classes for the objects you most commonly work with, starting with the top-level `script` object, which is the overall script you are working in.\n\nWithin in a `script` object, you work with other objects, including:\n\n* AppleScript objects:\n\n  AppleScript defines classes for boolean values, scripts, text, numbers, and other kinds of objects for working in scripts; for a complete list, see [Class Reference](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-246384).\n* macOS objects:\n\n  Scriptable parts of macOS and applications distributed with it, such as Finder, System Events, and Database Events (located in `/System/Library/CoreServices`), define many useful classes.\n* Application objects:\n\n  Third-party scriptable applications define classes that support a wide variety of features.\n\nThe following sections provide more detail about objects:\n\n* [What Is in a Script Object](#//apple_ref/doc/uid/TP40000983-CH218-SW15)\n* [Properties](#//apple_ref/doc/uid/TP40000983-CH218-SW5)\n* [Elements](#//apple_ref/doc/uid/TP40000983-CH218-SW14)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW15\"></a>\n\n### What Is in a Script Object\n\nWhen you enter AppleScript statements in script window in Script Editor, you are working in a top-level `script` object. All `script` object definitions follow the same syntax, except that a top-level `script` object does not have statements marking its beginning and end.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_281\"></a>A `script` object can contain the following:\n\n* Property definitions (optional):\n\n  A property is a labeled container in which to store a value.\n* An explicit `run` handler (optional):\n\n  A `run` handler contains statements AppleScript executes when the script is run. (For more information, see [run Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW15).)\n* An implicit `run` handler (optional):\n\n  An implicit `run` handler consists of any statements outside of any contained handlers or `script` objects.\n* Additional handlers (optional):\n\n  A handler is the equivalent of a subroutine. (For details, see [About Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH).)\n* Additional `script` objects (optional):\n\n  A `script` object can contain nested `script` objects, each of which is defined just like a top-level `script` object, except that a nested `script` object is bracketed with statements that mark its beginning and end. (For details, see [Script Objects](ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA).)\n\nHere is an example of a simple script with one property, one handler, one nested `script` object, and an implicit `run` handler with two statements:\n\n```\nproperty defaultClientName : \"Mary Smith\"\n \non greetClient(nameOfClient)\n    display dialog (\"Hello \" & nameOfClient & \"!\")\nend greetClient\n \nscript testGreet\n    greetClient(defaultClientName)\nend script\n \nrun testGreet --result: \"Hello Mary Smith!\"\ngreetClient(\"Joe Jones\") --result: \"Hello Joe Jones!\"\n```\n\nThe first statement in the `run` handler is `run testGreet`, which runs the nested `script` object `testGreet`. That `script` object calls the handler `greetClient()`, passing the property `defaultClientName`. The handler displays a dialog, greeting the default client, Mary Smith.\n\nThe second statement in the `run` handler calls `greetClient()` directly, passing the string `\"Joe Jones\"`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW5\"></a>\n\n### Properties\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_282\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_283\"></a>A *property* of an object is a characteristic that has a single value and a label, such as the `name` property of a window or the `month` property of a date. The definition for any AppleScript class includes the name and class for each of its properties. Property names must be unique within a class. Property values can be read/write or read only.\n\nThe AppleScript `date` class, for example, defines both read/write and read only properties. These include the `weekday` property, which is read only, and the `month`, `day`, and `year` properties, which are read/write. That’s because the value of the `weekday` property depends on the other properties—you can’t set an arbitrary weekday for an actual date.\n\nThe class of a property can be a simple class such as `boolean` or `integer`, a composite class such as a `point` class (made up of two integers), or a more complex class.\n\nMost classes only support predefined properties. However, for the `script` class, AppleScript lets you to define additional properties. For information on how to do this, see [Defining Properties](ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW2). You can also define properties for `record` objects.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW14\"></a>\n\n### Elements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_284\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_285\"></a>An *element* is an object contained within another object. The definition for any AppleScript class includes the element types it can contain. An object can typically contain zero or more of each of its elements.\n\nFor a given element type, an object can contain many elements or none, and the number of elements that it contains may change over time. For example, it is possible for a `list` object to contain no items (it can be an empty list). At a later time, the same list might contain many items.\n\nWhether you can add elements to or remove elements from an object depends on the class and the element. For example, a `text` object is immutable—you cannot add or remove text once the object is created. For a `list` object, you cannot remove items, but you can use the `set` command to add an item to the beginning or end:\n\n```\nset myList to {1, \"what\", 3} --result: {1, \"what\", 3}\nset beginning of myList to 0\nset end of myList to \"four\"\nmyList --result: {0, 1, \"what\", 3, \"four\"}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW7\"></a>\n\n## Object Specifiers\n\nAn *object specifier*<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_286\"></a> specifies the information needed to find another object in terms of the objects in which it is contained. An object specifier can refer to an application object, such as a window or file, or to an AppleScript object, such as an item in a list or a property in a record.\n\nAn object specifier is fully evaluated (or resolved) only when a script is run, not when it is compiled. A script can contain a valid object specifier (such as `third document of application \"TextEdit\"` that causes an error when the script is executed (because, for example, there may be less than three documents open).\n\nApplications typically return object specifiers in response to commands. For example, if you ask the Finder for a window, it returns information that specifies the window object your script asked for (if it exists). The top-level container in an object specifier is typically the application itself.\n\nYou create an object specifier every time your script uses a phrase that describes the path to an object or property, such as `name of window 1 of application \"Finder\"`. When you use the `a reference to` operator, it creates a `reference` object that wraps an object specifier.\n\nThe difference between an object specifier and the object it refers to is like the difference between a building address and the building itself. The address is a series of words and numbers, such as “2121 Oak Street, San Francisco, CA” that identifies a location (on a street, in a city, in a state). It is distinct from the building itself. If the building at that location is torn down and replaced with a new building, the address remains the same.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW23\"></a>\n\n### What Is in an Object Specifier\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_287\"></a>An object specifier describes an object type, a location, and how to distinguish the object from other objects of the same type in that location. These three types of information—the type, or class; the location, or container; and the distinguishing information, or reference form—allow you to specify any object.\n\nIn the following example, the class of the object is `paragraph`. The container is the phrase `of document 1`. Because this phrase is inside a `tell` statement, the `tell` statement provides the top-level container, `of application \"TextEdit\"`. The distinguishing information (the reference form) is the combination of the class, `paragraph`, and an index value, `1`, which together indicate the first paragraph.\n\n```\ntell application \"TextEdit\"\n    paragraph 1 of document 1\nend tell\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW39\"></a>\n>\n> **Note:** If you examine the dictionary for the TextEdit application, you might think this script should say `paragraph 1 of text of document 1`. However, where the meaning is unambiguous, some applications make life easier for scripters by allowing them to omit a container from an object specifier. TextEdit uses this feature in supplying an <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_288\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_289\"></a>*implicitly specified subcontainer* for the text in a document. That is, if an object specifier identifies an object, such as a word or paragraph, that is contained in a document’s text, TextEdit automatically supplies the `of text` part of the object specifier.\n\nIn addition to the index reference form, you can specify objects in a container by name, by range, by ID, and by the other forms described in [Reference Forms](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-120522).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW24\"></a>\n\n### Containers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_290\"></a>A container is an object that contains one or more objects or properties. In an object specifier, a container specifies where to find an object or a property. To specify a container, use the word `of` or `in`, as in the following statement (from a Finder `tell` block):<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_291\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_292\"></a>\n\n```\nfolder \"Applications\" of startup disk\n```\n\nA container can be an object or a series of objects, listed from the innermost to the outermost containing object, as in the following:\n\n```\ntell application \"Finder\"\n    first item of first folder of first disk\nend tell\n```\n\nYou can also use the possessive form (`'s`) to specify containers. In the following example, the innermost container is `first window` and the object it contains is a `name` property:<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_293\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_294\"></a>\n\n```\ntell application \"TextEdit\"\n    first window's name\nend tell\n```\n\nIn this example, the target of the `tell` statement (`\"TextEdit\"`) is the outer container for the object specifier.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW25\"></a>\n\n### Absolute and Relative Object Specifiers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_295\"></a>An <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_296\"></a>*absolute object specifier* has enough information to identify an object or objects uniquely. It can be used unambiguously anywhere in a script. For a reference to an application object to be absolute, its outermost container must be the application itself, as in:\n\n```\nversion of application \"Finder\" --result: \"10.5.1\"\n```\n\nIn contrast, <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_297\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_298\"></a>a *relative object specifier* does not specify enough information to identify an object or objects uniquely; for example:\n\n```\nname of item 1 of disk 2\n```\n\nWhen AppleScript encounters a relative object specifier in a `tell` statement, it attempts to use the default target specified by the statement to complete the object specifier. Though it isn’t generally needed, this implicit target can be specified explicitly using the keyword `it`, which is described in [The it and me Keywords](#//apple_ref/doc/uid/TP40000983-CH218-SW4).\n\nThe default target of a `tell` statement is the object that receives commands if no other object is specified. For example, the following `tell` statement tells the Finder to get a name using the previous relative object specifier.\n\n```\ntell application \"Finder\"\n    name of item 1 of disk 2\nend tell\n```\n\nWhen AppleScript encounters a relative object specifier outside any `tell` statement, it tries to complete the object specifier by looking up the inheritance chain described in [Inheritance in Script Objects](ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW5).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW27\"></a>\n\n### Object Specifiers in Reference Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_299\"></a>When you can create a `reference` object with the <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_300\"></a>`a reference to` operator, it contains an object specifier. For example:\n\n```\ntell application \"TextEdit\"\n    set docRef to a reference to the first document\n    --result: document 1 of application \"TextEdit\"\n        -- an object specifier\n    name of docRef --result: \"New Report.rtf\"\n        -- name of the specified object\nend tell\n```\n\nIn this script, the variable `docRef` is a reference whose object specifier refers to the first document of the application TextEdit—which happens to be named “New Report.rtf” in this case. However, the object that `docRef` refers to can change. If you open a second TextEdit document called “Second Report.rtf” so that its window is in front of the previous document, then run this script again, it will return the name of the now-frontmost document, “Second Report.rtf”.\n\nYou could instead create a reference with a more specific object specifier:\n\n```\ntell application \"TextEdit\"\n    set docRef to a reference to document \"New Report.rtf\"\n    --result: document \"New Report.rtf\" of application \"TextEdit\"\n    name of docRef --result: \"New Report.rtf\"\nend tell\n```\n\nIf you run this script after opening a second document, it will still return the name of the original document, “New Report.rtf”, if the document exists.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_301\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_302\"></a>After you create a `reference` object with the `a reference to` operator, you can use the `contents` property to get the value of the object that it refers to. That is, using the `contents` property causes the reference’s object specifier to be evaluated. In the following script, for example, the content of the variable `myWindow` is the window reference itself.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_303\"></a>\n\n```\nset myWindow to a ref to window \"Q1.rtf\" of application \"TextEdit\"\nmyWindow\n    -- result: window \"Q1.rtf\" of application \"TextEdit\" (object specifier)\ncontents of myWindow\n    --result: window id 283 of application \"TextEdit\" (an evaluated window)\nget myWindow\n    -- result: window \"Q1.rtf\" of application \"TextEdit\" (object specifier)\n```\n\nNote that the result of the `get` command is to return the reference’s object specifier, not to resolve the specifier to the object it specifies.\n\nWhen it can, AppleScript will implicitly dereference a reference object (without use of the `contents` property), as in the following example:\n\n```\nset myWindow to a ref to window 1 of application \"TextEdit\"\nname of myWindow --result: \"Q1.rtf\" (if that is the first window's name)\n```\n\nFor related information, see the Discussion section for the `reference` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW21\"></a>\n\n## Coercion (Object Conversion)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_304\"></a>*Coercion* (also known as <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_305\"></a>*object conversion*) is the process of converting objects from one class to another. AppleScript converts an object to a different class in either of these circumstances:\n\n* in response to the `as` operator<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_306\"></a>\n* automatically, when an object is of a different class than was expected for a particular command or operation\n\nNot all classes can be coerced to all other class types. Table 2-1 summarizes the coercions that AppleScript supports for commonly used classes. For more information about each coercion, see the corresponding class definition in [Class Reference](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-246384).\n\nAppleScript provides many coercions, either as a built-in part of the language or through the Standard Additions scripting addition. You can use these coercions outside of a `tell` block in your script. However, coercion of application class types may be dependent on the application and require a `tell` block that targets the application.\n\nThe `as` operator specifies a specific coercion or set of coercions. For example, the following statement coerces the integer `2` into the text `\"2\"` before storing it in the variable `myText`:\n\n```\nset myText to 2 as text\n```\n\nIf you provide a command parameter or operand of the wrong class, AppleScript automatically coerces the operand or parameter to the expected class, if possible. If the conversion can’t be performed, AppleScript reports an error.\n\nWhen coercing `text` strings to values of class `integer`, `number`, or `real`, or vice versa, AppleScript uses the current Numbers settings in the Formats pane in International preferences to determine what separators to use in the string. When coercing strings to values of class `date` or vice versa, AppleScript uses the current Dates settings in the Formats pane.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_307\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW12\"></a>\n\n**Table 2-1**  Default coercions supported by AppleScript\n\n| Convert from class | To class | Notes |\n| `alias` | `list` (single-item)  `text` |  |\n| `application` | `list` (single-item) | This is both an AppleScript class and an application class. |\n| `boolean` | `integer`  `list` (single-item)  `text` |  |\n| `class` | `list` (single-item)  `text` |  |\n| `constant` | `list` (single-item)  `text` |  |\n| `date` | `list` (single-item)  `text` |  |\n| `file` | `list` (single-item)  `text` |  |\n| `integer` | `list` (single-item)  `real`  `text` | Coercing an `integer` to a `number` does not change its class. |\n| `list` (single-item) | any class to which the item can be coerced if it is not part of a list |  |\n| `list` (multiple-item) | `text`, if each of the items in the list can be coerced to a `text` object |  |\n| `number` | `integer`  `list` (single-item)  `real`  `text` | Values identified as values of class `number` are really values of either class `integer` or class `real`. |\n| `POSIX file` | see `file` | `POSIX file` is a pseudo-class equivalent to the `file` class. |\n| `real` | `integer`  `list` (single-item) | In coercing to `integer`, any fractional part is rounded.  Coercing a `real` to a `number` does not change its class. |\n| `record` | `list` | All labels are lost in the coercion and the resulting list cannot be coerced back to a record. |\n| `reference` | any class to which the referenced object can be coerced |  |\n| `script` | `list` (single-item) |  |\n| `text` | `integer`  `list` (single-item)  `real` | Can coerce to `integer` or `real` only if the `text` object represents an appropriate number. |\n| `unit types` | `integer`  `list` (single-item)  `real`  `text` | Can coerce between unit types in the same category, such as `inches` to `kilometers` (length) or `gallons` to `liters` (liquid volume). |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW3\"></a>\n\n## Scripting Additions\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_308\"></a>A *scripting addition* is a file or bundle that provides handlers you can use in scripts to perform commands and coercions.\n\nMany of the commands described in this guide are defined in the Standard Additions scripting addition in macOS. These commands are stored in the file `StandardAdditions.osax` in `/System/Library/ScriptingAdditions`, and are available to any script. You can examine the terminology for the Standard Additions by opening this file in Script Editor.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW19\"></a>\n>\n> **Note:** A script can obtain the location of the Standard Additions with this script statement, which uses the `path to (folder)` command:\n>\n> ```\n> path to scripting additions as text\n>     --result: \"Hard_Disk:System:Library:ScriptingAdditions:\"\n> ```\n\nScripting additions can be embedded within bundled script applets by placing them in a folder named `Scripting Additions` (note the space between “Scripting” and “Additions”) inside the bundle’s `Contents/Resources/` folder. Note that Script Editor does not look for embedded scripting additions when editing bundled applets. During script development, any required scripting additions must be properly installed in `/System/ScriptingAdditions`, `/Library/ScriptingAdditions`, or `~/Library/ScriptingAdditions` so that Script Editor can find them.\n\nDevelopers can create their own scripting additions, as described in Technical Note TN1164, *[Scripting Additions for Mac OS X](https://developer.apple.com/library/archive/../../../technotes/tn1164/_index.html#//apple_ref/doc/uid/DTS10003003)*. For related conceptual information, see *[AppleScript Overview](../../applescript-overview/AppleScriptX.md#//apple_ref/doc/uid/10000156i)*, particularly the section “Extending AppleScript with Coercions, Scripting Additions, and Faceless Background Applications” in the chapter [Open Scripting Architecture](../../applescript-overview/Concepts/osa.md).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW8\"></a>\n\n## Commands Overview\n\nA *command* is a word or a series of words used in AppleScript statements to request an action. Every command is directed at a *target*, which is the object that responds to the command. The target is often an *application object*<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_309\"></a> (one that is stored in an application or its documents and managed by the application, such as a window or document) or an object in macOS. However, it can also be a `script` object or a value in the current script.\n\nCommands often return results. For example, the `display dialog` command returns a record that may contain text, a button name, and other information. Your script can examine this record to determine what to do next. You can assign the result of a command to a variable you define, or access it through the predefined AppleScript `result` variable.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW26\"></a>\n\n### Types of Commands\n\nScripts can make use of the following kinds of commands:\n\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_310\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_311\"></a>An *AppleScript command* is one that is built into the AppleScript language. There currently are five such commands: `get` , `set`, `count`, `copy`, and `run`. Except for `copy` , each of these commands can also be implemented by applications. That is, there is an AppleScript version of the command that works on AppleScript objects, but an application can define its own version that works on the object types it defines.\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_312\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_313\"></a>A *scripting addition command* is one that is implemented through the mechanism described in [Scripting Additions](#//apple_ref/doc/uid/TP40000983-CH218-SW3)). Although anyone can create a scripting addition (see Technical Note TN1164, *[Scripting Additions for Mac OS X](https://developer.apple.com/library/archive/../../../technotes/tn1164/_index.html#//apple_ref/doc/uid/DTS10003003)*), this guide documents only the scripting addition commands from the Standard Additions, supplied by Apple as part of macOS. These commands are available to all scripts.\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_314\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_315\"></a>A *user-defined command* is one that is implemented by a handler defined in a `script` object. To invoke a user-defined command outside of a `tell` statement, simply use its name and supply values for any parameters it requires. The command will use the current script as its target.\n\n  To invoke a user-defined command inside a `tell` statement, see [Calling Handlers in a tell Statement](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW1).\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_316\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_317\"></a>An *application command* is one that is defined by scriptable application to provide access to a scriptable feature. They are typically enclosed in a `tell` statement that targets the application. You can determine which commands an application supports by examining its dictionary in Script Editor.\n\n  Scriptable applications that ship with macOS, such as the Finder and System Events applications (located in `/System/Library/CoreServices`), provide many useful scripting commands.\n\n  Third-party scriptable applications also provide commands you can use in scripts. Many support all or a subset of the Standard commands, described in Technical Note TN2106, *[Scripting Interface Guidelines](https://developer.apple.com/library/archive/../../../technotes/tn2002/tn2106.html#//apple_ref/doc/uid/DTS10003199)*. These include commands such as `delete`, `duplicate`, `exists`, and `move`, as well as application implementations of AppleScript commands, such as `get` and `set`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW18\"></a>\n\n### Target\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_318\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_319\"></a>There are two ways to explicitly specify an object as the target of a command: by supplying it as the direct parameter of the command (described in the next section) or by specifying it as the target of a `tell` statement that contains the command. If a script doesn’t explicitly specify the target with a `tell` statement, and it isn’t handled by a handler in the script or by AppleScript itself, it is sent to the next object in the inheritance chain (see [The AppleScript Inheritance Chain](ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW15)).\n\nIn the following script, the target of the `get` command is the object specifier `name of first window`. Because the enclosing `tell` statement specifies the Finder application, the full specifier is `name of first window of application \"Finder\"`, and it is the Finder application which obtains and returns the requested information.\n\n```\ntell application \"Finder\"\n    get name of first window\nend tell\n```\n\nWhen a command targets an application, the result may be an application object. If so, subsequent statements that target the result object are sent to the application.\n\nA script may also implicitly specify a target by using an application command imported using a `Note` statement. For example, the `extract address` command in the following script targets the Mail application because the command was imported from Mail:\n\n```\nuse application \"Mail\"\nextract address from \"John Doe &lt;jdoe@example.com&gt;\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW13\"></a>\n\n### Direct Parameter\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_320\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_321\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_322\"></a>The *direct parameter* is a value, usually an object specifier, that appears immediately next to a command and specifies the target of the command. Not all commands have a direct parameter. If a command can have a direct parameter, it is noted in the command’s definition.\n\nIn the following statement, the object specifier `last file of window 1 of application \"Finder\"` is the direct parameter of the `duplicate` command:\n\n```\nduplicate last file of window 1 of application \"Finder\"\n```\n\nThe direct parameter usually appears immediately after the command, but may also appear immediately before it. This can be easier to read for some commands, such as `exists` in this example:\n\n```\nif file \"semaphore\" of application \"Finder\" exists then\n   -- continue processing...\nend if\n```\n\nA `tell` statement specifies a default target for all commands contained within it, so the direct parameter is optional. The following example has the same result as the previous example:<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_323\"></a>\n\n```\ntell last file of window 1 of application \"Finder\"\n    duplicate\nend tell\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-BAJHBFBA\"></a>\n\n### Parameters That Specify Locations\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_324\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_325\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_326\"></a>Many commands have parameters that specify locations. A location can be either an insertion point or another object. An *insertion point* is a location where an object can be added.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_327\"></a>\n\nIn the following example, the `to` parameter specifies the location to which to move the first paragraph. The value of the `to` parameter of the `duplicate` command is the relative object specifier `before paragraph 4`, which is an insertion point. AppleScript completes the specifier with the target of the `tell` statement, `front document of application \"TextEdit\"`.\n\n```\ntell front document of application \"TextEdit\"\n    duplicate paragraph 1 to before paragraph 4\nend tell\n```\n\nThe phrases `paragraph 1` and `before paragraph 4` are called index and relative references, respectively. For more information, see [Reference Forms](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-120522).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW10\"></a>\n\n## AppleScript Error Handling\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_328\"></a>During script execution, errors may occur due to interaction with macOS, problems encountered in an application script command, or problems caused by statements in the script itself. When an error occurs, AppleScript stops execution at the current location, signals an error, and looks up the calling chain for script statements that can handle the error. That is, it looks for the nearest error-handling code block that surrounds the location where the error occurred.\n\nScripts can handle errors by enclosing statements that may encounter an error within a `try` statement. The `try` statement includes an `on error` section that is invoked if an error occurs. AppleScript passes information about the error, including an error number and an error message, to the `on error` section. This allows scripts to examine the error number and to display information about it.\n\nIf the error occurs within a handler that does not provide a `try` statement, AppleScript looks for an enclosing `try` statement where the handler was invoked. If none of the calls in the call chain is contained in a `try` statement, AppleScript stops execution of the script and displays an error message (for any error number other than -128, described below).\n\nA script can use an `error` statement to signal an error directly. Doing so invokes the AppleScript error handling mechanism, which looks for an enclosing `try` statement to handle the error.\n\nSome “errors” are the result of the normal operation of a command. For example, commands such as `display dialog` and `choose file` signal <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_329\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_330\"></a>`error –128` (User canceled), if the user clicks the Cancel button. Scripts routinely handle the user canceled error to ensure normal operation. For an example of how to do this, see the Examples section for the `display dialog` command. If no `try` statement in a script handles the -128 error, AppleScript halts execution of the script without displaying any error message.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_331\"></a>\n\nFor related information, see [Results](ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW19), [error Statements](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-129657), [try Statements](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973), [Error Numbers and Error Messages](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-SW5), and [Working with Errors](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-BAJBDEJI\"></a>\n\n## Global Constants in AppleScript\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_332\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_333\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_334\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_335\"></a>AppleScript defines a number of global constants that you can use anywhere in a script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW38\"></a>\n\n### AppleScript Constant\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_336\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_337\"></a>The global constant `AppleScript` provides access to properties you can use throughout your scripts.\n\nYou can use the `AppleScript` identifier itself to distinguish an AppleScript property from a property of the current target with the same name, as shown in the section [version](#//apple_ref/doc/uid/TP40000983-CH218-SW6).\n\nThe following sections describe additional properties of `AppleScript`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW29\"></a>\n\n#### pi\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_338\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_339\"></a>This `mathematical` value represents the ratio of a circle's circumference to its diameter. It is defined as a real number with the value 3.14159265359.\n\nFor example, the following statement computes the area of a circle with radius 7:\n\n```\nset circleArea to pi * 7 * 7 --result: 153.9380400259\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW40\"></a>\n\n#### result\n\nWhen a statement is executed, AppleScript stores the resulting value, if any, in the predefined property <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_340\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_341\"></a>`result`. The value remains there until another statement is executed that generates a value. Until a statement that yields a result is executed, the value of `result` is undefined. You can examine the result in Script Editor by looking in the Result pane of the script window.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_342\"></a>\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW43\"></a>\n>\n> **Note:** When an error occurs during script execution, AppleScript signals an error. It doesn’t return error information in the `result` property. For more information, see [AppleScript Error Handling](#//apple_ref/doc/uid/TP40000983-CH218-SW10).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW30\"></a>\n\n#### Text Constants\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_343\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_344\"></a>AppleScript defines the text properties `space`, `tab`, `return`, `linefeed`, and `quote`. You effectively use these properties as text constants to represent white space or a double quote (`\"`) character. They are described in the Special String Characters section of the `text` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW22\"></a>\n\n#### text item delimiters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_345\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_346\"></a>AppleScript provides the `text item delimiters` property for use in processing text. This property consists of a list of strings used as delimiters by AppleScript when it coerces a list to text or gets text items from text strings. When getting `text items` of text, all of the strings are used as separators. When coercing a list to text, the first item is used as a separator.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW45\"></a>\n>\n> **Note:** Prior to OS X Snow Leopard v10.6, AppleScript only used the first delimiter in the list when getting `text items`.\n\nBecause `text item delimiters` respect `considering` and `ignoring` attributes in AppleScript 2.0, delimiters are case-insensitive by default. Formerly, they were always case-sensitive. To enforce the previous behavior, add an explicit `considering case` statement.\n\nYou can get and set the current value of the `text item delimiters` property. Normally, AppleScript doesn’t use any delimiters. For example, if the text delimiters have not been explicitly changed, the statement\n\n```\n{\"bread\", \"milk\", \"butter\", 10.45}  as string\n```\n\nreturns the following:\n\n```\n\"breadmilkbutter10.45\"\n```\n\nFor printing or display purposes, it is usually preferable to set `text item delimiters` to something that’s easier to read. For example, the script\n\n```\nset AppleScript's text item delimiters to {\", \"}\n{\"bread\", \"milk\", \"butter\", 10.45}  as string\n```\n\nreturns this result:\n\n```\n\"bread, milk, butter, 10.45\"\n```\n\nThe `text item delimiters` property can be used to extract individual names from a pathname. For example, the script\n\n```\nset AppleScript's text item delimiters to {\":\"}\nget last text item of \"Hard Disk:CD Contents:Release Notes\"\n```\n\nreturns the result `\"Release Notes\"`.\n\nIf you change the `text item delimiters` property in Script Editor, it remains changed until you restore its previous value or until you quit Script Editor and launch it again. If you change `text item delimiters` in a script application, it remains changed in that application until you restore its previous value or until the script application quits; however, the delimiters are not changed in Script Editor or in other script applications you run.\n\nScripts commonly use an error handler to reset the `text item delimiters` property to its former value if an error occurs (for more on dealing with errors, see [AppleScript Error Handling](#//apple_ref/doc/uid/TP40000983-CH218-SW10)):\n\n```\nset savedDelimiters to AppleScript's text item delimiters\ntry\n    set AppleScript's text item delimiters to {\"**\"}\n    --other script statements...\n    --now reset the text item delimiters:\n    set AppleScript's text item delimiters to savedDelimiters\non error m number n\n    --also reset text item delimiters in case of an error:\n    set AppleScript's text item delimiters to savedDelimiters\n    --and resignal the error:\n    error m number n\nend try\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW6\"></a>\n\n#### version\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_347\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_348\"></a>This property provides the current version of AppleScript. The following script shows how to check for a version greater than or equal to version 1.9. The `if` statement is wrapped in a `considering numeric strings` statement so that an AppleScript version such as `1.10.6` compares as larger than, say, version `1.9`.\n\n```\nconsidering numeric strings\n    if version of AppleScript as string ≥ \"1.9\" then\n        -- Perform operations that depend on version 1.9 or greater\n    else\n        -- Handle case where version is not high enough\n    end if\nend considering\n```\n\nApplications can have their own `version` property, so to access the AppleScript version explicitly, you use the phrase `version of AppleScript`. This will work inside a `tell` block that targets another application, such as the following:\n\n```\ntell application \"Finder\"\n    version --result: \"10.5.1\"\n    version of AppleScript --result: \"2.0\"\nend tell\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW41\"></a>\n\n### current application Constant\n\nThe <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_349\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_350\"></a>`current application` constant refers to the application that is executing the current AppleScript script (for example, Script Editor). Because the current application is the parent of AppleScript <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_351\"></a>(see [The AppleScript Inheritance Chain](ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW15)), it gets a chance to handle commands that aren’t handled by the current script or by AppleScript.\n\nThe `current application` constant is an object specifier—if you ask AppleScript for its value, the result is the object specifier:\n\n```\nget current application --result: current application\n```\n\nHowever, if you ask for `name of current application`, AppleScript resolves the object specifier and returns the current application’s name:\n\n```\nname of current application --result: \"Script Editor\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW44\"></a>\n\n### missing value Constant\n\nThe <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_352\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_353\"></a>`missing value` constant is a placeholder for missing or uninitialized information.\n\nFor example, the following statements use the `missing value` constant to determine if a variable has changed:\n\n```\nset myVariable to missing value\n    -- perform operations that might change the value of myVariable\nif myVariable is equal to missing value then\n    -- the value of the variable never changed\nelse\n    -- the value of the variable did change\nend if\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW42\"></a>\n\n### true, false Constants\n\nAppleScript defines the <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_354\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_355\"></a>Boolean constants <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_356\"></a>`true` and <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_357\"></a>`false`. These constants are described with the `boolean` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW4\"></a>\n\n## The it and me Keywords\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_358\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_359\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_360\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_361\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_362\"></a>AppleScript defines the keyword `me` to refer to the current script and the keyword `it` to refer to the current target. (The <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_363\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_364\"></a>*current script* is the one that is currently being executed; the <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_365\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_366\"></a>*current target* is the object that is the current default target for commands.) It also defines `my` as a synonym for `of me` and `its`<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_367\"></a> as a synonym for `of it`.\n\nIf a script hasn’t targeted anything, `it` and `me` refer to the same thing—the script—as shown in the following example:\n\n```\n-- At the top-level of the script:\nme --result: «script» (the top-level script object)\nit --result: «script» (same as it, since no target set yet)\n```\n\nA `tell` statement specifies a default target. In the following example, the default target is the Finder application:\n\n```\n-- Within a tell block:\ntell application \"Finder\" -- sets target\n    me --result: «script» (still the top-level script object)\n    it --result: application \"Finder\" (target of the tell statement)\nend tell\n```\n\nYou can use the words `of me` or `my` to indicate that the target of a command is the current script and not the target of the `tell` statement. In the following example, the word `my` indicates that `minimumValue()` handler is defined by the script, not by Finder:\n\n```\ntell application \"Finder\"\n    set fileCount to count files in front window\n    set myCount to my minimumValue(fileCount, 100)\n    --do something with up to the first 100 files…\nend tell\n```\n\nYou can also use `of me` or `my` to distinguish script properties from object properties. Suppose there is a TextEdit document open named “Simple.rtf”:\n\n```\ntell document 1 of application \"TextEdit\"\n    name --result: \"Simple.rtf\" (implicitly uses target of tell)\n    name of it --result: \"Simple.rtf\" (specifies target of tell)\n    me --result: «script» (top-level script object, not target of tell)\nend tell\n```\n\nThe following example shows how to specify different `version` properties in a Finder `tell` statement. The Finder is the default target, but using `version of me`, `my version`, or `version of AppleScript` allows you to specify the version of the top-level `script` object. (The top-level `script` object returns the AppleScript version, because it inherits from AppleScript, as described in [The AppleScript Inheritance Chain](ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW15).)\n\n```\ntell application \"Finder\"\n    version --result: \"10.5.1\" (Finder version is the default in tell block)\n    its version --result: \"10.5.1\" (specifically asks for Finder version)\n    version of me --result: \"2.0\" (AppleScript version)\n    my version --result: \"2.0\" (AppleScript version)\n    version of AppleScript --result: \"2.0\" (AppleScript version)\nend tell\n```\n\nFor information on using `it` in a filter reference, see the Discussion section for the [Filter](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BAJJHEFE) reference form.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW28\"></a>\n\n## Aliases and Files\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_368\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_369\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_370\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_371\"></a>To refer to items and locations in the macOS file system, you use `alias` objects and `file` objects.\n\nAn `alias` object is a dynamic reference to an existing file system object. Because it is dynamic, it can maintain the link to its designated file system object even if that object is moved or renamed.\n\nA `file` object represents a specific file at a specific location in the file system. It can refer to an item that does not currently exist, such as the name and location for a file that is to be created. A `file` object is not dynamic, and always refers to the same location, even if a different item is moved into that place. The `POSIX file` pseudo-class is roughly synonymous with file: `POSIX file` specifiers evaluate to a `file` object, but they use different semantics for the name, as described in [Specifying Paths](#//apple_ref/doc/uid/TP40000983-CH218-SW11).\n\nThe following is the recommended usage for these types:\n\n* Use an `alias` object to refer to existing file system objects.\n* Use a `file` object to refer to a file that does not yet exist.\n* Use a `POSIX file` specifier if you want to specify the file using a POSIX path.\n\nThe following sections describe how to specify file system objects by path and how to work with them in your scripts.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW11\"></a>\n\n### Specifying Paths\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_372\"></a>You can create `alias` objects and `file` objects by supplying a name specifier, where the name is the path to an item in the file system.\n\nFor alias and file specifiers, the path is an HFS path, which takes the form `\"disk:item:subitem:subsubitem:...:item\"`. For example, `\"Hard_Disk:Applications:Mail.app\"` is the HFS path to the Mail application, assuming your boot drive is named `\"Hard_Disk\"`.\n\nHFS paths with a leading colon, such as `\":folder:file\"`, are resolved relative to the HFS working directory. However, their use is discouraged, because the location of the HFS working directory is unspecified, and there is no way to control it from AppleScript.\n\nFor POSIX file specifiers, the path is a POSIX path, which takes the form `\"/item/subitem/subsubitem/.../item\"`. The disk name is not required for the boot disk. For example, `\"/Applications/Mail.app\"` is the POSIX path to the Mail application. You can see the POSIX path of an item in Finder in the \"Where\" field of its Get Info window. Despite the name, POSIX file specifiers may refer to folders or disks. Use of `\"~\"` to specify a home directory is not supported.\n\nPOSIX paths without a leading slash, such as `\"folder/file\"`, are resolved relative to the POSIX working directory. This is supported, but only is useful for scripts run from the shell—the working directory is the current directory in the shell. The location of the POSIX working directory for applications is unspecified.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW33\"></a>\n\n### Working With Aliases\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_373\"></a>AppleScript defines the `alias` class to represent aliases. An alias can be stored in a variable and used throughout a script.\n\nThe following script first creates an alias to an existing file in the variable `notesAlias`, then uses the variable in a `tell` statement that opens the file. It uses a `try` statement to check for existence of the alias before creating it, so that the alias is only created once, even if the script is run repeatedly.\n\n```\ntry\n    notesAlias -- see if we've created the alias yet\non error\n    -- if not, create it in the error branch\n    set notesAlias to alias \"Hard_Disk:Users:myUser:Feb_Notes.rtf\"\nend try\n-- now open the file from the alias:\ntell application \"TextEdit\" to open notesAlias\n```\n\nFinding the object an alias refers to is called *resolving* an alias. AppleScript 2.0 attempts to resolve aliases only when you run a script. However, in earlier versions, AppleScript attempts to resolve aliases at compile time.\n\nOnce you run the previous example, creating the alias, the script will be able to find the original file when you run it again, even if the file’s name or location changes. (However, if you run the script again after recompiling it, it will create a new alias.)\n\nYou can get the HFS path from an alias by coercing it to text:\n\n```\nnotesAlias as text --result: \"Hard_Disk:Users:myUser:Feb_Notes.rtf\"\n```\n\nYou can use the `POSIX path` property to obtain a POSIX-style path to the item referred to by an alias:\n\n```\nPOSIX path of notesAlias --result: \"/Feb_Notes.rtf\"\n```\n\nIf an alias doesn’t refer to an existing file system object then it is broken. You can’t create an alias to an object that doesn’t exist, such as a file you plan to create. For that you use a `file` object, described in the next section.\n\nFor a sample script that shows how a script application can process a list of aliases it receives when a user drops one or more file icons on it, see [open Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW16).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW31\"></a>\n\n### Working With Files\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_374\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_375\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_376\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_377\"></a>AppleScript uses `file` objects to represent files in scripts. A `file` object can be stored in a variable and used throughout a script. The following script first creates a `file` object for an existing file in the variable `notesFile`, then uses the variable in a `tell` statement that opens the file:\n\n```\nset notesFile to POSIX file \"/Users/myUser/Feb_Meeting_Notes.rtf\"\ntell application \"TextEdit\" to open notesFile\n```\n\nYou can use a `file` object to specify a name and location for a file that may not exist:\n\n```\nset newFile to POSIX file \"/Users/myUser/BrandNewFile.rtf\"\n```\n\nSimilarly, you can let a user specify a new file with the `choose file name` command, then use the returned `file` object to create the file. In the following example, if the user cancels the `choose file name` dialog, the rest of the script is not executed. If the user does supply a file name, the script opens the file, creating it if necessary, then uses a `try` statement to make sure it closes the file when it is finished writing to it.\n\n```\nset theFile to choose file name\nset referenceNumber to open for access theFile with write permission\ntry\n    -- statements to write to the file\non error\n    close access referenceNumber\nend try\nclose access referenceNumber\n```\n\nTypically, when you pass a `file` object to a command that uses it to operate on a new or existing item in the file system, the components of the path must exist for the command to succeed.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_378\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_379\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_380\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW9\"></a>\n\n## Remote Applications\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_381\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_382\"></a>A script can target an application on a remote computer if remote applications are enabled on that computer, and if the script specifies the computer with an eppc-style specifier.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW34\"></a>\n\n### Enabling Remote Applications\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_383\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_384\"></a>For a script to send commands to a remote application, the following conditions must be satisfied:\n\n* The computer that contains the application and the computer on which the script is run must be connected to each other through a network.\n* Remote Apple Events (set in the Sharing preferences pane) must be enabled on the remote computer and user access must be provided (you can allow access for all users or for specified users only).\n* If the specified remote application is not running, you must run it.\n* You must authenticate as admin when you compile or run the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW37\"></a>\n\n### eppc-Style Specifiers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_385\"></a>An eppc-style specifier takes the following format:\n\n```\neppc://[user[:password]@]IP_address\n```\n\n`ip_address`\n:   <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_386\"></a>Either a numeric IP address in dotted decimal form (four numbers, from 0 to 255, separated by periods; for example, `123.23.23.123`) or a hostname. A hostname can be a Bonjour name.\n\nThe following are examples of valid eppc-style specifiers. If you supply the user name and password, no authentication is required. If you do not supply it, authentication may be required.\n\n```\n\"eppc://myCoolMac.local\" -- hostname, no user or pwd\n\"eppc://myUserName:pwd@myCoolMac.local\" -- user, pwd, and hostname\n\"eppc://123.23.23.123\" -- IP address, no user or pwd\n\"eppc://myUserName:pwd@123.23.23.123\" -- user, pwd, and IP address\n\"eppc://myUserName@server.company.com\" -- server address, user\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_9\"></a>\n>\n> **Important:** If a part of the eppc-style specifier contains non-UTF-8 characters or white space, it must be URL-encoded: for example, here is a user name that contains a space:\n>\n> `John%20Smith`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW35\"></a>\n\n### Targeting Remote Applications\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_387\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_388\"></a>You can target an application that is running on a remote machine and you can launch applications on remote machines that are not currently running.\n\nThe following example uses an eppc-style specifier to target the Finder on a remote computer. It includes a user name and password, so no authentication is required.\n\n```\nset remoteMachine to \"eppc://userName:pwd@MacName.local\"\ntell app \"Finder\" of machine remoteMachine to close front window\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_10\"></a>\n>\n> **Important:** If you compile an erroneous eppc-style address, you will have to quit and relaunch Script Editor for changes to that address to take effect.\n\nIn some cases, you’ll need to use a `using terms from` statement to tell AppleScript to compile against the local version of an application. The following example uses that technique in telling the remote Finder application to open the TextEdit application:\n\n```\nset remoteFinder to application \"Finder\" of machine ¬\n    \"eppc://myUserName:pwd@123.23.23.123\"\n \nusing terms from application \"Finder\"\n    tell remoteFinder\n        open application file id \"com.apple.TextEdit\"\n    end tell\nend using terms from\n```\n\nIf you omit the password (`pwd`) in the previous script, you will have to authenticate when you run the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW20\"></a>\n\n## Debugging AppleScript Scripts\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_389\"></a>AppleScript does not include a built-in debugger, but it does provide several simple mechanisms to help you debug your scripts or just observe how they are working.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW16\"></a>\n\n### Feedback From Your Script\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_390\"></a>You can insert various statements into a script to indicate the current location and other information. In the simplest case, you can insert a beep command in a location of interest:\n\n```\nbeep 3 -- three beeps; a very important part of the script!\n```\n\nA `display dialog` command can display information about what’s happening in a script and, like a breakpoint, it halts execution until you dismiss it (or until it times out, depending on the parameters you pass). The following example displays the current script location and the value of a variable:\n\n```\ndisplay dialog \"In factorial routine; x = \" & (x as string)\n```\n\nThe `say` command can get your attention by speaking the specified text. In the following example, `currentClient` is a `text` object that stores a client name:\n\n```\nsay \"I'm in the clientName handler. The client is \" & currentClient\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW17\"></a>\n\n### Logging\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_391\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_392\"></a>Script Editor can display a log of the Apple events that are sent during execution of a script. In the Script Editor Preferences, you can also choose to keep a history of recent results or event logs.\n\nIn addition, you can insert `log` statements into a script. Log output is shown in the Event Log pane of a script window, and also in the <a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_393\"></a>Event Log History window, if it is open.\n\nThe following simple example logs the current word in a `repeat with loopVariable (in list)` statement:\n\n```\nset wordList to words in \"Where is the hammer?\"\nrepeat with currentWord in wordList\n    log currentWord\n    if contents of currentWord is equal to \"hammer\" then\n        display dialog \"I found the hammer!\"\n    end if\nend repeat\n```\n\nThe following shows how the words appear in the log when the script is run:\n\n```\n    (*Where*)\n    (*is*)\n    (*the*)\n    (*hammer*)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-SW32\"></a>\n\n### Third Party Debuggers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_394\"></a>If you need full-featured debugging capabilities, there are powerful, third-party AppleScript debuggers available.<a id=\"//apple_ref/doc/uid/TP40000983-CH218-DontLinkElementID_395\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html", "sha256": "7519ccc42d3643b80260140723a10ed4b04372986328c5faaad1427f2abec811", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_lexical_conventions.md", "title": "AppleScript Lexical Conventions", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW1\"></a>\n\n# AppleScript Lexical Conventions\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_396\"></a>This chapter provides an overview of the vocabulary and conventions of the AppleScript Language. It starts with the character set and introduces elements of increasing complexity.\n\nAfter reading this chapter, you should have an understanding of the basic language components used to construct AppleScript expressions and statements.\n\nAppleScript Lexical Conventions contains the following sections:\n\n* [Character Set](#//apple_ref/doc/uid/TP40000983-CH214-SW3)\n* [Identifiers](#//apple_ref/doc/uid/TP40000983-CH214-SW4)\n* [Keywords](#//apple_ref/doc/uid/TP40000983-CH214-SW7)\n* [Comments](#//apple_ref/doc/uid/TP40000983-CH214-SW8)\n* [The Continuation Character](#//apple_ref/doc/uid/TP40000983-CH214-SW9)\n* [Literals and Constants](#//apple_ref/doc/uid/TP40000983-CH214-SW10)\n* [Operators](#//apple_ref/doc/uid/TP40000983-CH214-SW18)\n* [Variables](#//apple_ref/doc/uid/TP40000983-CH214-SW23)\n* [Expressions](#//apple_ref/doc/uid/TP40000983-CH214-SW20)\n* [Statements](#//apple_ref/doc/uid/TP40000983-CH214-SW17)\n* [Commands](#//apple_ref/doc/uid/TP40000983-CH214-SW6)\n* [Results](#//apple_ref/doc/uid/TP40000983-CH214-SW19)\n* [Raw Codes](#//apple_ref/doc/uid/TP40000983-CH214-SW5)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW3\"></a>\n\n## Character Set\n\nStarting in OS X v10.5 (AppleScript 2.0), <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_397\"></a>the character set for AppleScript is Unicode. AppleScript preserves all characters correctly worldwide, and comments and text constants in scripts may contain any Unicode characters.\n\nAppleScript syntax uses several non-ASCII characters, which can be typed using special key combinations. For information on characters that AppleScript treats specially, see the sections [Identifiers](#//apple_ref/doc/uid/TP40000983-CH214-SW4), [Comments](#//apple_ref/doc/uid/TP40000983-CH214-SW8), [Text](#//apple_ref/doc/uid/TP40000983-CH214-SW26), [The Continuation Character](#//apple_ref/doc/uid/TP40000983-CH214-SW9), and [Raw Codes](#//apple_ref/doc/uid/TP40000983-CH214-SW5) in this chapter, as well as [Table 9-1](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) in [Operators Reference](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW4\"></a>\n\n## Identifiers\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_398\"></a>An AppleScript *identifier* is a series of characters that identifies a class name, variable, or other language element, such as labels for properties and handlers.\n\nAn identifier must begin with a letter and can contain any of these characters:\n\n```\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\n```\n\nIdentifiers are not case sensitive. For example, the identifiers `myvariable` and `MyVariable` are equivalent.\n\nAppleScript remembers and enforces the first capitalization it comes across for an identifier. So if it first encounters an identifier as `myAccount`, it will later, during compilation, change versions such as `MyAccount` and `myaccount` to `myAccount`.\n\nThe following are examples of valid identifiers: `areaOfCircle`, `Agent007`, `axis_of_rotation`.\n\nThe following are not valid identifiers: `C-`, `back&forth`, `999`, `Why^Not`.\n\nAppleScript provides a loophole to the preceding rules: identifiers whose first and last characters are vertical bars (|) can contain any characters. The leading and trailing vertical bars are not considered part of the identifier.<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_399\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_400\"></a>\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_11\"></a>\n>\n> **Important:** This use of vertical bars can make scripts difficult to read, and is not recommended.\n\nThe following are legal identifiers: `|back&forth|`, `|Right*Now!|`.<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_401\"></a>\n\nAn identifier can contain additional vertical bars preceded by a backslash (\\\\) character, as in the identifier `|This\\\\|Or\\\\|That|`. Use of the backslash character is described further in the Special String Characters section of the `text` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW7\"></a>\n\n## Keywords\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_402\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_403\"></a>A *keyword* is a reserved word in the AppleScript language. Keywords consist of lower-case, alphabetic characters: `abcdefghijklmnopqrstuvwxyz`. In a few cases, such as `aside from`, they come in pairs.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_12\"></a>\n>\n> **Important:** You should not attempt to reuse keywords in your scripts for variable names or other purposes. Developers should not re-define keywords in the terminology for their scriptable applications.\n\nTable 1-1 lists the keywords reserved in AppleScript 2.0 (which are the same as those used in AppleScript 1.x). For additional information, see [Table A-1](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-SW1), which provides a brief description for each keyword and points to related information, where available.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW2\"></a>\n\n**Table 1-1**  AppleScript reserved words, listed alphabetically\n\n| `about` | `above` | `after` | `against` | `and` | `apart from` |\n| `around` | `as` | `aside from` | `at` | `back` | `before` |\n| `beginning` | `behind` | `below` | `beneath` | `beside` | `between` |\n| `but` | `by` | `considering` | `contain` | `contains` | `contains` |\n| `continue` | `copy` | `div` | `does` | `eighth` | `else` |\n| `end` | `equal` | `equals` | `error` | `every` | `exit` |\n| `false` | `fifth` | `first` | `for` | `fourth` | `from` |\n| `front` | `get` | `given` | `global` | `if` | `ignoring` |\n| `in` | `instead of` | `into` | `is` | `it` | `its` |\n| `last` | `local` | `me` | `middle` | `mod` | `my` |\n| `ninth` | `not` | `of` | `on` | `onto` | `or` |\n| `out of` | `over` | `prop` | `property` | `put` | `ref` |\n| `reference` | `repeat` | `return` | `returning` | `script` | `second` |\n| `set` | `seventh` | `since` | `sixth` | `some` | `tell` |\n| `tenth` | `that` | `the` | `then` | `third` | `through` |\n| `thru` | `timeout` | `times` | `to` | `transaction` | `true` |\n| `try` | `until` | `where` | `while` | `whose` | `with` |\n| `without` |  |  |  |  |  |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW8\"></a>\n\n## Comments\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_404\"></a>A *comment* is text that is ignored by AppleScript when a script is executed. You can use comments to describe what is happening in the script or make other kinds of notes. There are three kinds of comments:\n\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_405\"></a>A block comment begins with the characters `(*` and ends with the characters `*)`. Block comments must be placed between other statements. That means they can be placed on the same line at the beginning or end of a statement, but cannot be embedded within a simple (one-line) statement.\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_406\"></a>An end-of-line comment begins with the characters `--` (two hyphens) and ends with the end of the line:\n\n  ```\n  --end-of-line comments extend to the end of the line\n  ```\n* Starting in version 2.0, AppleScript also supports use of the # symbol as an end-of-line comment. This allows you to make a plain AppleScript script into a <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_407\"></a>Unix executable by beginning it with the following line and giving it execute permission:\n\n  ```\n  #!/usr/bin/osascript\n  ```\n\n  Compiled scripts that use `#` will run normally on pre-2.0 systems, and if edited will display using `--`. Executable text scripts using `#!/usr/bin/osascript` will not run on pre-2.0 systems, since the `#` will be considered a syntax error.\n\nYou can nest comments—that is, comments can contain other comments, as in this example:\n\n```\n(*  Here are some\n    --nested comments\n    (* another comment within a comment *)\n*)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW9\"></a>\n\n## The Continuation Character\n\nA simple AppleScript statement must normally be entered on a single line. You can extend a statement to the next line by ending it with the *<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_408\"></a>continuation character*, ¬. With a U.S. keyboard, you can enter this character by typing Option-l (lower-case L). In Script Editor, you can type Option-Return, which inserts the continuation character and moves the insertion point to the next line.\n\nHere is a single statement displayed on two lines:\n\n```\ndisplay dialog \"This is just a test.\" buttons {\"Great\", \"OK\"} ¬\ndefault button \"OK\" giving up after 3\n```\n\nA continuation character within a quoted text string is treated like any other character.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW10\"></a>\n\n## Literals and Constants\n\nA <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_409\"></a>*literal* is a value that evaluates to itself—that is, it is interpreted just as it is written. In AppleScript, for example, `\"Hello\"` is a text literal. A <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_410\"></a>*constant* is a word with a predefined value. For example, AppleScript defines a number of enumerated constants for use with the `path to (folder)` command, each of which specifies a location for which to obtain the path.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW14\"></a>\n\n### Boolean\n\nAppleScript defines the <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_411\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_412\"></a>Boolean values `true` and `false` and supplies the `boolean` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW13\"></a>\n\n### Constant\n\n[Global Constants in AppleScript](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-BAJBDEJI) describes constants that can be used throughout your scripts. For related information, see the `constant` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW15\"></a>\n\n### List\n\nA list defines an ordered collection of values, known as items, of any class. As depicted in a script, a list consists of a series of expressions contained within braces and separated by commas, such as the following:\n\n```\n{1, 7, \"Beethoven\", 4.5}\n```\n\nA list can contain other lists. An empty list (containing no items) is represented by a pair of empty braces: `{}`.\n\nAppleScript provides the `list` class for working with lists.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW12\"></a>\n\n### Number\n\nA <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_413\"></a>numeric literal is a sequence of digits, possibly including other characters, such as a unary minus sign, period (in reals), or `\"E+\"` (in exponential notation). The following are some numeric literals:\n\n```\n-94596\n3.1415\n9.9999999999E+10\n```\n\nAppleScript defines classes for working with `real` and `integer` values, as well as the `number` class, which serves as a synonym for either `real` or `integer`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW16\"></a>\n\n### Record\n\nA record is an unordered collection of labeled properties. A record appears in a script as a series of property definitions contained within braces and separated by commas. Each property definition consists of a unique label, a colon, and a value for the property. For example, the following is a record with two properties:\n\n```\n{product:\"pen\", price:2.34}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW26\"></a>\n\n### Text\n\nA <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_414\"></a>`text` literal consists of a series of Unicode characters enclosed in a pair of double quote marks, as in the following example:\n\n```\n\"A basic string.\"\n```\n\nAppleScript `text` objects are instances of the `text` class, which provides mechanisms for working with text. The Special String Characters section of that class describes how to use white space, backslash characters, and double quotes in text.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW18\"></a>\n\n## Operators\n\nAn *operator* is a symbol, word, or phrase that derives a value from another value or pair of values. For example, the multiplication operator (`*`) multiplies two numeric operands, while the concatenation operator (`&`) joins two objects (such as text strings). The `is equal` operator performs a test on two Boolean values.\n\nFor detailed information on AppleScript’s operators, see [Operators Reference](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW23\"></a>\n\n## Variables\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_415\"></a>A *variable* is a named container in which to store a value. Its name, which you specify when you create the variable, follows the rules described in [Identifiers](#//apple_ref/doc/uid/TP40000983-CH214-SW4). You can declare and initialize a variable at the same time with a `copy` or `set` command. For example:\n\n```\nset myName to \"John\"\ncopy 33 to myAge\n```\n\nStatements that assign values to variables are known as <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_416\"></a>*assignment statements*.\n\nWhen AppleScript encounters a variable, it evaluates the variable by getting its value. A variable is contained in a script and its value is normally lost when you close the script that contains it.\n\nAppleScript variables can hold values of any class. For example, you can assign the integer value `17` to a variable, then later assign the Boolean value `true` to the same variable.<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_417\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_418\"></a>\n\nFor more information, see [Variables and Properties](ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW10).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW20\"></a>\n\n## Expressions\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_419\"></a>An *expression* is any series of lexical elements that has a value. Expressions are used in scripts to represent or derive values. The simplest kinds of expressions, called literal expressions, are representations of values in scripts. More complex expressions typically combine literals, variables, operators, and object specifiers.\n\nWhen you run a script, AppleScript converts its expressions into values. This process is known as *evaluation*. For example, when the following simple expression is evaluated, the result is 21:<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_420\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_421\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_422\"></a>\n\n```\n3 * 7 --result: 21\n```\n\nAn object specifier<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_423\"></a> specifies some or all of the information needed to find another object. For example, the following object specifier specifies a named document:\n\n```\ndocument named \"FavoritesList\"\n```\n\nFor more information, see [Object Specifiers](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW17\"></a>\n\n## Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_424\"></a>A *statement* is a series of lexical elements that follows a particular AppleScript syntax. Statements can include keywords, variables, operators, constants, expressions, and so on.\n\nEvery script consists of statements. When AppleScript executes a script, it reads the statements in order and carries out their instructions.\n\nA *control statement* is a statement that determines when and how other statements are executed. AppleScript defines standard control statements such as `if`, `repeat`, and `while` statements, which are described in detail in [Control Statements Reference](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-157332).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_425\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_426\"></a> A *simple statement* is one that can be written on a single line:\n\n```\nset averageTemp to 63 as degrees Fahrenheit\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW11\"></a>\n>\n> **Note:** You can use a continuation character (¬) to extend a simple statement onto a second line.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_427\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_428\"></a> A *compound statement* is written on more than one line, can contain other statements, and has the word `end` (followed, optionally, by the first word of the statement) in its last line. For example the following is a compound `tell` statement:\n\n```\ntell application \"Finder\"\n    set savedName to name of front window\n    close window savedName\nend tell\n```\n\nA compound statement can contain other compound statements.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW6\"></a>\n\n## Commands\n\nA *command* is a word or series of words used in an AppleScript statement to request an action. Every command is directed at a *target*, which is the object that responds to the command. The target is usually an application object or an object in macOS, but it can also be a `script` object or a value in the current script.\n\nThe following statement uses AppleScript’s `get` command to obtain the name of a window; the target is the front window of the Finder application:\n\n```\nget name of front window of application \"Finder\"\n```\n\nFor more information on command types, parameters, and targets, see [Commands Overview](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW8).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW19\"></a>\n\n## Results\n\nThe <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_429\"></a>*result* of a statement is the value generated, if any, when the statement is executed. For example, executing the statement `3 + 4` results in the value `7`. The result of the statement `set myText to \"keyboard\"` is the text object `\"keyboard\"`. A result can be of any class. AppleScript stores the result in the globally available property <a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_430\"></a>`result`, described in [AppleScript Constant](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW38).<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_431\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH214-SW5\"></a>\n\n## Raw Codes\n\nWhen you open, compile, edit, or run scripts with a script editor, you may occasionally see terms enclosed in double angle brackets, or chevrons<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_432\"></a> («»), in a script window or in another window. These terms are called *raw format* or *raw codes*, because they represent the underlying Apple event codes<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_433\"></a> that AppleScript uses to represent scripting terms.\n\nFor compatibility with Asian national encodings, “《” and “》” are allowed as synonyms for “«” and “»” ( (Option- \\\\ and Option-Shift- \\\\, respectively, on a U.S. keyboard), since the latter do not exist in some Asian encodings.\n\nFor more information on raw codes, see [Double Angle Brackets](ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-SW1).<a id=\"//apple_ref/doc/uid/TP40000983-CH214-DontLinkElementID_434\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_lexical_conventions.html", "sha256": "f298a0a6ab4cad2e5d8e9ca9e62e7504760841ea71e5b918356084f2afd88c88", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_raw_data.md", "title": "Double Angle Brackets", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH225-SW1\"></a>\n\n# Double Angle Brackets\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_435\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_436\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_437\"></a>When you type English language script statements in a Script Editor script window, AppleScript is able to compile the script because the English terms are described either in the terminology built into the AppleScript language or in the dictionary of an available scriptable application or scripting addition. When AppleScript compiles your script, it converts it into an internal executable format, then reformats the text to conform to settings in Script Editor’s Formatting preferences.\n\nWhen you open, compile, edit, or run scripts with Script Editor, you may occasionally see terms enclosed in double angle brackets, or chevrons<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_438\"></a> («»). For example, you might see the term `«event sysodlog»` as part of a script—this is the event code representation for a `display dialog` command. The event code representation is also known as <a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_439\"></a>*raw format*.\n\nFor compatibility with Asian national encodings, “《” and “》” are allowed as synonyms for “«” and “»” ( (Option- \\\\ and Option-Shift- \\\\, respectively, on a U.S. keyboard), since the latter do not exist in some Asian encodings.\n\nThe following sections provide more information about when chevrons appear in scripts.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-SW37\"></a>\n\n## When a Dictionary Is Not Available\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_440\"></a>\n\nAppleScript uses double angle brackets in a Script Editor script window when it can’t identify a term. That happens when it encounters a term that isn’t part of the AppleScript language and isn’t defined in an application or scripting addition dictionary that is available when the script is opened or compiled.\n\nFor example, if a script is compiled on one machine and later opened on another, the dictionary may not be available, or may be from an older version of the application or scripting addition that does not support the term.\n\nThis can also happen if the file `StandardAdditions.osax` is not present in `/System/ScriptingAdditions`. Then, scripting addition commands such as `display dialog` will not be present and will be replaced with chevron notation (`«event sysodlog»`) when you compile or run the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-SW2\"></a>\n\n## When AppleScript Displays Data in Raw Format\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_441\"></a>\n\nDouble angle brackets can also occur in results. For example, if the value of a variable is a `script` object named `Joe`, AppleScript represents the `script` object as shown in this script:\n\n```\nscript Joe\n    property theCount : 0\nend script\n \nset scriptObjectJoe to Joe\nscriptObjectJoe\n--result: «script Joe»\n```\n\nSimilarly, if Script Editor can’t display a variable’s data directly in its native format, it uses double angle brackets to enclose both the word `data` and a sequence of numerical values that represent the data. Although this may not visually resemble the original data, the data’s original format is preserved.\n\nThis may occur because an application command returns a value that does not belong to any of the normal AppleScript classes. You can store such data in variables and send them as parameters to other commands, but Script Editor cannot display the data in its native format.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-SW3\"></a>\n\n## Entering Script Information in Raw Format\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_442\"></a>You can enter double angle brackets, or chevrons («»), directly into a script by typing Option-Backslash and Shift-Option-Backslash. You might want to do this if you’re working on a script that needs to use terminology that isn’t available on your current machine—for example, if you’re working at home and don’t have the latest dictionary for a scriptable application you are developing, but you know the codes for a supported term.\n\nYou can also use AppleScript to display the underlying codes for a script, using the following steps:\n\n1. Create a script using standard terms compiled against an available application or scripting addition.\n2. Save the script as text and quit Script Editor.\n3. Remove the application or scripting addition from the computer.\n4. Open the script again and compile it.\n5. When AppleScript asks you to locate the application or scripting addition, cancel the dialog.\n\nScript Editor can compile the script, but displays chevron format for any terms that rely on a missing dictionary.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-SW4\"></a>\n\n## Sending Raw Apple Events From a Script\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_443\"></a>The term `«event sysodlog»` is actually the raw form for an Apple event with event class `'syso'` and event ID `'dlog'` (the `display dialog` command). For a list of many of the four-character codes and their related terminology used by Apple, see *[AppleScript Terminology and Apple Event Codes Reference](https://developer.apple.com/library/archive/../../../releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html#//apple_ref/doc/uid/TP40004532)*.\n\nYou can use raw syntax to enter and execute events (even complex events with numerous parameters) when there is no dictionary to support them. However, providing detailed documentation for how to do so is beyond the scope of this guide.<a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_444\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_445\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH225-DontLinkElementID_446\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_raw_data.html", "sha256": "18b0305dbe4f0a49b47c656676f4bc9129f09d9e552bcf8a80740b805bd76504", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_script_objects.md", "title": "Script Objects", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA\"></a>\n\n# Script Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_447\"></a>This chapter describes the `script` object, which is used to implement all AppleScript scripts. Before reading this chapter, you should be familiar with the information in [AppleScript and Objects](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_448\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_449\"></a>A *script object* is a user-defined object that can combine data (in the form of properties) and actions (in the form of handlers and additional `script` objects). Script objects support inheritance, allowing you to define a hierarchy of objects that share properties and handlers. You can also extend or modify the behavior of a handler in one `script` object when calling it from another `script` object.\n\nThe top-level `script` object is the one that implements the overall script you are working on. Any `script` object can contain nested `script` objects, each of which is defined just like a top-level `script` object, except that a nested `script` object is bracketed with statements that mark its beginning and end.\n\nThis chapter describes `script` objects in the following sections:\n\n* [Defining Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW2) shows the syntax for defining `script` objects and includes a simple example .\n* [Initializing Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW4) describes how AppleScript creates a `script` object with the properties and handlers you have defined.\n* [Sending Commands to Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW3) describes how you use `tell` statements to send commands to `script` objects.\n* [Script Libraries](#//apple_ref/doc/uid/TP40000983-CH207-SW6) describes script libraries and how to use them from other scripts.\n* [Inheritance in Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW5) describes inheritance works and how you can use it to share functionality in the `script` objects you define.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW2\"></a>\n\n## Defining Script Objects\n\nEach `script` object definition (except for the top-level `script` object) begins with the keyword `script`, followed by a variable name, and ends with the keyword `end` (or `end script`). The statements in between can be any combination of property definitions, handler definitions, nested `script` object definitions, and other AppleScript statements.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_450\"></a>The syntax of a `script` object definition is as follows:\n\n`script` *variableName*\n\n    [ ( `property` | `prop` ) `parent :` *parentSpecifier* ]\n\n    [ ( `property` | `prop` ) *propertyLabel* : *initialValue* ]...\n\n    [ *handlerDefinition* ]...\n\n    [ *statement* ]...\n\n`end` [ `script` ]\n\n*variableName*\n:   A variable identifier for the script. You can refer to a script object by this name elsewhere in a script.\n\n*parentSpecifier*\n:   Specifies the parent of the `script` object, typically another `script` object. For more information, see [Inheritance in Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW5).\n\n*propertyLabel*\n:   An identifier, unique within the `script` object, that specifies a characteristic of the object; equivalent to an instance variable.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_451\"></a>\n\n*initialValue*\n:   The value that is assigned to the property each time the `script` object is initialized. `script` objects are initialized when compiled. *initialValue* is required in property definitions.\n\n*handlerDefinition*\n:   A handler for a command the `script` object can respond to; equivalent to a method. For more information, see [About Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH) and [Handler Reference](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-163762).\n\n*statement*\n:   Any AppleScript statement. Statements other than handler and property definitions are treated as if they were part of an implicit handler definition for the `run` command; they are executed when a `script` object receives the `run` command.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_452\"></a>\n\nHere is a simple `script` object definition:\n\n```\nscript John\n    property HowManyTimes : 0\n \n    to sayHello to someone\n        set HowManyTimes to HowManyTimes + 1\n        return \"Hello \" & someone\n    end sayHello\n \nend script\n```\n\nIt defines a `script` object that can handle the `sayHello` command. It assigns the `script` object to the variable `John`. The definition includes a handler for the `sayHello` command. It also includes a property, called `HowManyTimes`, that indicates how many times the `sayHello` command has been called.\n\nA handler within a `script` object definition follows the same syntax rules as any other handler.\n\nYou can use a `tell` statement to send commands to a `script` object. For example, the following statement sends the `sayHello` command the `script` object defined above.\n\n```\ntell John to sayHello to \"Herb\" --result: \"Hello Herb\"\n```\n\nYou can manipulate the properties of `script` objects by using the `get` command to get the value of a property and the `set` or `copy` command to change the value. The value of a property is persistent—it gets reset every time you compile the script, but not when you run it.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW4\"></a>\n\n## Initializing Script Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_453\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_454\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_455\"></a>When you define a `script` object, it can contain properties, handlers, and nested `script` object definitions. When you execute the script containing it, AppleScript creates a `script` object with the defined properties, handlers, and nested `script` objects. The process of creating an instance of a `script` object from its definition is called initialization. A `script` object must be initialized before it can respond to commands.\n\nA top-level `script` object is initialized each time the script’s `run` handler is executed. Similarly, if you define a script within a handler, AppleScript initializes a `script` object each time the handler is called. The parameter variables in the handler definition become local variables of the `script` object.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_456\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_457\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_458\"></a>\n\nFor example, the `makePoint` handler in the following script contains a `script` object definition for the `script` object `thePoint`:\n\n```\non makePoint(x, y)\n    script thePoint\n        property xCoordinate:x\n        property yCoordinate:y\n    end script\n    return thePoint\nend makePoint\n \nset myPoint to makePoint(10,20)\nget xCoordinate of myPoint  --result: 10\nget yCoordinate of myPoint  --result: 20\n```\n\nAppleScript initializes the `script` object `thePoint` when it executes the `makePoint` command. After the call to `makePoint`, the variable `myPoint` refers to this `script` object. The parameter variables in the `makePoint` handler, in this case, `x` and `y`, become local variables of the `script` object. The initial value of `x` is 10, and the initial value of `y` is 20, because those are the parameters passed to the `makePoint` handler that initialized the `script` object.\n\nIf you added the following line to the end of the previous script and ran it, the variable `myOtherPoint` would refer to a second instance of the `script` object `thePoint`, with different property values:\n\n```\nset myOtherPoint to makePoint(30,50)\n```\n\nThe `makePoint` script is a kind of constructor function that creates `script` objects representing points.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_459\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_460\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_461\"></a> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_462\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW3\"></a>\n\n## Sending Commands to Script Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_463\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_464\"></a>You can use `tell` statements to send commands to `script` objects. For example, the following `tell` statement sends two `sayHello` commands to the `script` object `John` (defined below):\n\n```\ntell John\n    sayHello to \"Herb\"\n    sayHello to \"Grace\"\nend tell\n```\n\nFor a `script` object to respond to a command within a `tell` statement, either the `script` object or its parent object must have a handler for the command. For more information about parent objects, see [Inheritance in Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW5).\n\nA `script` object definition may include an implicit `run` handler, consisting of all executable statements that are outside of any handler or nested `script` object, or it may include an explicit `run` handler that begins with `on run`, but it may not contain both—such a script will not compile. If a script has no run handler (for example, a script that serves as a library of handlers, as described in [Parameter Specifications](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW12)), executing the script does nothing. However, sending it an explicit `run` command causes an error. For more information, see [run Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW15).\n\nThe `display dialog` command in the following `script` object definition is the only executable statement at the top level, so it constitutes the `script` object’s implicit `run` handler and is executed when the script sends a `run` command to `script` object `John`, with the statement `tell John to run`. <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_465\"></a>\n\n```\nscript John\n    property HowManyTimes : 0\n    to sayHello to someone\n        set HowManyTimes to HowManyTimes + 1\n        return \"Hello \" & someone\n    end sayHello\n    display dialog \"John received the run command\"\nend script\n \ntell John to run\n```\n\nYou can also use the possessive to send a command to a `script` object. For example, either of the following two forms send the `sayHello` command to script `John` (the first version compiles into the second):\n\n```\nJohn's sayHello to \"Jake\" --result: \"Hello Jake\"\nsayHello of John to \"Jake\" --result: \"Hello Jake\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW6\"></a>\n\n## Script Libraries\n\nA top-level `script` object saved in a Script Libraries folder becomes a *script library* usable by other scripts. Libraries let you share and reuse handlers, reorganize large scripts into a set of smaller libraries that are easier to manage, and build richer, higher-level functionality out of simpler libraries.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW12\"></a>\n>\n> **Note:** Libraries are supported in OS X Mavericks v10.9 (AppleScript 2.3) and later. To share properties and handlers between scripts in prior OS versions, use the `load script` command as described in [Libraries using Load Script](../reference/ASLR_load_script.md#//apple_ref/doc/uid/TP40000983-CH227-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW13\"></a>\n\n### Creating a Library\n\nThe basic requirement for a script to be a script library is its location: it must be a script document in a “Script Libraries” folder in one of the following folders. When searching for a library, the locations are searched in the order listed, and the first matching script is used:\n\n1. If the script that references the library is a bundle, the script’s bundle `Resources` directory. This means that scripts may be packaged and distributed with the libraries they use.\n2. If the application running the script is a bundle, the application’s bundle `Resources` directory. This means that script applications (“applets” and “droplets”) may be packaged and distributed with the libraries they use. It also enables applications that run scripts to provide libraries for use by those scripts.\n3. Any folders specified in the environment variable `OSA_LIBRARY_PATH`. This allows using a library without installing it in one of the usual locations. The value of this variable is a colon-separated list of paths, such as `/opt/local/Script Libraries:/usr/local/Script Libraries`. Unlike the other library locations, paths specified in `OSA_LIBRARY_PATH` are used exactly as-is, without appending “Script Libraries”. *Supported in OS X v10.11 and later.*\n4. The Library folder in the user’s home directory, `~/Library`. This is the location to install libraries for use by a single user, and is the recommended location during library development.\n5. The computer Library folder, `/Library`. Libraries located here are available to all users of the computer.\n6. The network Library folder, `/Network/Library`. Libraries located here are available to multiple computers on a network.\n7. The system Library folder, `/System/Library`. These are libraries provided by macOS.\n8. Any installed application bundle, in the application’s bundle `Library` directory. This allows distributing libraries that are associated with an application, or creating applications that exist solely to distribute libraries. *Supported in OS X v10.11 and later.*\n\nScript libraries also have `name`, `id`, and `version` properties. It is recommended that you define all three, especially for libraries you plan to distribute publicly: doing so allows clients to unambiguously identify particular versions of libraries that have the functionality they need. These properties may be defined either as `property` definitions within the script itself, or, for script bundles, in the Info.plist file, which can be edited using the Bundle Contents drawer in Script Editor. For details, see the `script` class reference.\n\nA script library may be a single-file (scpt) or bundle format (scptd). If a library is a bundle, it may define its own terminology.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW14\"></a>\n\n#### Defining Scripting Terminology\n\nLibraries may define scripting terminology, including commands, properties and enumerated values, by supplying a Scripting Definition (sdef) file in their bundle. Like applications, this terminology is available to client scripts when they target the library with `tell` or `use`, and to the library script itself.\n\nTo define terminology, create an sdef file as described in the *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)* under [Preparing a Scripting Definition File](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_creating_sdef/SAppsCreateSdef.html#//apple_ref/doc/uid/TP40001979). Then, copy the file to the bundle’s Resources directory and set the Info.plist key `OSAScriptingDefinition` to the base name of the sdef file (that is, the file name without the “.sdef” extension). Script Editor’s Bundle Contents drawer can do this for you: drag the file into the “Resources” list to copy the file into the bundle, and enter the base name of the sdef file in the “Scripting Definition” field.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW17\"></a>\n\n### Using a Library\n\nA script library defines a script object, which a client script may then reference and then send commands to, as described in [Sending Commands to Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW3). Libraries are identified by name:\n\n```\nscript \"My Library\"\n```\n\nAppleScript will search the various Script Library folders, as described above in [Creating a Library](#//apple_ref/doc/uid/TP40000983-CH207-SW13), and create an instance of the library script. Unlike the result from `load script`, this instance is shared and persists for at least the lifetime of the client script, so you do not have to save it in a variable, and state will be preserved while the client script is running. For example, given this library script:\n\n```\nproperty name : \"Counter\"\nproperty nextNumberProperty : 0\non nextNumber()\n    set my nextNumberProperty to my nextNumberProperty + 1\n    return my nextNumberProperty\nend nextNumber\n```\n\nThis client script, despite referencing the library in full both times, will log “1” and then “2”:\n\n```\ntell script \"Counter\" to log its nextNumber() -- logs \"1\"\ntell script \"Counter\" to log its nextNumber() -- logs \"2\"\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW18\"></a>\n>\n> **Note:** Library script instances are unique to, and persistent for the lifetime of, the AppleScript interpreter that loads them. Script Editor, Script Menu, and Folder Actions all run their scripts using a separate interpreter for each script; applets and AppleScriptObjC applications use a single interpreter for the entire application; and other applications may do either. If you are designing a library, try to not rely on persistent state in the library script itself, since its lifetime will vary depending on how the client script is run.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW5\"></a>\n\n## Inheritance in Script Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_466\"></a>You can use the AppleScript inheritance mechanism to define related `script` objects in terms of one another. This allows you to share property and handler definitions among many `script` objects without repeating the shared definitions. Inheritance is described in the following sections:\n\n* [The AppleScript Inheritance Chain](#//apple_ref/doc/uid/TP40000983-CH207-SW15)\n* [Defining Inheritance Through the parent Property](#//apple_ref/doc/uid/TP40000983-CH207-SW7)\n* [Some Examples of Inheritance](#//apple_ref/doc/uid/TP40000983-CH207-SW8)\n* [Using the continue Statement in Script Objects](#//apple_ref/doc/uid/TP40000983-CH207-SW9)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW15\"></a>\n\n### The AppleScript Inheritance Chain\n\nThe top-level `script` object is the parent of all other `script` objects, although any `script` object can specify a different parent object. The top-level `script` object also has a parent—AppleScript itself (the AppleScript component). And even AppleScript has a parent—the current application. The name of that application (which is typically Script Editor) can be obtained through the global constant `current application`. This hierarchy defines the *inheritance chain* that AppleScript searches to find the target for a command or the definition of a term.\n\nEvery `script` object has access to the properties, handlers, and script objects it defines, as well as to those defined by its parent, and those of any other object in the inheritance chain, including AppleScript. That’s why the constants and properties described in [Global Constants in AppleScript](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-BAJBDEJI) are available to any script.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW1\"></a>\n>\n> **Note:** There is an exception to the previous claim. An explicit `local` variable can *shadow*<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_467\"></a> (or block access to) a `global` variable or property with the same name, making the global version inaccessible in the scope of the handler or `script` object. For related information, see [Scope of Variables and Properties](ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW7\"></a>\n\n### Defining Inheritance Through the parent Property\n\nWhen working with `script` objects, *inheritance* is the ability of a child `script` object to take on the properties and handlers of a parent object. You specify inheritance with the `parent` property.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_468\"></a>\n\nThe object listed in a `parent` property definition is called the <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_469\"></a> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_470\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_471\"></a>*parent object*, or parent. A `script` object that includes a `parent` property is referred to as a *child script object* <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_472\"></a> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_473\"></a>, or child. The `parent` property is not required, though if one is not specified, every script is a child of the top-level script, as described in [The AppleScript Inheritance Chain](#//apple_ref/doc/uid/TP40000983-CH207-SW15). A `script` object can have many children, but a child `script` object can have only one parent. The parent object may be any object, such as a `list` or an `application` object, but it is typically another `script` object.\n\nThe syntax for defining a parent object is\n\n( `property` | `prop` )` parent :` *variable*\n\n*variable*\n:   An identifier for a variable that refers to the parent object.\n\nA `script` object must be initialized before it can be assigned as a parent of another `script` object. This means that the definition of a parent `script` object (or a command that calls a function that creates a parent `script` object) must come before the definition of the child in the same script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW8\"></a>\n\n### Some Examples of Inheritance\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_474\"></a>The inheritance relationship between `script` objects should be familiar to those who are acquainted with C++ or other object-oriented programming languages. A child `script` object that inherits the handlers and properties defined in its parent is like a C++ class that inherits methods and instance variables from its parent class. If the child does not have its own definition of a property or handler, it uses the inherited property or handler. If the child has its own definition of a particular property or handler, then it ignores (or overrides) the inherited property or handler.\n\n[Listing 4-1](#//apple_ref/doc/uid/TP40000983-CH207-SW10) shows the definitions of a parent `script` object called `Alex` and a child `script` object called `AlexJunior`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW10\"></a>\n\n**Listing 4-1**  A pair of script objects with a simple parent-child relationship\n\n```\nscript Alex\n    on sayHello()\n        return \"Hello, \" & getName()\n    end sayHello\n    on getName()\n        return \"Alex\"\n    end getName\nend script\n \nscript AlexJunior\n    property parent : Alex\n    on getName()\n        return \"Alex Jr\"\n    end getName\nend script\n \n-- Sample calls to handlers in the script objects:\ntell Alex to sayHello() --result: \"Hello, Alex\"\ntell AlexJunior to sayHello() --result: \"Hello, Alex Jr.\"\n \ntell Alex to getName() --result: \"Alex\"\ntell AlexJunior to getName() --result: \"Alex Jr\"\n```\n\nEach `script` object defines a `getName()` handler to return its name. The `script` object `Alex` also defines the `sayHello()` handler. Because `AlexJunior` declares Alex to be its parent object, it inherits the `sayHello()` handler.\n\nUsing a `tell` statement to invoke the `sayHello()` handler of `script` object `Alex` returns `\"Hello, Alex\"`. Invoking the same handler of `script` object `AlexJunior` returns `\"Hello, Alex Jr\"`—although the same `sayHello()` handler in `Alex` is executed, when that handler calls `getName()`, it’s the `getName()` in `AlexJunior` that is executed.\n\nThe relationship between a parent `script` object and its child `script` objects is dynamic. If the properties of the parent change, so do the inherited properties of the children. For example, the `script` object `JohnSon` in the following script inherits its `vegetable` property from `script` object `John`.\n\n```\nscript John\n    property vegetable : \"Spinach\"\nend script\nscript JohnSon\n    property parent : John\nend script\nset vegetable of John to \"Swiss chard\"\nvegetable of JohnSon\n--result: \"Swiss chard\"\n```\n\nWhen you change the `vegetable` property of `script` object `John` with the `set` command, you also change the `vegetable` property of the child `script` object `Simple`. The result of the last line of the script is `\"Swiss chard\"`.\n\nSimilarly, if a child changes one of its inherited properties, the value in the parent object also changes. For example, the `script` object `JohnSon` in the following script inherits the `vegetable` property from `script` object `John`.\n\n```\nscript John\n    property vegetable : \"Spinach\"\nend script\nscript JohnSon\n    property parent : John\n    on changeVegetable()\n        set my vegetable to \"Zucchini\"\n    end changeVegetable\nend script\ntell JohnSon to changeVegetable()\nvegetable of John\n--result: \"Zucchini\"\n```\n\nWhen you change the `vegetable` property of `script` object `JohnSon` to `\"Zucchini\"` with the `changeVegetable` command, the `vegetable` property of `script` object `John` also changes.\n\nThe previous example demonstrates an important point about inherited properties: to refer to an inherited property from within a child `script` object, you must use the reserved word `my` or `of me` to indicate that the value to which you’re referring is a property of the current `script` object. (You can also use the words `of parent` to indicate that the value is a property of the parent `script` object.) If you don’t, AppleScript assumes the value is a local variable.\n\nFor example, if you refer to `vegetable` instead of `my vegetable` in the `changeVegetable` handler in the previous example, the result is `\"Spinach\"`. For related information, see [The it and me Keywords](ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW9\"></a>\n\n### Using the continue Statement in Script Objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_475\"></a>In a child `script` object, you can define a handler with the same name as a handler defined in its parent object. In implementing the child handler, you have several options:\n\n* The handler in the child `script` object can be independent of the one in its parent. This allows you to call either handler, as you wish.\n* The handler in the child can simply invoke the handler in its parent. This allows the child object to take advantage of the parent’s implementation (as shown in the `script` objects below that contain a `on identify` handler).\n* The handler in the child can invoke the handler in its parent, changing the values passed to it or executing additional statements before or after invoking the parent handler. This allows the child object to modify or add to the behavior of its parent, but still take advantage of the parent’s implementation.\n\nNormally, if a child `script` object and its parent both have handlers for the same command, the child uses its own handler. However, the handler in a child `script` object can handle a command first, and then use a `continue` statement to call the handler for the same command in the parent.\n\nThis handing off of control to another object is called <a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_476\"></a>*delegation*. By delegating commands to a parent `script` object, a child can extend the behavior of a handler contained in the parent without having to repeat the entire handler definition. After the parent handles the command, AppleScript continues at the place in the child where the `continue` statement was executed.\n\nThe syntax for a `continue` statement is shown in `continue`.\n\nThe following script includes two `script` object definitions, `Elizabeth` and `ChildOfElizabeth`.\n\n```\nscript Elizabeth\n    property HowManyTimes : 0\n    to sayHello to someone\n        set HowManyTimes to HowManyTimes + 1\n        return \"Hello \" & someone\n    end sayHello\nend script\n \nscript ChildOfElizabeth\n    property parent : Elizabeth\n    on sayHello to someone\n        if my HowManyTimes &gt; 3 then\n            return \"No, I'm tired of saying hello.\"\n        else\n            continue sayHello to someone\n        end if\n    end sayHello\nend script\ntell Elizabeth to sayHello to \"Matt\"\n--result: \"Hello Matt\", no matter how often the tell is executed\ntell ChildOfElizabeth to sayHello to \"Bob\"\n--result: \"Hello Bob\", the first four times the tell is executed;\n--   after the fourth time: \"No, I’m tired of saying hello.\"\n```\n\nIn this example, the handler defined by `ChildOfElizabeth` for the `sayHello` command checks the value of the `HowManyTimes` property each time the handler is run. If the value is greater than 3, `ChildOfElizabeth` returns a message refusing to say hello. Otherwise, `ChildOfElizabeth` calls the `sayHello` handler in the parent `script` object (`Elizabeth`), which returns the standard hello message. The word `someone` in the `continue` statement is a parameter variable. It indicates that the parameter received with the original `sayHello` command will be passed to the handler in the parent script.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH207-SW11\"></a>\n>\n> **Note:** The reserved word `my` in the statement `if` `my HowManyTimes &gt; 10` in this example is required to indicate that `HowManyTimes` is a property of the `script` object. Without the word `my`, AppleScript assumes that `HowManyTimes` is an undefined local variable.<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_477\"></a>\n\nA `continue` statement can change the parameters of a command before delegating it. For example, suppose the following `script` object is defined in the same script as the preceding example. The first `continue` statement changes the direct parameter of the `sayHello` command from `\"Bill\"` to `\"William\"`. It does this by specifying the value `\"William\"` instead of the parameter variable `someone`.\n\n```\nscript AnotherChildOfElizabeth\n    property parent : Elizabeth\n    on sayHello to someone\n        if someone = \"Bill\" then\n            continue sayHello to \"William\"\n        else\n            continue sayHello to someone\n        end if\n    end sayHello\nend script\n \ntell AnotherChildOfElizabeth to sayHello to \"Matt\"\n--result: \"Hello Matt\"\n \ntell AnotherChildOfElizabeth to sayHello to \"Bill\"\n--result: \"Hello William\"\n```\n\nIf you override a parent’s handler in this manner, the reserved words `me` and `my` in the parent’s handler no longer refer to the parent, as demonstrated in the example that follows.\n\n```\nscript Hugh\n    on identify()\n        me\n    end identify\nend script\nscript Andrea\n    property parent : Hugh\n    on identify()\n        continue identify()\n    end identify\nend script\n \ntell Hugh to identify()\n--result: «script Hugh»\n \ntell Andrea to identify()\n--result: «script Andrea»\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_478\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_479\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_480\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_481\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_482\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH207-DontLinkElementID_483\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html", "sha256": "ef5d34bf93fda2cbbc5d79f8a8e952fd04f803d525d137afc1b69db03453e505", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "conceptual/ASLR_variables.md", "title": "Variables and Properties", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW10\"></a>\n\n# Variables and Properties\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_484\"></a>Variables and properties are introduced in previous chapters in this document. You use them in `script` objects to store and manipulate values.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_13\"></a>\n>\n> **Important:** In reading this chapter, you should be familiar with the information on implicit and explicit `run` handlers in [run Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW15).\n\nThe following sections cover common issues in working with variables and properties, including how to declare them and how AppleScript interprets their scope in a script:\n\n* [Defining Properties](#//apple_ref/doc/uid/TP40000983-CH223-SW2)\n* [Declaring Variables](#//apple_ref/doc/uid/TP40000983-CH223-SW11)\n* [Scope of Variables and Properties](#//apple_ref/doc/uid/TP40000983-CH223-SW1)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW2\"></a>\n\n## Defining Properties\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_485\"></a>Property labels follow the rules described in [Identifiers](ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW4).\n\nProperty definitions use the following syntax:\n\n`property `*propertyLabel*` : `*expression*\n\n*propertyLabel*\n:   An identifier.\n\n*expression*\n:   An AppleScript expression that sets the initial value for the property. Property definitions are evaluated before variable assignments, so property definitions cannot contain variables.\n\nThe following are examples of valid property definitions:\n\n```\nproperty windowCount : 0\nproperty defaultName : \"Barry\"\nproperty strangeValue : (pi * 7)^2\n```\n\nAfter you define a property, you can change its value with the `copy` or `set` command.\n\nThe value set by a property definition is not reset each time the script is run; instead, it persists until the script is recompiled.\n\nYou cannot declare a property in a handler but a handler can access a property defined in its containing `script` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW11\"></a>\n\n## Declaring Variables\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_486\"></a>Variable names follow the rules described in [Identifiers](ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW4).\n\nTo create a variable in AppleScript, you assign it a value using the `copy` or `set` command. For example, the following statements create and initialize two variables, one named `circumference` and one named `savedResult`:\n\n```\nset circumference to pi * 3.5 --result: 10.995574287564\ncopy circumference to savedResult --result: 10.995574287564 (copy of 1st variable)\n```\n\nAs shown in this example, a variable assignment can make use of a previously defined variable. It can also make use of properties declared in the same `script` object.\n\nThere are some obvious, and some more subtle, differences in using `copy` and `set` to create a variable—see [Using the copy and set Commands](#//apple_ref/doc/uid/TP40000983-CH223-SW7) for more information.\n\nIf you assign a new value to a variable that is already in use, it replaces the old value. You can assign a simple value, an expression, or an object specifier—expressions are evaluated and object specifiers are resolved to obtain the value to assign. To create a variable whose value is an object specifier itself, rather than the value of the object specified, use the `a reference to` operator.\n\nThe next two sections describe how you can explicitly define a `local` or a `global` variable. These variable types differ primarily in their scope. Scope, which refers to where a variable is accessible within a script, is described in detail in [Scope of Variables and Properties](#//apple_ref/doc/uid/TP40000983-CH223-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW12\"></a>\n\n### Local Variables\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_487\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_488\"></a>You can declare explicit `local` variables using the following syntax:\n\n`local `*variableName* [`, `*variableName* ]…\n\n*variableName*\n:   An identifier.\n\nThe following are examples of valid `local` variable declarations:\n\n```\nlocal windowCount -- defines one variable\nlocal agentName, agentNumber, agentHireDate -- defines three variables\n```\n\nYou cannot assign an initial value to a `local` variable in its declaration, nor can you declare a class for the variable. Instead, you use the `copy` or `set` command to initialize a variable and set its class. For example:\n\n```\nset windowCount to 0 -- initialize to zero; an integer\nset agentName to \"James Smith\" -- assign agent name; a text string\nset agentNumber to getAgentNumber(agentName) -- call handler; an integer\ncopy current date to agentHireDate -- call current date command; a date\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW13\"></a>\n\n### Global Variables\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_489\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_490\"></a>The syntax for `global` variables is nearly identical to that for `local` variables:\n\n`global `*variableName* [`, `*variableName* ]…\n\n*variableName*\n:   An identifier.\n\nThe following are examples of valid `global` variable declarations:\n\n```\nglobal gAgentCount\nglobal gStatementDate, gNextAgentNumber\n```\n\nAs with `local` variables, you use the `copy` or `set` command to initialize `global` variables and set their class types. For example:\n\n```\nset gAgentCount to getCurrentAgentCount() -- call handler to get count\nset gStatementDate to current date -- get date from current date command\nset gNextAgentNumber to getNextAvailNumber() -- call handler to get number\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW7\"></a>\n\n### Using the copy and set Commands\n\nAs its name implies, when you use the `copy` command to create a variable, it always creates a separate copy (though note that a copy of an object specifier still specifies the same object). However, when you use the `set` command to create a variable, the new variable always refers to the original object or value. You have essentially created another name for the same object.\n\nWhen more than one variable refers to a changeable (or mutable) object, a change to the object is observable through any of the variables. The types of AppleScript objects that are mutable are <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_491\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_492\"></a>`date`, `list`, `record`, and `script` objects.\n\nFor objects that cannot be modified (immutable objects), variables created with the `set` command may seem like copies—there’s no way to change the object the variables point to, so they seem independent. This is demonstrated in the example in the next section that creates the variables `myName` and `yourName`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW9\"></a>\n\n#### Declaring Variables with the set Command\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_493\"></a>You can use the `set` command to set a variable to any type of object. If the variable doesn’t exist, it is created; if it does exist, its current value is replaced:\n\n```\nset numClowns to 5 --result: 5\nset myList to { 1, 2, \"four\" } --result: {1, 2, \"four\"}\ntell application \"TextEdit\"\n    set word1 to word 1 of front document --result: some word\nend tell\n```\n\nThe following example uses a mutable object. It creates two variables that refer to the same list, then modifies the list through one of the variables:\n\n```\nset myList to { 1, 2, 3 }\nset yourList to myList\nset item 1 of myList to 4\n```\n\nAfter executing these statements, the statements `item 1 of myList` and `item 1 of yourList` both yield `4`, because both variables refer to the same list.\n\nNow suppose you’re working with an immutable object, such as a `text` object:\n\n```\nset myName to \"Sheila\"\nset yourName to myName\n```\n\nBoth variables refer to the same `text` object, but `text` objects are not mutable, so there is no way to change the the value `myName` such that it affects the value of `yourName`. (If you assign new text to one of the variables, you are just creating a new, separate `text` object.)\n\nThe `set` command can assign several variables at once using a pattern, which may be a list or record: a list or record of variables on one side, and a list or record of values on the other. Values are matched to variables based on their position for a list, or based on their keys for a record. Not having enough values is an error; if there are too many values, the extra ones are ignored. The order in which the values are evaluated and the variables are assigned is unspecified, but all values are evaluated before any assignments are made.\n\nThe Examples section of the `set` command shows some simple pattern assignments. Here is an example with more complex patterns:\n\n```\nset x to {8, 94133, {firstName:\"John\", lastName:\"Chapman\"}}\nset {p, q, r} to x\n(* now p, q, and r have these values:\n                p = 8\n                q = 94133\n                r = {firstName:\"John\", lastName:\"Chapman\"}  *)\nset {p, q, {lastName:r}} to x\n(* now p, q, and r have these values: p = 8\n                                      q = 94133\n                                      r = \"Chapman\" *)\n```\n\nIn the final assignment statement above, `{lastName:r}` is a record that hasn’t been used before in the script, and contains an item with label `lastName` and value `r` (a previously defined variable). The variable `x` has previously been set to have a record that has an item with label `lastName` and value `\"Chapman\"`. During the assignment, the value of the item labeled `lastName` in the new record is set to the value of the item labeled `lastName` in `x`—hence it now has the value `\"Chapman\"`.\n\nAs this example demonstrates, the properties of a record need not be given in the same order and need not all be used when you set a pattern to a pattern, as long as the patterns match. For details, see the `set` command.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW14\"></a>\n>\n> **Note:** Using patterns with the `set` command is similar to using patterned parameters with handlers, which is described in [Handlers with Patterned Positional Parameters](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW20).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW8\"></a>\n\n#### Declaring Variables with the copy Command\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_494\"></a>You can use the `copy` command to set a variable to any type of object. If the variable doesn’t exist, it is created; if it does exist, its current value is replaced. The `copy` command creates a new copy that is independent of the original—a subsequent change does not change the original value (though note that a copy of an object specifier still specifies the same object).\n\nTo copy within an application, you should use the application’s `duplicate` command, if it has one. To copy between applications, you can use the `get` command to obtain information from one application and the `set` command to set it in another.\n\nThe `copy` command creates a deep copy—that is, if you copy a nested data structure, such as a list that contains another list, the entire structure is copied, as shown in the following example. This example creates a record (`alpha`), then a list (`beta`), then a list that contains the first record and list (`gamma`), then finally a copy of `gamma` (`delta`). It then changes a property in the original record, `alpha`. The result shows that the property is changed wherever `alpha` appears, except in the copy, `delta`:\n\n```\nset alpha to {property1:10, property2:20}\nset beta to {1, 2, \"Hello\"}\nset gamma to {alpha, beta, \"Goodbye\"}\ncopy gamma to delta\nset property1 of alpha to 42\n \n{alpha, beta, gamma, delta}  -- List variables to show contents\n(*result: {{property1:42, property2:20}, {1, 2, \"Hello\"}, {{property1:42, property2:20}, {1, 2, \"Hello\"}, \"Goodbye\"}, {{property1:10, property2:20}, {1, 2, \"Hello\"}, \"Goodbye\"}} *)\n```\n\nIf you make a copy of a `reference` object, it refers to the same object as the original (because both contain the same object specifier):\n\n```\nset windowRef to a reference to window 1 of application \"Finder\"\nname of windowRef --result: \"Script testing folder\"\ncopy windowRef to currentWindowRef --result: a new object specifier\nname of currentWindowRef --result: \"Script testing folder\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW1\"></a>\n\n## Scope of Variables and Properties\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_495\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_496\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_497\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_498\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_499\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_500\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_501\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_502\"></a>\n\nThe *declaration* of a variable or property identifier is the first valid occurrence of the identifier in a `script` object. The form and location of the declaration determine how AppleScript treats the identifier in that `script` object.\n\nThe <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_503\"></a>*scope* is the range over which AppleScript recognizes a declared identifier within a `script` object. The scope of a variable depends on where you declare it and whether you declare it as `global` or `local`. The scope of a property extends to the entire `script` object in which it is declared. After declaring a property, you can reuse the same identifier as a separate variable only if you first declare it as a `local` variable.\n\n*Lifetime*<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_504\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_505\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_506\"></a> refers to the period of time over which a variable or property is in existence. Only the values of properties and `global` variables can persist after a script is run.\n\nIn the discussions that follow, declarations and statements in a `script` object that occur outside of any handlers or nested `script` objects are identified as *outside*.\n\nThe following examples show the four basic forms for declaring variables and properties in AppleScript:\n\n* `property x: 3`\n\n  The scope of a property definition is the `script` object in which it is declared, including any handlers or nested `script` objects. A property definition specifies an initial value. You cannot declare a property in a handler.\n\n  The value set by a property definition is not reset each time the script is run; instead, it persists until the script is recompiled.\n* `global x`\n\n  <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_507\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_508\"></a>The scope of a `global` variable can be limited to specific handlers or contained `script` objects or it can extend throughout a top-level `script` object. A `global` declaration doesn’t set an initial value—it must be initialized by a `copy` or `set` command before a script can access its value.\n\n  The value of a `global` variable is not reset each time a script is run, unless its initialization statement is executed.\n* `local x`\n\n  <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_509\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_510\"></a>The scope of a `local` variable can be limited to specific handlers or contained `script` objects or it can extend throughout a top-level `script` object. A `local` declaration doesn’t set an initial value—it must be initialized by a `copy` or `set` command before a script can access its value.\n\n  The value of a `local` variable is reset each time the handler is run (either the `run` handler for the script, or the specific handler in which the variable is declared).\n* `set x to 3`\n\n  In the absence of a `global` variable declaration, the scope of a variable declared with the `copy` or `set` command is normally restricted to the `run` handler for the script, making it implicitly local to that run handler. However, a handler or nested script object can declare the same variable with a `global` declaration to gain access to it.\n\n  The value of a variable declared with the `copy` or `set` command is reset each time a script is run.\n\nIf you want to use the same identifier in several different places in a script, you should either declare it as a property or as a `global` variable.\n\nIt is often convenient to limit the scope of a particular identifier to a single handler or nested `script` object, which you can do by defining it as a `local` variable in the handler or `script` object. Outside, the identifier has no value associated with it and can be reused elsewhere in the script. When used this way, a `local` variable is said to *shadow*<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_511\"></a> (or block access to) a `global` variable or property with the same name, making the global version inaccessible in the scope of the handler or `script` object where the `local` variable is declared.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW15\"></a>\n>\n> **Note:** If you save a script as a script application, then run the application on read-only media, the value of a modified property or `global` variable is not saved.\n\nThe following sections provide additional information about scope:\n\n* [Scope of Properties and Variables Declared in a Script Object](#//apple_ref/doc/uid/TP40000983-CH223-SW3)\n* [Scope of Variables Declared in a Handler](#//apple_ref/doc/uid/TP40000983-CH223-SW5)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW3\"></a>\n\n### Scope of Properties and Variables Declared in a Script Object\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_512\"></a>Table 3-1 shows the scope and lifetime for variables and properties that are declared at the top level in a `script` object (outside any handlers or nested `script` objects).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW4\"></a>\n\n**Table 3-1**  Scope of property and variable declarations at the top level in a script object\n\n| Declaration type | Scope (visibility) | Lifetime |\n| `property x: 3` | Everywhere in script | Reset when script is recompiled |\n| `global x` | Everywhere in script | Reset when reinitialized in script or when script is recompiled |\n| `local x` | Within `run` handler only | Reset when script is run |\n| `set x to 3` | Within `run` handler only | Reset when script is run |\n\nThe scope of a property in a `script` object extends to any subsequent statements anywhere in the script. Consider the following example:\n\n```\nproperty currentCount : 0\nincrement()\n \non increment()\n    set currentCount to currentCount + 1\n    display dialog \"Count is now \" & currentCount  & \".\"\nend increment\n```\n\nWhen it encounters the identifier `currentCount` anywhere in this script, AppleScript associates it with the `currentCount` property.\n\nThe value of a property persists after the script in which the property is defined has been run. Thus, the value of `currentCount` is 0 the first time this script is run, 1 the next time it is run, and so on. The property’s current value is saved with the `script` object and is not reset to 0 until the script is recompiled—that is, modified and then run again, saved, or checked for syntax. <a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_513\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_514\"></a>\n\nThe value of a `global` variable also persists after the script in which it is defined has been run. However, depending on how it is initialized, a `global` variable may be reset each time the script is run again. The next example shows how to initialize a `global` variable so that it is initialized only the first time a script is run, and thus produces the same result as using a property in the previous example:\n\n```\nglobal currentCount\nincrement()\n \non increment()\n    try\n        set currentCount to currentCount + 1\n    on error\n        set currentCount to 1\n    end try\n        display dialog \"Count is now \" & currentCount  & \".\"\nend increment\n```\n\nThe first time the script is run, the statement `set currentCount to currentCount + 1` generates an error because the `global` variable `currentCount` has not been initialized. When the error occurs, the `on error` block initializes `currentCount`. When the script is run again, the variable has already been initialized, so the error branch is not executed, and the variable keeps its previous value. Persistence is accomplished, but not as simply as in the previous example.<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_515\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_516\"></a>\n\nIf you don’t want the value associated with an identifier to persist after a script is run but you want to use the same identifier throughout a script, declare a `global` variable and use the `set` command to set its value each time the script is run:\n\n```\nglobal currentCount\nset currentCount to 0\non increment()\n    set currentCount to currentCount + 1\nend increment\n \nincrement() --result: 1\nincrement() --result: 2\n```\n\nEach time the `on increment` handler is called within the script, the `global` variable `currentCount` increases by 1. However, when you run the entire script again, `currentCount` is reset to 0.\n\nIn the absence of a `global` variable declaration, the scope of a variable declaration using the `set` command is normally restricted to the `run` handler for the script. For example, this script declares two separate `currentCount` variables:\n\n```\nset currentCount to 10\non increment()\n    set currentCount to 5\nend increment\n \nincrement() --result: 5\ncurrentCount --result: 10\n```\n\nThe scope of the first `currentCount` variable’s declaration is limited to the `run` handler for the script. Because this script has no explicit `run` handler, outside statements are part of its implicit `run` handler, as described in [run Handlers](ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW15). The scope of the second `currentCount` declaration, within the `on increment` handler, is limited to that handler. AppleScript keeps track of each variable independently.\n\nTo associate a variable in a handler with the same variable declared with the `set` command outside the handler, you can use a `global` declaration in the handler, as shown in the next example. (This approach also works to associate a variable in a nested `script` object.)\n\n```\nset currentCount to 0\non increment()\n    global currentCount\n    set currentCount to currentCount + 1\nend increment\n \nincrement() --result: 1\ncurrentCount --result: 1\n```\n\nTo restrict the context of a variable to a script’s `run` handler regardless of subsequent `global` declarations, you must declare it explicitly as a `local` variable, as shown in this example:\n\n```\nlocal currentCount\nset currentCount to 10\non increment()\n    global currentCount\n    set currentCount to currentCount + 2\nend increment\n \nincrement() --error: \"The variable currentCount is not defined\"\n```\n\nBecause the `currentCount` variable in this example is declared as local to the script, and hence to its implicit `run` handler, any subsequent attempt to declare the same variable as `global` results in an error.\n\nIf you declare an outside variable with the `set` command and then declare the same identifier as a property, the declaration with the `set` command overrides the property definition. For example, the following script returns 10, not 5. This occurs because AppleScript evaluates property definitions before it evaluates `set` command declarations:\n\n```\nset numClowns to 10 -- evaluated after property definition\nproperty numClowns: 5 -- evaluated first\nnumClowns --result: 10\n```\n\nThe next example, shows how to use a `global` variable declaration in a `script` object to associate a `global` variable with an outside property:\n\n```\nproperty currentCount : 0\nscript Paula\n    property currentCount : 20\n    script Joe\n        global currentCount\n        on increment()\n            set currentCount to currentCount + 1\n            return currentCount\n        end increment\n    end script\n    tell Joe to increment()\nend script\nrun Paula --result: 1\nrun Paula --result: 2\ncurrentCount --result: 2\ncurrentCount of Paula --result: 20\n```\n\nThis script declares two separate `currentCount` properties: one outside any handlers (and `script` objects) in the main script and one in the `script` object `Paula` but outside of any handlers or `script` objects within `Paula`. Because the script `Joe` declares the `global` variable `currentCount`, AppleScript looks for `currentCount` at the top level of the script, thus treating Joe’s `currentCount` and `currentCount` at the top level of the script as the same variable.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW5\"></a>\n\n### Scope of Variables Declared in a Handler\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_517\"></a>A handler can’t declare a property, although it can refer to a property that is declared outside any handler in the `script` object. (A handler can contain script objects, but it can’t contain another handler, except in a contained script object.)\n\n[Table 3-2](#//apple_ref/doc/uid/TP40000983-CH223-SW6) summarizes the scope of variables declared in a handler. Examples of each form of declaration follow.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH223-SW6\"></a>\n\n**Table 3-2**  Scope of variable declarations within a handler\n\n| Declaration type | Scope (visibility) | Lifetime |\n| `global x` | Within handler only | Reset when script is recompiled; if initialized in handler, then reset when handler is run |\n| `local x` | Within handler only | Reset when handler is run |\n| `set x to 3` | Within handler only | Reset when handler is run |\n\nThe scope of a `global` variable declared in a handler is limited to that handler, although AppleScript looks beyond the handler when it tries to locate an earlier occurrence of the same variable. Here’s an example:\n\n```\nset currentCount to 10\non increment()\n    global currentCount\n    set currentCount to currentCount + 2\nend increment\n \nincrement() --result: 12\ncurrentCount --result: 12\n```\n\nWhen AppleScript encounters the `currentCount` variable within the `on increment` handler, it doesn’t restrict its search for a previous occurrence to that handler but keeps looking until it finds the declaration outside any handler. However, the use of `currentCount` in any subsequent handler in the script is local to that handler unless the handler also explicitly declares `currentCount` as a `global` variable.\n\nThe scope of a `local` variable declaration in a handler is limited to that handler, even if the same identifier has been declared as a property outside the handler:\n\n```\nproperty currentCount : 10\non increment()\n    local currentCount\n    set currentCount to 5\nend increment\n \nincrement() --result: 5\ncurrentCount --result: 10\n```\n\nThe scope of a variable declaration using the `set` command in a handler is limited to that handler:\n\n```\nscript Henry\n    set currentCount to 10 -- implicit local variable in script object\n    on increment()\n        set currentCount to 5-- implicit local variable in handler\n    end increment\n    return currentCount\nend script\n \ntell Henry to increment() --result: 5\nrun Henry --result: 10\n```\n\nThe scope of the first declaration of the first `currentCount` variable in the `script` object `Henry` is limited to the `run` handler for the `script` object (in this case, an implicit `run` handler, consisting of the last two statements in the script). The scope of the second `currentCount` declaration, within the `on increment` handler, is limited to that handler. The two instances of `currentCount` are independent variables.<a id=\"//apple_ref/doc/uid/TP40000983-CH223-DontLinkElementID_518\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_variables.html", "sha256": "10018ec74a43e4dde7434b1d4af0a66aa8bd5e03a1ea23447ede7b5ff22ac8eb", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "introduction/ASLR_intro.md", "title": "Introduction to AppleScript Language Guide", "body": "<a id=\"//apple_ref/doc/uid/TP40000983\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH208-SW1\"></a>\n\n# Introduction to AppleScript Language Guide\n\nThis document is a guide to the AppleScript language—its lexical conventions, syntax, keywords, and other elements. It is intended primarily for use with AppleScript 2.0 or later and macOS version 10.5 or later.\n\nAppleScript 2.0 can use scripts developed for any version of AppleScript from 1.1 through 1.10.7, any scripting addition created for AppleScript 1.5 or later for macOS, and any scriptable application for Mac OS v7.1 or later. A script created with AppleScript 2.0 can be used by any version of AppleScript back to version 1.1, provided it does not use features of AppleScript, scripting additions, or scriptable applications that are unavailable in that version.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_14\"></a>\n>\n> **Important:** Descriptions and examples for the terms in this document have been tested with AppleScript 2.0 in OS X v10.5 (Leopard). Except for terms that are noted as being new in Leopard, most descriptions and examples work with previous system versions, but have not been tested against all of them.\n>\n> If you need detailed information about prior system and AppleScript versions, see *AppleScript Release Notes (OS X v10.4 and earlier)*.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-SW2\"></a>\n\n## What Is AppleScript?\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_519\"></a>AppleScript is a scripting language created by Apple. It allows users to directly control scriptable Macintosh applications, as well as parts of macOS itself. You can create scripts—sets of written instructions—to automate repetitive tasks, combine features from multiple scriptable applications, and create complex workflows.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH208-SW3\"></a>\n>\n> **Note:** Apple also provides the Automator application, which allows users to automate common tasks by hooking together ready-made actions in a graphical environment. For more information, see [Automator Documentation](https://developer.apple.com/library/archive/../../../navigation/redirect.html#//apple_ref/doc/uid/TP30000943-TP40005948-TP40001673).\n\nA scriptable application is one that can be controlled by a script. For AppleScript, that means being responsive to interapplication messages, called <a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_520\"></a>*Apple events*, sent when a script command targets the application. (Apple events can also be sent directly from other applications and macOS.)\n\nAppleScript itself provides a very small number of commands, but it provides a framework into which you can plug many task-specific commands—those provided by scriptable applications and scriptable parts of macOS.\n\nMost script samples and script fragments in this guide use scriptable features of the Finder application, scriptable parts of macOS, or scriptable applications distributed with macOS, such as TextEdit (located in `/Applications`).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-SW4\"></a>\n\n## Who Should Read This Document?\n\nYou should use this document if you write or modify AppleScript scripts, or if you create scriptable applications and need to know how scripts should work.\n\n*AppleScript Language Guide* assumes you are familiar with the high-level information about AppleScript found in *[AppleScript Overview](../../applescript-overview/AppleScriptX.md#//apple_ref/doc/uid/10000156i)*.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_1\"></a>\n\n## Organization of This Document\n\nThis guide describes the AppleScript language in a series of chapters and appendixes.\n\nThe first five chapters introduce components of the language and basic concepts for using it, then provide additional overview on working with script objects and handler routines:\n\n* [AppleScript Lexical Conventions](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW1) describes the characters, symbols, keywords, and other language elements that make up statements in an AppleScript script.\n* [AppleScript Fundamentals](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW2) describes basic concepts that underly the terminology and rules covered in the rest of this guide.\n* [Variables and Properties](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW10) describes common issues in working with variables and properties, including how to declare them and how AppleScript interprets their scope.\n* [Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA) describes how to define, initialize, send commands to, and use inheritance with script objects.\n* [About Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH) provides information on using handlers (a type of function available in AppleScript) to factor and reuse code.\n\nThe following chapters provide reference for the AppleScript Language:\n\n* [Class Reference](../reference/ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-246384) describes the classes AppleScript defines for common objects used in scripts.\n* [Commands Reference](../reference/ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-SW59) describes the commands that are available to any script.\n* [Reference Forms](../reference/ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-120522) describes the syntax for specifying an object or group of objects in an application or other container.\n* [Operators Reference](../reference/ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070) provides a list of the operators AppleScript supports and the rules for using them, along with sections that provide additional detail for commonly used operators.\n* [Control Statements Reference](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-157332) describes statements that control when and how other statements are executed. It covers standard conditional statements, as well as statements used in error handling and other operations.\n* [Handler Reference](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-163762) shows the syntax for defining and calling handlers and describes other statements you use with handlers.\n\nThe following chapter describes an AppleScript-related feature of macOS:\n\n* [Folder Actions Reference](../reference/ASLR_folder_actions.md#//apple_ref/doc/uid/TP40000983-CH219-SW2) describes how you can write and attach script handlers to specific folders, such that the handlers are invoked when the folders are modified.\n\nThe following appendixes provide additional information about the AppleScript language and how to work with errors in scripts:\n\n* [AppleScript Keywords](../reference/ASLR_keywords.md#//apple_ref/doc/uid/TP40000983-CH222-SW2) lists the keywords of the AppleScript language, provides a brief description for each, and points to related information.\n* [Error Numbers and Error Messages](../reference/ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-SW5) describes error numbers and error messages you may see in working with AppleScript scripts.\n* [Working with Errors](../reference/ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-SW1) provides detailed examples of handling errors with [try Statements](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973) and [error Statements](../reference/ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-129657).\n* [Double Angle Brackets](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-SW1) describes when you are likely to see double angle brackets (or chevrons—`«»`) in scripts and how you can work with them.\n* [Libraries using Load Script](../reference/ASLR_load_script.md#//apple_ref/doc/uid/TP40000983-CH227-SW1) describes how to save libraries of handlers and access them from other scripts.\n* [Unsupported Terms](../reference/ASLR_unsupported_terms.md#//apple_ref/doc/uid/TP40000983-CH224-SW1) lists terms that are no longer supported in AppleScript.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-38112\"></a>\n\n## Conventions Used in This Guide\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_521\"></a>Glossary terms are shown in *boldface* where they are defined.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_15\"></a>\n>\n> **Important:** This document sometimes uses the continuation character (¬) for sample statements that don’t fit on one line on a document page. It also uses the continuation character in some syntax statements to identify an item that, if included, must appear on the same line as the previous item. The continuation character itself is not a required part of the syntax—it is merely a mechanism for including multiple lines in one statement.\n\nThe following conventions are used in syntax descriptions:\n\n|  |  |\n| --- | --- |\n| `language element` | Plain computer font indicates an element that you type exactly as shown. If there are special symbols (for example, `+` or `&`), you also type them exactly as shown.<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_522\"></a> |\n| *placeholder* | Italic text indicates a placeholder that you replace with an appropriate value.<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_523\"></a> |\n| [optional] | Brackets indicate that the enclosed language element or elements are optional.<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_524\"></a> |\n| (a group) | Parentheses group elements together.  However, the parentheses shown in [Handler Syntax (Positional Parameters)](../reference/ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-166812) are part of the syntax. |\n| [optional]... | Three ellipsis points (...) after a group defined by brackets indicate that you can repeat the group of elements within brackets 0 or more times.<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_525\"></a> |\n| a \\| b \\| c | Vertical bars separate elements in a group from which you must choose a single element. The elements are often grouped within parentheses or brackets.<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_526\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_527\"></a> |\n| Filenames shown in scripts | Most filenames shown in examples in this document include extensions, such as `rtf` for a TextEdit document. Use of extensions in scripts is generally dependent on the “Show all file extensions” setting in the Advanced pane of Finder Preferences.  To work with the examples on your computer, you may need to modify either that setting or the filenames. |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH208-DontLinkElementID_2\"></a>\n\n## See Also\n\nThese Apple documents provide additional information for working with AppleScript:\n\n* See *Getting Started with AppleScript* for a guided quick start, useful to both scripters and developers.\n* See *[AppleScript Overview](../../applescript-overview/AppleScriptX.md#//apple_ref/doc/uid/10000156i)*, including the chapter [Scripting with AppleScript](../../applescript-overview/Concepts/work_with_as.md), for a high-level overview of AppleScript and its related technologies.\n* See *Getting Started With Scripting & Automation* for information on the universe of scripting technologies available in macOS.\n* See [AppleScript Terminology and Apple Event Codes](http://developer.apple.com/releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html) for a list of many of the scripting terms defined by Apple.\n\nFor additional information on working with the AppleScript language and creating scripts, see one of the comprehensive third-party documents available in bookstores and online.\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html", "sha256": "7cd77ae45650ddaa36bde9d67be1e7ff6acae06080872d751ea21d1f0cf94469", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_classes.md", "title": "Class Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-246384\"></a>\n\n# Class Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_528\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_529\"></a>A *class* is a category for objects that share characteristics. AppleScript defines classes for common objects used in AppleScript scripts, such as aliases, Boolean values, integers, text, and so on.\n\nEach object in a script is an instance of a specific class and has the same properties (including the `class` property), can contain the same kinds of elements, and supports the same kinds of operations and coercions as other objects of that type. Objects that are instances of AppleScript types can be used anywhere in a script—they don’t need to be within a `tell` block that specifies an application.\n\nScriptable applications also define their own classes, such as windows and documents, which commonly contain properties and elements based on many of the basic AppleScript classes described in this chapter. Scripts obtain these objects in the context of the applications that define them. For more information on the class types applications typically support, see “Standard Classes” in Technical Note TN2106, [Scripting Interface Guidelines](http://developer.apple.com/technotes/tn2002/tn2106.html).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW3\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_530\"></a>\n\nalias\n\nA persistent reference to an existing file, folder, or volume in the file system.\n\nFor related information, see `file`, `POSIX file`, and [Aliases and Files](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW28).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW4\"></a>\n\n##### Properties of alias objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_531\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value is always `alias`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_532\"></a>| `POSIX path` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | The POSIX-style path to the object. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_16\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of an `alias` object to a `text` object or single-item `list`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_17\"></a>\n\n##### Examples\n\n```\nset zApp to choose application as alias -- (then choose Finder.app)\n--result: alias \"Leopard:System:Library:CoreServices:Finder.app:\"\nclass of zApp --result: alias\nzApp as text --result: \"Leopard:System:Library:CoreServices:Finder.app:\"\nzApp as list --result: {alias \"Leopard:System:Library:CoreServices:Finder.app:\"}\n```\n\nYou can use the `POSIX path` property to obtain a POSIX-style path to the item referred to by an alias:\n\n```\nPOSIX path of zApp --result: \"/System/Library/CoreServices/Finder.app/\"\n```\n\n##### Discussion\n\nYou can only create an alias to a file or folder that already exists.\n\n##### Special Considerations\n\nAppleScript 2.0 attempts to resolve aliases only when you run a script. However, in earlier versions, AppleScript attempts to resolve aliases at compile time.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW2\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_533\"></a>\n\napplication\n\nAn application on a local machine or an available server.\n\nAn application object in a script has all of the properties described here, which are handled by AppleScript. It may have additional properties, depending on the specific application it refers to.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW9\"></a>\n\n##### Properties of application objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_534\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value is always `application`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_535\"></a>| `frontmost` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `boolean` | | |\n|  | Is the application frontmost? | | | |\n|  | Starting in AppleScript 2.0, accessing an application’s `frontmost` property returns a Boolean value without launching the application or sending it an event. | | | |\n|  | The value of `frontmost` for background-only applications, UI element applications such as System Events, and applications that are not running is always `false`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_536\"></a>| `id` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | The application’s bundle identifier (the default) or its four-character signature code. (New in AppleScript 2.0.) | | | |\n|  | For example, the bundle identifier for the TextEdit application is `\"com.apple.TextEdit\"`. Its four-character signature code is `'ttxt'`. If you ask for an application object’s `id` property, you will get the bundle identifier version, unless the application does not have a bundle identifier and does have a signature code. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_537\"></a>| `name` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | The application’s name. | | | |\n|  | Starting in AppleScript 2.0, accessing an application’s `name` property returns the application name as text without launching the application or sending it an event. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_538\"></a>| `running` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `boolean` | | |\n|  | Is the application running? (New in AppleScript 2.0.) | | | |\n|  | Accessing an application’s `running` property returns a Boolean value without launching the application or sending it an event. | | | |\n|  | You can also ask the System Events utility application whether an application is running. While it requires more lines in your script to do so, that option is available in earlier versions of the Mac OS. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_539\"></a>| `version` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | The application’s version. | | | |\n|  | Starting in AppleScript 2.0, accessing this property returns the application version as text without launching the application or sending it an event. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_18\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of an `application` object to a single-item `list`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_19\"></a>\n\n##### Examples\n\nYou can determine whether an application on the current computer is running without launching it (this won’t work if your target is on a remote computer):\n\n```\ntell application \"iTunes\" -- doesn't automatically launch app\n    if it is running then\n        pause\n    end if\nend tell\n```\n\nYou can also use this format:\n\n```\nif application \"iTunes\" is running\n    tell application \"iTunes\" to pause\nend if\n```\n\nThe following statements specify the TextEdit application by, respectively, its signature, its bundle id, and by a POSIX path to a specific version of TextEdit:\n\n```\napplication id \"ttxt\"\napplication id \"com.apple.TextEdit\"\napplication \"/Applications/TextEdit.app\"\n```\n\nYou can target a remote application with a `tell` statement. For details, see `Remote Applications`.\n\n##### Special Considerations\n\nStarting in OS X v10.5, there are several changes in application behavior:\n\n* Applications launch hidden.\n\n  AppleScript has always launched applications if it needed to in order to send them a command. However, they would always launch visibly, which could be visually disruptive. AppleScript now launches applications hidden by default. They will not be visible unless the script explicitly says otherwise using `activate`.\n* Applications are located lazily.\n\n  When running a script, AppleScript will not attempt to locate an application until it needs to in order to send it a command. This means that a compiled script or script application may contain references to applications that do not exist on the user’s system, but AppleScript will not ask where the missing applications are until it encounters a relevant `tell` block. Previous versions of AppleScript would attempt to locate every referenced application before running the script.\n\n  When opening a script for editing, AppleScript will attempt to locate all the referenced applications in the entire script, which may mean asking where one is. Pressing the Cancel button only cancels the search for that application; the script will continue opening normally, though custom terminology for that application will display as raw codes. In older versions, pressing Cancel would cancel opening the script.\n* Applications are located and re-located dynamically.\n\n  Object specifiers that refer to applications, including those in `tell` blocks, are evaluated every time a script runs. This alleviates problems with scripts getting “stuck” to a particular copy of an application.\n\nIn prior versions of AppleScript, use of the new built-in application properties will fall back to sending an event to the application, but the application may not handle these properties in the same way, or handle them at all. (Most applications will handle `name`, `version`, and `frontmost`; `id` and `running` are uncommon.) The other new features described above require AppleScript 2.0.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_540\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248070\"></a>boolean\n\nA logical truth value.\n\nA `boolean` object evaluates to one of the AppleScript constants `true` or `false`. A *Boolean expression* contains one or more `boolean` objects and evaluates to `true` or `false`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248090\"></a>\n\n##### Properties of boolean objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_541\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value is always `boolean`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_20\"></a>\n\n##### Operators\n\nThe operators that take `boolean` objects as operands are `and`, `or`, `not`, `&`, `=`, and `≠`, as well as their text equivalents: `is equal to`, `is not equal to`, `equals`, and so on.\n\nThe `=` operator returns `true` if both operands evaluate to the same value (either `true` or `false`); the `≠` operator returns `true` if the operands evaluate to different values.\n\nThe binary operators `and` and `or` take `boolean` objects as operands and return Boolean values. An `and` operation, such as `(2 &gt; 1) and (4 &gt; 3)`, has the value `true` if both its operands are `true`, and `false` otherwise. An `or` operation, such as `(theString = \"Yes\") or (today = \"Tuesday\")`, has the value `true` if either of its operands is `true`.\n\nThe unary `not` operator changes a `true` value to `false` or a `false` value to `true`.\n\nThe concatenation operator (`&`) creates a list containing the two boolean values on either side of it; for example:\n\n```\ntrue & false --result: {true, false}\n```\n\nFor additional information on these operators, see [Operators Reference](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_21\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `boolean` object to a single-item `list`, a `text` object, or an `integer`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_22\"></a>\n\n##### Examples\n\nThe following are simple Boolean expressions:\n\n```\ntrue\nfalse\nparagraphCount &gt; 2\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_542\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_543\"></a>AppleScript supplies the Boolean constants <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_544\"></a>`true` and <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_545\"></a>`false` to serve as the result of evaluating a Boolean operation. But scripts rarely need to use these literals explicitly because a Boolean expression itself evaluates to a Boolean value. For example, consider the following two script snippets:\n\n```\nif companyName is equal to \"Acme Baking\" then\n    return true\nelse\n    return false\nend if\n \nreturn companyName is equal to \"Acme Baking\"\n```\n\nThe second, simpler version, just returns the value of the Boolean comparison `companyName is equal to \"Acme Baking\"`, so it doesn’t need to use a Boolean constant.\n\n##### Discussion\n\nWhen you pass a Boolean value as a parameter to a command, the form may change when you compile the command. For example, the following line\n\n```\nchoose folder showing package contents true\n```\n\nis converted to this when compiled by AppleScript:\n\n```\nchoose folder with showing package contents\n```\n\nIt is standard for AppleScript to compile parameter expressions from the Boolean form (such as `showing package contents true` or `invisibles false`) into the `with` form (`with showing package contents` or `without invisibles`, respectively).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_546\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248396\"></a>class\n\nSpecifies the class of an object or value.\n\nAll classes have a `class` property that specifies the class type. The value of the `class` property is an identifier.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248431\"></a>\n\n##### Properties of class objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_547\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `class`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_23\"></a>\n\n##### Operators\n\nThe operators that take class identifier values as operands are `&`, `=`, `≠`, and `as`.\n\nThe coercion operator `as` takes an object of one class type and coerces it to an object of a type specified by a class identifier. For example, the following statement coerces a `text` object into a corresponding `real`:\n\n```\n\"1.5\" as real --result: 1.5\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_24\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a class identifier to a single-item `list` or a `text` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_25\"></a>\n\n##### Examples\n\nAsking for the class of a type such as `integer` results in a value of `class`:\n\n```\nclass of text --result: class\nclass of integer --result: class\n```\n\nHere is the class of a boolean literal:\n\n```\nclass of true --result: boolean\n```\n\nAnd here are some additional examples:\n\n```\nclass of \"Some text\" --result: text\nclass of {1, 2, \"hello\"} --result: list\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCECDHC\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_548\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248637\"></a>constant\n\nA word with a predefined value.\n\nConstants are generally used for enumerated types. You cannot define constants in scripts; constants can be defined only by applications and by AppleScript. See [Global Constants in AppleScript](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-BAJBDEJI) for more information.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-248702\"></a>\n\n##### Properties of constant objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_549\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `constant`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_26\"></a>\n\n##### Operators\n\nThe operators that take `constant` objects as operands are `&`, `=`, `≠`, and `as`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_27\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `constant` object to a single-item `list` or a `text` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_28\"></a>\n\n##### Examples\n\nOne place you use constants defined by AppleScript is in text comparisons performed with `considering` or `ignoring` statements (described in `considering / ignoring (text comparison)`). For example, in the following script statements, `punctuation`, `hyphens`, and `white space` are constants:\n\n```\nconsidering punctuation but ignoring hyphens and white space\n    \"bet-the farm,\" = \"BetTheFarm,\" --result: true\nend considering\nclass of hyphens --result: constant\n```\n\nThe final statement shows that the class of `hyphens` is `constant`.\n\n##### Discussion\n\nConstants are not text strings, and they must not be surrounded by quotation marks.\n\nLiteral constants are defined in [Literals and Constants](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW10).\n\nIn addition to the constants defined by AppleScript, applications often define enumerated types to be used for command parameters or property values. For example, the iTunes `search` command defines these constants for specifying the search area:\n\n```\nalbums\nall\nartists\ncomposers\ndisplayed\nsongs\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCGECID\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_550\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-249049\"></a>date\n\nSpecifies the day of the week, the date (month, day of the month, and year), and the time (hours, minutes, and seconds).\n\nTo get the current date, use the command `current date`:\n\n```\nset theDate to current date\n--result: \"Friday, November 9, 2007 11:35:50 AM\"\n```\n\nYou can get and set the different parts of a `date` object through the date and time properties described below.\n\nWhen you compile a script, AppleScript displays date and time values according to the format specified in System Preferences.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-249110\"></a>\n\n##### Properties of date objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_551\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `date`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_552\"></a>| `day` | | | | |\n|  | Access: | read/write | | |\n|  | Class: | `integer` | | |\n|  | Specifies the day of the month of a `date` object. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_553\"></a>| `weekday` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `constant` | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_554\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_555\"></a>Specifies the day of the week of a `date` object, with one of these constants: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, or `Sunday`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_556\"></a>| `month` | | | | |\n|  | Access: | read/write | | |\n|  | Class: | `constant` | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_557\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_558\"></a>Specifies the month of the year of a `date` object, with one of the constants `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November`, or `December`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_559\"></a>| `year` | | | | |\n|  | Access: | read/write | | |\n|  | Class: | `integer` | | |\n|  | Specifies the year of a `date` object; for example, `2004`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_560\"></a>| `time` | | | | |\n|  | Access: | read/write | | |\n|  | Class: | `integer` | | |\n|  | Specifies the number of seconds since midnight of a `date` object; for example, `2700` is equivalent to 12:45 AM (2700 / 60 seconds = 45 minutes). | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_561\"></a>| `date string` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | A `text` object that specifies the date portion of a `date` object; for example, `\"Friday, November 9, 2007\"`. | | | |\n|  | To obtain a compact version of the date, use `short date string` . For example, `short date string of (current date) --result: \"1/27/08\"`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_562\"></a>| `time string` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | A `text` object that specifies the time portion of a `date` object; for example, `\"3:20:24 PM\"`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_29\"></a>\n\n##### Operators\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_563\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_564\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_565\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_566\"></a>The operators that take `date` object as operands are `&`, `+`, `–`, `=`, `≠`, `&gt;`, `≥`, `&lt;`, `≤`, `comes before`, `comes after`, and `as`. In expressions containing `&gt;`, `≥`, `&lt;`, `≤`, `comes before`, or `comes after`, a later time is greater than an earlier time.\n\nAppleScript supports the following operations on `date` objects with the `+` and `–` operators:\n\n```\ndate + timeDifference\n--result: date\ndate - date\n--result: timeDifference\ndate - timeDifference\n--result: date\n```\n\nwhere `timeDifference` is an `integer` value specifying a time difference in seconds. To simplify the notation of time differences, you can also use one or more of these of these constants:\n\n```\nminutes\n    60\nhours\n    60 * minutes\ndays\n    24 * hours\nweeks\n    7 * days\n```\n\nHere’s an example:\n\n```\ndate \"Friday, November 9, 2007\" + 4 * days + 3 * hours + 2 *  minutes\n--result: date \"Tuesday, November 13, 2007 3:02:00 AM\"\n```\n\nTo express a time difference in more convenient form, divide the number of seconds by the appropriate constant:\n\n```\n31449600 / weeks --result: 52.0\n```\n\nTo get an integral number of hours, days, and so on, use the `div` operator:\n\n```\n151200 div days --result: 1\n```\n\nTo get the difference, in seconds, between the current time and Greenwich mean time, use the `time to GMT` command.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_30\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `date` object to a single-item `list` or a `text` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_31\"></a>\n\n##### Examples\n\nThe following expressions show some options for specifying a date, along with the results of compiling the statements. If you construct a date using only partial information, AppleScript fills in the missing pieces with default values. The actual format is based on the settings in System Preferences.\n\n```\ndate \"8/9/2007, 17:06\"\n     --result: date \"Thursday, August 9, 2007 5:06:00 PM\"\ndate \"7/16/70\"\n     --result: date \"Wednesday, July 16, 2070 12:00:00 AM\"\ndate \"12:06\" -- specifies a time on the current date\n     --result: date \"Friday, November 9, 2007 12:06:00 PM\"\ndate \"Sunday, December 12, 1954 12:06 pm\"\n     --result: date \"Sunday, December 12, 1954 12:06:00 PM\"\n```\n\nThe following statements access various date properties (results depend on the date the statements are executed):\n\n```\nset theDate to current date --using current date command\n--result: date \"Friday, November 9, 2007 11:58:38 AM\"\nweekday of theDate --result: Friday\nday of theDate --result: 9\nmonth of theDate --result: November\nyear of theDate --result: 2007\ntime of theDate --result: 43118 (seconds since 12:00:00 AM)\ntime string of theDate --result: \"11:58:38 AM\"\ndate string of theDate --result: \"Friday, November 9, 2007\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_567\"></a>If you want to specify a time relative to a date, you can do so by using <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_568\"></a>`of`, <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_569\"></a>`relative to`, or <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_570\"></a>`in`, as shown in the following examples.\n\n```\ndate \"2:30 am\" of date \"Jan 1, 2008\"\n    --result: date \"Tuesday, January 1, 2008 2:30:00 AM\"\ndate \"2:30 am\" of date \"Sun Jan 27, 2008\"\n    --result: date \"Sunday, January 27, 2008 2:30:00 AM\"\ndate \"Nov 19, 2007\" relative to date \"3PM\"\n    --result: date \"Monday, November 19, 2007 3:00:00 PM\"\ndate \"1:30 pm\" in date \"April 1, 2008\"\n    --result: date \"Tuesday, April 1, 2008 1:30:00 PM\"\n```\n\n##### Special Considerations\n\nYou can create a `date` object using a string that follows the date format specified in the Formats pane in International preferences. For example, in US English:\n\n```\nset myDate to date \"3/4/2008\"\n```\n\nWhen you compile this statement, it is converted to the following:\n\n```\nset myDate to date \"Tuesday, March 4, 2008 12:00:00 AM\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW17\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_571\"></a>\n\nfile\n\nA reference to a file, folder, or volume in the file system. A `file` object has exactly the same attributes as an `alias` object, with the addition that it can refer to an item that does not exist.\n\nFor related information, see `alias` and `POSIX file`. For a description of the format for a file path, see [Aliases and Files](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW28).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_32\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `file` object to a `text` object or single-item `list`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_33\"></a>\n\n##### Examples\n\n```\nset fp to open for access file \"Leopard:Users:myUser:NewFile\"\nclose access fp\n```\n\n##### Discussion\n\nYou can create a `file` object that refers to a file or folder that does not exist. For example, you can use the `choose file name` command to obtain a `file` object for a file that need not currently exist.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_572\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-250260\"></a>integer\n\nA number without a fractional part.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-250284\"></a>\n\n##### Properties of integer objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_573\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `integer`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_34\"></a>\n\n##### Operators\n\nThe operators that can have `integer` values as operands are `+`, `-`, `*`, `÷` (or `/`), `div`, `mod`, `^`, `=`, `≠`, `&gt;`, `≥`, `&lt;`, and `≤`.\n\nThe `div` operator always returns an `integer` value as its result. The `+`, `–`, `*`, `mod`, and `^` operators return values of type `integer` or `real`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_35\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of an `integer` value to a single-item `list`, a `real` number, or a `text` object.\n\nCoercion of an `integer` to a `number` does nothing:\n\n```\nset myCount to 7 as number\nclass of myCount --result: integer\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_36\"></a>\n\n##### Examples\n\n```\n1\nset myResult to 3 - 2\n-1\n1000\n```\n\n##### Discussion\n\nThe biggest value (positive or negative) that can be expressed as an integer in AppleScript is ±536870911, which is equal to ±(2^29 – 1). Larger integers are converted to real numbers, expressed in exponential notation, when scripts are compiled.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW10\"></a>\n>\n> **Note:** The smallest possible `integer` value is actually -536870912 (-2^29), but it can only be generated as a result of an expression. If you enter it directly into a script, it will be converted to a real when you compile.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_574\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-250569\"></a>list\n\nAn ordered collection of values. The values contained in a list are known as items. Each item can belong to any class.<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_575\"></a>\n\nA list appears in a script as a series of expressions contained within braces and separated by commas. An empty list is a list containing no items. It is represented by a pair of empty braces: `{}`<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_576\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_577\"></a>.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-250594\"></a>\n\n##### Properties of list objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_578\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `list`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_579\"></a>| `length` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `integer` | | |\n|  | Specifies he number of items in the list. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_580\"></a>| `rest` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `list` | | |\n|  | A list containing all items in the list except the first item. <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_581\"></a> | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_582\"></a>| `reverse` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `list` | | |\n|  | A list containing all items in the list, but in the opposite order.<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_583\"></a> | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-250807\"></a>\n\n##### Elements of list objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_584\"></a>| `item` | | | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_3\"></a> A value contained in the list. Each value contained in a list is an item and an item may itself be another list. You can refer to values by their item numbers. For example, `item 2 of {\"soup\", 2, \"nuts\"}` is the integer `2`.  You can also refer to indexed list items by class. For example, `integer 1 of {\"oatmeal\", 42, \"new\"}` returns `42`. | | | |\n\n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_37\"></a>\n\n##### Operators\n\nThe operators that can have list values as operands are `&`, `=`, `≠`, `starts with`, `ends with`, `contains`, and `is contained by`.\n\nFor detailed explanations and examples of how AppleScript operators treat lists, see [Operators Reference](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n##### Commands Handled\n\nYou can count the items in a list or the elements of a specific class in a list with the `count` command. You can also use the `length` property of a list:\n\n```\ncount {\"a\", \"b\", \"c\", 1, 2, 3} --result: 6\nlength of {\"a\", \"b\", \"c\", 1, 2, 3} --result: 6\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_38\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a single-item list to any class to which the item can be coerced if it is not part of a list.\n\nAppleScript also supports coercion of an entire list to a `text` object if each of the items in the list can be coerced to a `text` object, as in the following example:\n\n```\n{5, \"George\", 11.43, \"Bill\"} as text --result: \"5George11.43Bill\"\n```\n\nThe resulting `text` object concatenates all the items, separated by the current value of the AppleScript property `text item delimiters`. This property defaults to an empty string, so the items are simply concatenated. For more information, see [text item delimiters](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW22).\n\nIndividual items in a list can be of any class, and AppleScript supports coercion of any value to a list that contains a single item.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_39\"></a>\n\n##### Examples\n\nThe following statement defines a list that contains a `text` object, an integer, and a Boolean value:\n\n```\n{ \"it's\", 2, true }\n```\n\nEach list item can be any valid expression. The following list has the same value as the previous list:\n\n```\n{ \"it\" & \"'s\", 1 + 1, 4 &gt; 3 }\n```\n\nThe following statements work with lists; note that the concatenation operator (`&`) joins two lists into a single list:<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_585\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_586\"></a>\n\n```\nclass of {\"this\", \"is\", \"a\", \"list\"} --result: list\nitem 3 of {\"this\", \"is\", \"a\", \"list\"} --result: \"a\"\nitems 2 thru 3 of {\"soup\", 2, \"nuts\"} --result: {2, \"nuts\"}\n{\"This\"} & {\"is\", \"a\", \"list\"} --result: {\"This\", \"is\", \"a\", \"list\"}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_587\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_588\"></a>For large lists, it is more efficient to use the `a reference to operator` when inserting a large number of items into a list, rather than to access the list directly. For example, using direct access, the following script takes about 10 seconds to create a list of 10,000 integers (results will vary depending on the computer and other factors):\n\n```\nset bigList to {}\nset numItems to 10000\nset t to (time of (current date)) --Start timing operations\nrepeat with n from 1 to numItems\n    copy n to the end of bigList\n    -- DON'T DO THE FOLLOWING--it's even slower!\n    -- set bigList to bigList & n\nend\nset total to (time of (current date)) - t --End timing\n```\n\nBut the following script, which uses the `a reference to operator`, creates a list of 100,000 integers (ten times the size) in just a couple of seconds (again, results may vary):\n\n```\nset bigList to {}\nset bigListRef to a reference to bigList\nset numItems to 100000\nset t to (time of (current date)) --Start timing operations\nrepeat with n from 1 to numItems\n    copy n to the end of bigListRef\nend\nset total to (time of (current date)) - t --End timing\n```\n\nSimilarly, accessing the items in the previously created list is much faster using `a reference to`—the following takes just a few seconds:\n\n```\nset t to (time of (current date)) --Start timing\nrepeat with n from 1 to numItems -- where numItems = 100,000\n    item n of bigListRef\nend repeat\nset total to (time of (current date)) - t --End timing\n```\n\nHowever, accessing the list directly, even for only 4,000 items, can take over a minute:\n\n```\nset numItems to 4000\nset t to (time of (current date)) --Start timing\nrepeat with n from 1 to numItems\n    item n of bigList\nend repeat\nset total to (time of (current date)) - t --End timing\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_589\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-251399\"></a>number\n\nAn abstract class that can represent an `integer` or a `real`.\n\nThere is never an object whose class is `number`; the actual class of a \"number\" object is always one of the more specific types, `integer` or `real`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-251439\"></a>\n\n##### Properties of number objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_590\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always either `integer` or `real`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_40\"></a>\n\n##### Operators\n\nBecause values identified as values of class `number` are really values of either class `integer` or class `real`, the operators available are the operators described in the definitions of the `integer` or `real` classes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_41\"></a>\n\n##### Coercions Supported\n\nCoercing an object to `number` results in an `integer` object if the result of the coercion is an `integer`, or a `real` object if the result is a non-integer number.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_42\"></a>\n\n##### Examples\n\nAny valid literal expression for an `integer` or a `real` value is also a valid literal expression for a `number` value:\n\n```\n1\n2\n-1\n1000\n10.2579432\n1.0\n1.\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW15\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_591\"></a>\n\nPOSIX file\n\nA pseudo-class equivalent to the `file` class.\n\nThere is never an object whose class is `POSIX file`; the result of evaluating a POSIX file specifier is a `file` object. The difference between `file` and `POSIX file` objects is in how they interpret name specifiers: a `POSIX file` object interprets `\"name\"` as a POSIX path, while a `file` object interprets it as an HFS path.\n\nFor related information, see `alias` and `file`. For a description of the format for a POSIX path, see [Aliases and Files](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW28).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW16\"></a>\n\n##### Properties of POSIX file objects\n\nSee `file`.\n\n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_43\"></a>\n\n##### Coercions Supported\n\nSee `file`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_44\"></a>\n\n##### Examples\n\nThe following example asks the user to specify a file name, starting in the temporary directory `/tmp`, which is difficult to specify using a file specifier:\n\n```\nset fileName to choose file name default location (POSIX file \"/tmp\")\n    -result: dialog starts in /tmp folder\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCJECEC\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_592\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-251651\"></a>real\n\nNumbers that can include a fractional part, such as 3.14159 and 1.0.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-251675\"></a>\n\n##### Properties of real objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_593\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `real`. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_45\"></a>\n\n##### Operators\n\nThe operators that can have `real` values as operands are `+`, `-`, `*`, `÷` (or `/`), `div`, `mod`, `^`, `=`, `≠`, `&gt;`, `≥`, `&lt;`, and `≤`.\n\nThe `÷` and `/` operators always return `real` values as their results. The `+`, `-`, `*`, `mod`, and `^` operators return `real` values if either of their operands is a `real` value.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_46\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `real` value to an `integer` value, rounding any fractional part.\n\nAppleScript also supports coercion of a `real` value to a single-item `list` or a `text` object. Coercion to text uses the decimal separator specified in Numbers in the Formats pane in International preferences.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_47\"></a>\n\n##### Examples\n\n```\n10.2579432\n1.0\n1.\n```\n\nAs shown in the third example, a decimal point indicates a real number, even if there is no fractional part.\n\nReal numbers can also be written using exponential notation. A letter `e` is preceded by a real number (without intervening spaces) and followed by an integer exponent (also without intervening spaces). The exponent can be either positive or negative. To obtain the value, the `real` number is multiplied by 10 to the power indicated by the exponent, as in these examples:\n\n```\n1.0e5 --equivalent to 1.0 * 10^5, or 100000\n1.0e+5 --same as 1.0e5\n1.0e-5 --equivalent to 1.0 * 10^-5, or .00001\n```\n\n##### Discussion\n\nReal numbers that are greater than or equal to 10,000.0 or less than or equal to 0.0001 are converted to exponential notation when scripts are compiled. The largest value that can be evaluated (positive or negative) is 1.797693e+308.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCDGEAH\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_594\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-251978\"></a>record\n\nAn unordered collection of labeled properties. The only AppleScript classes that support user-defined properties are `record` and `script`.\n\nA record appears in a script as a series of property definitions contained within braces and separated by commas. Each property definition consists of a label, a colon, and the value of the property. For example, this is a record with two properties: `{product:\"pen\", price:2.34}`.\n\nEach property in a record has a unique label which distinguishes it from other properties in the collection. The values assigned to properties can belong to any class. You can change the class of a property simply by assigning a value belonging to another class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-252002\"></a>\n\n##### Properties of record objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_595\"></a>| `class` | | | | |\n|  | Access: | read/write | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the record. By default, the value is `record`. | | | |\n|  | If you define a `class` property explicitly in a record, the value you define replaces the implicit `class` value. In the following example, the class is set to `integer`: | | | |\n|  | `set myRecord to {class:integer, min:1, max:10}` | | | |\n|  | `class of myRecord --result: integer` | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_596\"></a>| `length` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `integer` | | |\n|  | Specifies the number of properties in the record. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_48\"></a>\n\n##### Operators\n\nThe operators that can have records as operands are `&`, `=`, `≠`, `contains`, and `is contained by`.\n\nFor detailed explanations and examples of how AppleScript operators treat records, see [Operators Reference](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n##### Commands Handled\n\nYou can count the properties in a record with the `count` command:\n\n```\ncount {name:\"Robin\", mileage:400} --result: 2\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_49\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of records to lists; however, all labels are lost in the coercion and the resulting list cannot be coerced back to a record.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_50\"></a>\n\n##### Examples\n\nThe following example shows how to change the value of a property in a record:\n\n```\nset myRecord to {product:\"pen\", price:2.34}\nproduct of myRecord -- result: \"pen\"\n \nset product of myRecord to \"pencil\"\nproduct of myRecord -- result: \"pencil\"\n```\n\nAppleScript evaluates expressions in a record before using the record in other expressions. For example, the following two records are equivalent:\n\n```\n{ name:\"Steve\", height:76 - 1.5, weight:150 + 20 }\n{ name:\"Steve\", height:74.5, weight:170 }\n```\n\nYou cannot refer to properties in records by numeric index. For example, the following object specifier, which uses the index reference form on a record, is not valid.\n\n```\nitem 2 of { name:\"Rollie\", IQ:186, city:\"Unknown\" } --result: error\n```\n\nYou can access the *length* property of a record to count the properties it contains:\n\n```\nlength of {name:\"Chris\", mileage:1957, city:\"Kalamazoo\"} --result: 3\n```\n\nYou can get the same value with the `count` command:\n\n```\ncount {name:\"Chris\", mileage:1957, city:\"Kalamazoo\"} --result: 3\n```\n\n##### Discussion\n\nAfter you define a record, you cannot add additional properties to it. You can, however, concatenate records. For more information, see `& (concatenation)`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCDJJDE\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_597\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-252489\"></a>reference\n\nAn object that encapsulates an object specifier.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_598\"></a>The result of the `a reference to` operator is a `reference` object, and object specifiers returned from application commands are implicitly turned into `reference` objects.\n\nA `reference` object “wraps” an object specifier. If you target a `reference` object with the `get` command, the command returns the `reference` object itself. If you ask a `reference` object for its `contents` property, it returns the enclosed object specifier. All other requests to a `reference` object are forwarded to its enclosed object specifier. For example, if you ask for the `class` of a `reference` object, you get the `class` of the object specified by its object specifier.\n\nFor related information, see [Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-252730\"></a>\n\n##### Properties of reference objects\n\nOther than the `contents` property, all other property requests are forwarded to the enclosed object specifier, so the reference object appears to have all the properties of the referenced object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_599\"></a>| `contents` | | | | |\n|  | Access: | depends on the referenced object or objects | | |\n|  | Class: | depends on the referenced object or objects | | |\n|  | The enclosed object specifier.<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_600\"></a> | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_51\"></a>\n\n##### Operators\n\nAll operators are forwarded to the enclosed object specifier, so the reference object appears to support all the operators of referenced object.\n\nThe `a reference to` operator returns a reference object as its result.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_52\"></a>\n\n##### Coercions Supported\n\nAll coercions are forwarded to the enclosed object specifier, so the reference object appears to support all the coercions of referenced object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_53\"></a>\n\n##### Examples\n\nReference objects are most often used to specify application objects. The following example creates a reference to a window within the TextEdit application:\n\n```\nset myWindow to a ref to window \"top.rtf\" of application \"TextEdit\"\n--result: window \"top.rtf\" of application \"TextEdit\"\n```\n\nIn subsequent script statements, you can use the variable `myWindow` in place of the longer term `window \"top.rtf\" of application \"TextEdit\"`.\n\nBecause all property requests other than `contents of` are forwarded to its enclosed specifier, the `reference` object appears to have all the properties of the referenced object. For example, both `class of` statements in the following example return `window`:\n\n```\nset myRef to a reference to window 1\nclass of contents of myRef  -- explicit dereference using \"contents of\"\nclass of myRef  -- implicit dereference\n```\n\nFor additional examples, see the `a reference to` operator.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW1\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_601\"></a>\n\nRGB color\n\nA type definition for a three-item list of `integer` values, from 0 to 65535, that specify the red, green, and blue components of a color.<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_602\"></a>\n\nOtherwise, behaves exactly like a `list` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_54\"></a>\n\n##### Examples\n\n```\nset whiteColor to {65535, 65535, 65535} -- white\nset yellowColor to {65535, 65535, 0} -- yellow\nyellowColor as string --result: \"65535655350\"\nset redColor to {65535, 0, 0} -- red\nset userColor to choose color default color redColor\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW5\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_603\"></a>\n\nscript\n\nA collection of AppleScript declarations and statements that can be executed as a group.\n\nThe syntax for a `script` object is described in [Defining Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW2).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW13\"></a>\n\n##### Properties of script objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_604\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `script`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_605\"></a>| `name` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `text` | | |\n|  | The name of the script object, implicitly defined in AppleScript 2.3 and later. For top-level scripts, this is the name of the file the script is saved in, unless explicitly defined otherwise using a property, or, for a top-level script saved as a script bundle, using the Info.plist key `CFBundleName`. Script Editor’s Bundle Contents drawer includes a “Name” field to set this value. For other script objects, it is the name the script was defined with, as text. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_606\"></a>| `id` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `text` | | |\n|  | The unique identifier of the script object, implicitly defined in AppleScript 2.3 and later. Its value is `missing value` unless explicitly defined using a property, or, for a top-level script saved as a script bundle, using the Info.plist key `CFBundleIdentifier`. Script Editor’s Bundle Contents drawer includes an “Identifier” field to set this value. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_607\"></a>| `version` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `text` | | |\n|  | The version of the script object, implicitly defined in AppleScript 2.3 and later. For top-level scripts, its value is `\"1.0\"` unless explicitly defined using a property, or, for a script bundle, using the Info.plist key `CFBundleShortVersionString`. Script Editor’s Bundle Contents drawer includes a “Short Version” field to set this value. For other script objects, its default value is `missing value`. While the version may resemble a number, it is actually of type `text`. For best results, compare version strings using `considering numeric strings`. | | | |\n\n  \n  \n\n##### Commands Handled\n\nYou can copy a `script` object with the `copy` command or create a reference to it with the `set` command.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_55\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of a `script` object to a single-item `list`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_56\"></a>\n\n##### Examples\n\nThe following example shows a simple `script` object that displays a dialog. It is followed by a statement that shows how to run the script:\n\n```\nscript helloScript\n    display dialog \"Hello.\"\nend script\n \nrun helloScript -- invoke the script\n```\n\n##### Discussion\n\nA `script` object can contain other `script` objects, called child scripts, and can have a parent object. For additional information, including more detailed examples, see [Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA).\n\nThe `name`, `id`, and `version` properties are automatically defined in OS X Mavericks v10.9 (AppleScript 2.3) and later, and are used to identify scripts used as libraries, as described in [Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_608\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-253053\"></a>text\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_609\"></a>\n\nAn ordered series of Unicode characters.\n\nStarting in AppleScript 2.0, AppleScript is entirely Unicode-based. There is no longer a distinction between Unicode and non-Unicode text. Comments and text constants in scripts may contain any Unicode characters, and all text processing is done in Unicode, so all characters are preserved correctly regardless of the user’s language preferences.\n\nFor example, the following script works correctly in AppleScript 2.0, where it would not have in previous versions:\n\n```\nset jp to \"日本語\"\nset ru to \"Русский\"\njp & \" and \" & ru -- returns \"日本語 and Русский\"\n```\n\nFor information on compatibility with previous AppleScript versions, including the use of `string` and `Unicode text` as synonyms for `text`, see the Special Considerations section.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-253086\"></a>\n\n##### Properties of text objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_610\"></a>| `class` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `class` | | |\n|  | The class identifier for the object. The value of this property is always `text`. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_611\"></a>| `id` | | | | |\n|  | Access: | read-only | | |\n|  | Class: | `integer` or `list` of integer | | |\n|  | A value (or list of values) representing the Unicode code point (or code points) for the character (or characters) in the `text` object. (A *Unicode code point* is a unique number that represents a character and allows it to be represented in an abstract way, independent of how it is rendered. A character in a `text` object may be composed of one or more code points.) | | | |\n|  | This property, added in AppleScript 2.0, can also be used as an address, which allows mapping between Unicode code point values and the characters at those code points. For example, `id of \"A\"` returns `65`, and `character id 65` returns `\"A\"`. | | | |\n|  | The id of text longer than one code point is a list of integers, and vice versa: for example, `id of \"hello\"` returns `{104, 101, 108, 108, 111}`, and `string id {104, 101, 108, 108, 111}` returns `\"hello\"`. (Because of a bug, `text id ...` does not work; you must use one of `string`, `Unicode text`, or `character`.) | | | |\n|  | These uses of the `id` property obsolete the older `ASCII character` and `ASCII number` commands, since, unlike those, they cover the full Unicode character range and will return the same results regardless of the user's language preferences. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_612\"></a>| `length` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `integer` | | |\n|  | The number of characters in the text. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_613\"></a>| `quoted form` | | | | |\n|  | Access: | read only | | |\n|  | Class: | `text` | | |\n|  | A representation of the text that is safe from further interpretation by the shell, no matter what its contents are. Mainly useful for passing a text string to the `do shell script` command. | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-253199\"></a>\n\n##### Elements of text objects\n\nA `text` object can contain these elements (which may behave differently than similar elements used in applications):\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_614\"></a>| `character` | | | | |\n|  | Specify by: | [Arbitrary](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE), [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH), [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF), [Middle](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFDBA), [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_4\"></a> One or more Unicode characters that make up the text.<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_615\"></a>  Starting in AppleScript 2.0, elements of `text` object count a combining character cluster (also known as a Unicode grapheme cluster) as a single character. (This relates to a feature of Unicode that is unlikely to have an impact on most scripters: some “characters” may be represented as either a single entity or as a base character plus a series of combining marks.  For example, “é” may be encoded as either U+00E9 (LATIN SMALL LETTER E WITH ACUTE) or as U+0065 (LATIN SMALL LETTER E), U+0301 (COMBINING ACUTE ACCENT). Nonetheless, AppleScript 2.0 will count both as one character, where older versions counted the base character and combining mark separately. | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_616\"></a>| `paragraph` | | | | |\n|  | Specify by: | [Arbitrary](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE), [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH), [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF), [Middle](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFDBA), [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_5\"></a> A series of characters beginning immediately after either the first character after the end of the preceding paragraph or the beginning of the text and ending with either a carriage return character (`\\\\r`), a linefeed character (`\\\\n`), a return/linefeed pair (`\\\\r\\\\n`), or the end of the text. The Unicode \"paragraph separator\" character (U+2029) is not supported.  Because `paragraph` elements are *separated* by a carriage return, linefeed, or carriage return/linefeed pair, text ending with a paragraph break specifies a following (empty) paragraph. For example, `\"this\\\\nthat\\\\n\"` has three paragraphs, not two: \"this\", \"that\", and \"\" (the empty paragraph after the trailing linefeed).  Similarly, two paragraph breaks in a row specify an empty paragraph between them:  `paragraphs of \"this\\\\n\\\\nthat\" --result: {\"this\", \"\", \"that\"}` | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_617\"></a>| `text` | | | | |\n|  | Specify by: | [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH), [Name](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCIBAAJ) | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_6\"></a> All of the text contained in the `text` object, including spaces, tabs, and all other characters.  You can use `text` to access contiguous characters (but see also the Discussion section below):  `text 1 thru 5 of \"Bring me the mouse.\" --result: \"Bring\"` | | | |\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_618\"></a>| `word` | | | | |\n|  | Specify by: | [Arbitrary](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE), [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH), [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF), [Middle](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFDBA), [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) | | |\n|  | <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_7\"></a> A continuous series of characters, with word elements parsed according to the word-break rules set in the International preference pane.  Because the rules for parsing words are thus under user control, your scripts should not count on a deterministic text parsing of words. | | | |\n\n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_57\"></a>\n\n##### Operators\n\nThe operators that can have `text` objects as operands are `&`, `=`, `≠`, `&gt;`, `≥`, `&lt;`,` ≤`, `starts with`, `ends with`, `contains`, `is contained by`, and `as`.\n\nIn text comparisons, you can specify whether white space should be considered or ignored. For more information, see `considering and ignoring Statements`.\n\nFor detailed explanations and examples of how AppleScript operators treat `text` objects, see [Operators Reference](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-124070).\n\n##### Special String Characters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_619\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_620\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_621\"></a>The backslash (`\\\\`) and double-quote (`\"`) characters have special meaning in text. AppleScript encloses text in double-quote characters and uses the backslash character to represent return (`\\\\r`), tab (`\\\\t`), and linefeed (\\\\n) characters (described below). So if you want to include an actual backslash or double-quote character in a `text` object, you must use the equivalent two-character sequence. As a convenience, AppleScript also provides the text constant `quote`, which has the value `\\\\\"`. <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_622\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_623\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_624\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW6\"></a>\n\n**Table 6-1**  Special characters in text\n\n| Character | To insert in text |\n| Backslash character (`\\\\`) | `\\\\\\\\` |\n| Double quote (`\"`) | `\\\\\"`  `quote` (text constant) |\n\nTo declare a `text` object that looks like this when displayed:\n\n```\nHe said \"Use the '\\\\' character.\"\n```\n\nyou can use the following:\n\n```\n\"He said \\\\\"Use the '\\\\\\\\' character.\\\\\"\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_625\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_626\"></a>White space refers to text characters that display as vertical or horizontal space. AppleScript defines the white space <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_627\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_628\"></a> constants <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_629\"></a>`return`, <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_630\"></a>`linefeed`, <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_631\"></a>`space`, and <a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_632\"></a>`tab` to represent, respectively, a return character, a linefeed character, a space character, and a tab character. (The `linefeed` constant became available in AppleScript 2.0.)\n\nAlthough you effectively use these values as text constants, they are actually defined as properties of the global constant `AppleScript`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW7\"></a>\n\n**Table 6-2**  White space constants\n\n| Constant | Value |\n| space | \" \" |\n| tab | \"\\\\t\" |\n| return | \"\\\\r\" |\n| linefeed | \"\\\\n” |\n\nTo enter white space in a string, you can just type the character—that is, you can press the Space bar to insert a space, the Tab key to insert a tab character, or the Return key to insert a return. In the latter case, the string will appear on two lines in the script, like the following:\n\n```\ndisplay dialog \"Hello\" & \"\n\" & \"Goodbye\"\n```\n\nWhen you run this script, \"Hello\" appears above “Goodbye” in the dialog.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_633\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_634\"></a>You can also enter a tab, return, or linefeed with the equivalent two-character sequences. When a `text` object containing any of the two-character sequences is displayed to the user, the sequences are converted. For example, if you use the following `text` object in a `display dialog` command:\n\n```\ndisplay dialog \"item 1\\\\t1\\\\ritem 2\\\\t2\"\n```\n\nit is displayed like this (unless you enable “Escape tabs and line breaks in strings” in the Editing tab of the of Script Editor preferences):\n\n```\nitem 1      1\nitem 2      2\n```\n\nTo use the white space constants, you use the concatenation operator to join multiple `text` objects together, as in the following example:\n\n```\n\"Year\" & tab & tab & \"Units sold\" & return & \"2006\" & tab ¬\n    & tab & \"300\" & return & \"2007\" & tab & tab & \"453\"\n```\n\nWhen passed to `display dialog`, this text is displayed as follows:\n\n```\nYear       Units sold\n2006            300\n2007            453\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_58\"></a>\n\n##### Coercions Supported\n\nAppleScript supports coercion of an `text` object to a single-item `list`. If a `text` object represents an appropriate number, AppleScript supports coercion of the `text` object to an integer or a real number.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_59\"></a>\n\n##### Examples\n\nYou can define a `text` object in a script by surrounding text characters with quotation marks, as in these examples:\n\n```\nset theObject to \"some text\"\nset clientName to \"Mr. Smith\"\ndisplay dialog \"This is a text object.\"\n```\n\nSuppose you use the following statement to obtain a `text` object named `docText` that contains all the text extracted from a particular document:\n\n```\nset docText to text of document \"MyFavoriteFish.rtf\" of application \"TextEdit\"\n```\n\nThe following statements show various ways to work with the `text` object `docText`:\n\n```\nclass of docText --result: text\nfirst character of docText --result: a character\nevery paragraph of docText --result: a list containing all paragraphs\nparagraphs 2 thru 3 of docText --result: a list containing two paragraphs\n```\n\nThe next example prepares a `text` object to use with the `display dialog` command. It uses the `quote` constant to insert `\\\\\"` into the text. When this text is displayed in the dialog (above a text entry field), it looks like this: `Enter the text in quotes (\"text in quotes\"): `\n\n```\nset promptString to \"Enter the text in quotes (\" & quote ¬\n    & \"text in quotes\" & quote & \"): \"\ndisplay dialog promptString default answer \"\"\n```\n\nThe following example gets a POSIX path to a chosen folder and uses the `quoted form` property to ensure correct quoting of the resulting string for use with shell commands:\n\n```\nset folderName to quoted form of POSIX path of (choose folder)\n```\n\nSuppose that you choose the folder named `iWork '08` in your `Applications` folder. The previous statement would return the following result, which properly handles the embedded single quote and space characters in the folder name:\n\n```\n\"'/Applications/iWork '\\\\\\\\''08/'\"\n```\n\n##### Discussion\n\nTo get a contiguous range of characters within a `text` object, use the `text` element. For example, the value of the following statement is the `text` object `\"y thi\"`:\n\n```\nget text 3 thru 7 of \"Try this at home\"\n--result: \"y thi\"\n```\n\nThe result of a similar statement using the character element instead of the text element is a list:\n\n```\nget characters 3 thru 7 of \"Try this at home\"\n--result: {\"y\", \" \", \"t\", \"h\", \"i\"}\n```\n\nYou cannot set the value of an element of a `text` object. For example, if you attempt to change the value of the first character of the text object `myName` as shown next, you’ll get an error:\n\n```\nset myName to \"Boris\"\nset character 1 of myName to \"D\"\n--result: error: you cannot set the values of elements of text objects\n```\n\nHowever, you can achieve the same result by getting the last four characters and concatenating them with \"D\":\n\n```\nset myName to \"boris\"\nset myName to \"D\" & (get text 2 through 5 of myName)\n--result: \"Doris\"\n```\n\nThis example doesn’t actually modify the existing `text` object—it sets the variable `myName` to refer to a new `text` object with a different value.\n\n##### Special Considerations\n\nFor compatibility with versions prior to AppleScript 2.0, `string`<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_635\"></a> and `Unicode text`<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_636\"></a> are still defined, but are considered synonyms for `text`. For example, all three of these statements have the same effect:\n\n```\nsomeObject as text\nsomeObject as string\nsomeObject as Unicode text\n```\n\nIn addition, `text`, `string`, and `Unicode text` will all compare as equal. For example, `class of \"foo\" is string` is `true`, even though `class of \"foo\"` returns `text`. However, it is still possible for applications to distinguish between the three different types, even though AppleScript itself does not.\n\nStarting with AppleScript 2.0, there is no style information stored with `text` objects.\n\nBecause all text is Unicode text, scripts now always get the Unicode text behavior. This may be different from the former `string` behavior for some locale-dependent operations, in particular `word` elements. To get the same behavior with 2.0 and pre-2.0, add an explicit `as Unicode text` coercion, for example, `words of (someText as Unicode text)`.\n\nBecause `text item delimiters` (described in [text item delimiters](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW22)) respect `considering` and `ignoring` attributes in AppleScript 2.0, delimiters are case-insensitive by default. Formerly, they were always case-sensitive. To enforce the previous behavior, add an explicit `considering case` statement.\n\nBecause AppleScript 2.0 scripts store all text as Unicode, any text constants count as a use of the former `Unicode text` class, which will work with any version of AppleScript back to version 1.3. A script that contains Unicode-only characters such as Arabic or Thai will run, but will not be correctly editable using versions prior to AppleScript 2.0: the Unicode-only characters will be lost.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW8\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_637\"></a>\n\nunit types\n\nUsed for working with measurements of length, area, cubic and liquid volume, mass, and temperature.\n\nThe unit type classes support simple objects that do not contain other values and have only a single property, the `class` property.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-SW14\"></a>\n\n##### Properties of unit type objects\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_638\"></a>| `class` | | | | |\n|  | Access: | read only | | |\n|  | Class: | (varies; listed below) | | |\n|  | The class identifier for the object. These are the available classes: | | | |\n|  | *Length:* `centimetres`, `centimeters`, `feet`, `inches`, `kilometres`, `kilometers`, `metres`, `meters`, `miles`, `yards` | | | |\n|  | *Area:* `square feet`, `square kilometres`, `square kilometers`, `square metres`, `square meters`, `square miles`, `square yards` | | | |\n|  | *Cubic volume:* `cubic centimetres`, `cubic centimeters`, `cubic feet`, `cubic inches`, `cubic metres`, `cubic meters`, `cubic yards` | | | |\n|  | *Liquid volume:* `gallons`, `litres`, `liters`, `quarts` | | | |\n|  | *Weight:* `grams`, `kilograms`, `ounces`, `pounds` | | | |\n|  | *Temperature:* `degrees Celsius`, `degrees Fahrenheit`, `degrees Kelvin` | | | |\n\n  \n  \n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_60\"></a>\n\n##### Operators\n\nNone. You must explicitly coerce a unit type to a number type before you can perform operations with it.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_61\"></a>\n\n##### Coercions Supported\n\nYou can coerce a unit type object to `integer`, single-item `list`, `real`, or `text`. You can also coerce between unit types in the same category, such as `inches` to `kilometers` (length) or `gallons` to `liters` (liquid volume). As you would expect, there is no coercion between categories, such as from `gallons` to `degrees Centigrade`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_62\"></a>\n\n##### Examples\n\nThe following statements calculate the area of a circle with a radius of 7 yards, then coerce the area to square feet:\n\n```\nset circleArea to (pi * 7 * 7) as square yards --result: square yards 153.9380400259\ncircleArea as square feet --result: square feet 1385.4423602331\n```\n\nThe following statements set a variable to a value of 5.0 square kilometers, then coerce it to various other units of area:\n\n```\nset theArea to 5.0 as square kilometers --result: square kilometers 5.0\ntheArea as square miles --result: square miles 1.930510792712\ntheArea as square meters --result: square meters 5.0E+6\n```\n\nHowever, you cannot coerce an area measurement to a unit type in a different\ncategory:\n\n```\nset theArea to 5.0 as square meters --result: square meters 5.0\ntheArea as cubic meters --result: error\ntheArea as degrees Celsius --result: error\n```\n\nThe following statements demonstrate coercion of a unit type to a `text` object:<a id=\"//apple_ref/doc/uid/TP40000983-CH1g-DontLinkElementID_639\"></a>\n\n```\nset myPounds to 2.2 as pounds --result: pounds 2.2\nset textValue to myPounds as text --result: \"2.2\"\n```\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html", "sha256": "ee18e86312e424b8163e9ddfd6b4c2b0c577d16690159fbd5e4d39cfb4ec66ac", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_cmds.md", "title": "Commands Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW59\"></a>\n\n# Commands Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_640\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_641\"></a>This chapter describes the commands available to perform actions in AppleScript scripts. For information on how commands work, see [Commands Overview](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW8).\n\nThe commands described in this chapter are available to any script—they are either built into the AppleScript language or added to it through the standard scripting additions (described in [Scripting Additions](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW3)).\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW67\"></a>\n>\n> **Note:** In the command descriptions below, if the first item in the Parameters list does not include a parameter name, it is the direct parameter of the command (described in [Direct Parameter](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW13)).\n\nTable 7-1 lists each command according to the suite (or related group) of commands to which it belongs and provides a brief description. Detailed command descriptions follow the table, in alphabetical order.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-CHDCCDDB\"></a>\n\n**Table 7-1**  AppleScript commands\n\n| Command | Description |\n| *AppleScript suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_642\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_643\"></a> |  |\n| `activate` | Brings an application to the front, and opens it if it is on the local computer and not already running. |\n| `log` | In Script Editor, displays a value in the Event Log History window or in the Event Log pane of a script window. |\n| *Clipboard Commands suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_644\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_645\"></a> |  |\n| `clipboard info` | Returns information about the clipboard. |\n| `set the clipboard to` | Places data on the clipboard. |\n| `the clipboard` | Returns the contents of the clipboard. |\n| *File Commands suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_646\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_647\"></a> |  |\n| `info for` | Returns information for a file or folder. |\n| `list disks` | Returns a list of the currently mounted volumes.  *Deprecated* Use `tell application \"System Events\" to get the name of every disk`. |\n| `list folder` | Returns the contents of a specified folder.  *Deprecated* Use `tell application \"System Events\" to get the name of every disk item of ...`. |\n| `mount volume` | Mounts the specified AppleShare volume. |\n| `path to (application)` | Returns the full path to the specified application. |\n| `path to (folder)` | Returns the full path to the specified folder. |\n| `path to resource` | Returns the full path to the specified resource. |\n| *File Read/Write suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_648\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_649\"></a> |  |\n| `close access` | Closes a file that was opened for access. |\n| `get eof` | Returns the length, in bytes, of a file. |\n| `open for access` | Opens a disk file for the `read` and `write` commands. |\n| `read` | Reads data from a file that has been opened for access. |\n| `set eof` | Sets the length, in bytes, of a file. |\n| `write` | Writes data to a file that was opened for access with write permission. |\n| *Internet suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_650\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_651\"></a> |  |\n| `open location` | Opens a URL with the appropriate program. |\n| *Miscellaneous Commands suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_652\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_653\"></a> |  |\n| `current date` | Returns the current date and time. |\n| `do shell script` | Executes a shell script using the `sh` shell. |\n| `get volume settings` | Returns the sound output and input volume settings. |\n| `random number` | Generates a random number. |\n| `round` | Rounds a number to an integer. |\n| `set volume` | Sets the sound output and/or input volume. |\n| `system attribute` | Gets environment variables or attributes of this computer. |\n| `system info` | Returns information about the system. |\n| `time to GMT` | Returns the difference between local time and GMT (Universal Time). |\n| *Scripting suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_654\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_655\"></a> |  |\n| `load script` | Returns a `script` object loaded from a file. |\n| `run script` | Runs a script or script file |\n| `scripting components` | Returns a list of all scripting components. |\n| `store script` | Stores a `script` object into a file. |\n| *Standard suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_656\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_657\"></a> |  |\n| `copy` | Copies one or more values into variables. |\n| `count` | Counts the number of elements in an object. |\n| `get` | Returns the value of a script expression or an application object. |\n| `launch` | Launches the specified application without sending it a `run` command. |\n| `run` | For an application, launches it. For a script application, launches it and sends it the `run` command. For a script script object, executes its `run` handler. |\n| `set` | Assigns one or more values to one or more script variables or application objects. |\n| *String Commands suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_658\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_659\"></a> |  |\n| `ASCII character` | Converts a number to a character.  *Deprecated* starting in AppleScript 2.0. Use the `id` property of the `text` class instead. |\n| `ASCII number` | Converts a character to its numeric value.  *Deprecated* starting in AppleScript 2.0. Use the `id` property of the `text` class instead. |\n| `localized string` | Returns the localized string for the specified key. |\n| `offset` | Finds one piece of text inside another. |\n| `summarize` | Summarizes the specified text or text file. |\n| *User Interaction suite*<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_660\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_661\"></a> |  |\n| `beep` | Beeps one or more times. |\n| `choose application` | Allows the user to choose an application. |\n| `choose color` | Allows the user to choose a color. |\n| `choose file` | Allows the user to choose a file. |\n| `choose file name` | Allows the user to specify a new file reference. |\n| `choose folder` | Allows the user to choose a folder. |\n| `choose from list` | Allows the user to choose one or more items from a list. |\n| `choose remote application` | Allows the user to choose a running application on a remote machine. |\n| `choose URL` | Allows the user to specify a URL. |\n| `delay` | Pauses for a fixed amount of time. |\n| `display alert` | Displays an alert. |\n| `display dialog` | Displays a dialog box, optionally requesting user input. |\n| `display notification` | Displays a notification. |\n| `say` | Speaks the specified text. |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW60\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_662\"></a>\n\nactivate\n\nBrings an application to the front, launching it if necessary.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_63\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW68\"></a>`activate` | | *application* | required |\n\n##### Parameters\n\n*application*\n:   The application to activate.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_64\"></a>\n\n##### Examples\n\n```\nactivate application \"TextEdit\"\ntell application \"TextEdit\" to activate\n```\n\n##### Discussion\n\nThe `activate` command does not launch applications on remote machines. For examples of other ways to specify an application, see the `application` class and [Remote Applications](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW9).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW21\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_663\"></a>\n\nASCII character\n\nReturns the character for a specified number.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_65\"></a>\n>\n> **Important:** This command is deprecated starting in AppleScript 2.0—use the `id` property of the `text` class instead.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_66\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW50\"></a>`ASCII character` | | *integer* | required |\n\n##### Parameters\n\n*[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The character code, an integer between 0 and 255.\n\n##### Result\n\nA `text` object containing the character that corresponds to the specified number.\n\nSignals an error if *integer* is out of range.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_67\"></a>\n\n##### Examples\n\n```\nset theChar to ASCII character 65 --result: \"A\"\nset theChar to ASCII character 194 --result: \"¬\"\nset theChar to ASCII character 2040 --result: invalid range error\n```\n\n##### Discussion\n\nThe name “ASCII” is something of a misnomer. `ASCII character` uses the primary text encoding, as determined by the user’s language preferences, to map between integers and characters. If the primary language is English, the encoding is Mac OS Roman, if it is Japanese, the encoding is MacJapanese, and so on. For integers below 128, this is generally the same as ASCII, but for integers from 128 to 255, the results vary considerably.\n\nBecause of this unpredictability, `ASCII character` and `ASCII number` are deprecated starting in AppleScript 2.0. Use the `id` property of the `text` class instead, since it always uses the same encoding, namely Unicode.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW22\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_664\"></a>\n\nASCII number\n\nReturns the number associated with a specified character.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_68\"></a>\n>\n> **Important:** This command is deprecated starting in AppleScript 2.0—use the `id` property of the `text` class instead.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_69\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW69\"></a>`ASCII number` | | *text* | required |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A `text` object containing at least one character. If there is more than one character, only the first one is used.\n\n##### Result\n\nThe character code of the specified character as an integer.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_70\"></a>\n\n##### Examples\n\n```\nset codeValue to ASCII number \"¬\" --result: 194\n```\n\n##### Discussion\n\nThe result of `ASCII number` depends on the user’s language preferences; see the Discussion section of `ASCII character` for details.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW1\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_665\"></a>\n\nbeep\n\nPlays the system alert sound one or more times.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_71\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW70\"></a>`beep` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW71\"></a> | | *integer* | optional |\n\n##### Parameters\n\n*[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   Number of times to beep.\n\n*Default Value:*\n:   `1`\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_72\"></a>\n\n##### Examples\n\nAudible alerts can be useful when no one is expected to be looking at the screen:\n\n```\nbeep 3 --result: three beeps, to get attention\ndisplay dialog \"Something is amiss here!\" -- to show message\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW2\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_666\"></a>\n\nchoose application\n\nAllows the user to choose an application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_73\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW72\"></a>`choose application` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW73\"></a>`with title` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW74\"></a>`with prompt` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW75\"></a>`multiple selections allowed` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW76\"></a>`as` | | *class* | optional |\n\n##### Parameters\n\n`with title` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   Title text for the dialog.\n\n*Default Value:*\n:   `\"Choose Application\"`\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A prompt to be displayed in the dialog.\n\n*Default Value:*\n:   `\"Select an application:\"`\n\n`multiple selections allowed` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow multiple items to be selected? If `true`, the results will be returned in a list, even if there is exactly one item.\n\n*Default Value:*\n:   `false`\n\n`as` *class* ( *[application](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW2)* | *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* )\n:   Specifies the desired class of the result. If specified, the value must be one of `application` or `alias`.\n\n*Default Value:*\n:   `application`\n\n##### Result\n\nThe selected application, as either an `application` or `alias` object; for example, `application \"TextEdit\"`. If multiple selections are allowed, returns a list containing one item for each selected application, if any.\n\nSignals a “user canceled” error if the user cancels the dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_74\"></a>\n\n##### Examples\n\n```\nchoose application with prompt \"Choose a web browser:\"\nchoose application with multiple selections allowed\nchoose application as alias\n```\n\n##### Discussion\n\nThe `choose application` dialog initially presents a list of all applications registered with the system. To choose an application not in that list, use the Browse button, which allows the user to choose an application anywhere in the file system.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW3\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_671\"></a>\n\nchoose color\n\nAllows the user to choose a color from a color picker dialog.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_75\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW77\"></a>`choose color` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW78\"></a>`default color` | | *RGB color* | optional |\n\n##### Parameters\n\n`default color` *[RGB color](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW1)*\n:   The color to show when the color picker dialog is first opened.\n\n*Default Value:*\n:   `{0, 0, 0}`: black.\n\n##### Result\n\nThe selected color, represented as a list of three integers from 0 to 65535 corresponding to the red, green, and blue components of a color; for example, {0, 65535, 0} represents green.\n\nSignals a “user canceled” error if the user cancels the `choose color` dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_76\"></a>\n\n##### Examples\n\nThis example lets the user choose a color, then uses that color to set the background color in their home folder (when it is in icon view):\n\n```\ntell application \"Finder\"\n    tell icon view options of window of home\n        choose color default color (get background color)\n        set background color to the result\n    end tell\nend tell\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW4\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_673\"></a>\n\nchoose file\n\nAllows the user to choose a file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_77\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW58\"></a>`choose file` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW79\"></a>`with prompt` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW80\"></a>`of type` | | *list of text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW81\"></a>`default location` | | *alias* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW82\"></a>`invisibles` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW83\"></a>`multiple selections allowed` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW84\"></a>`showing package contents` | | *boolean* | optional |\n\n##### Parameters\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The prompt to be displayed in the dialog.\n\n*Default Value:*\n:   None; no prompt is displayed.\n\n`of type` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* of *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A list of Uniform Type Identifiers (UTIs); for example, `{\"public.html\", \"public.rtf\"}`. Only files of the specified types will be selectable. For a list of system-defined UTIs, see *[Uniform Type Identifiers Overview](https://developer.apple.com/library/archive/../../FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html#//apple_ref/doc/uid/TP40001319)*. To get the UTI for a particular file, use `info for`. <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW85\"></a> **Note:** Four-character file type codes, such as `\"PICT\"` or `\"MooV\"`, are also supported, but are deprecated. To get the file type code for a particular file, use `info for`.\n\n*Default Value:*\n:   None; any file can be chosen.\n\n`default location` *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)*\n:   The folder to begin browsing in.\n\n*Default Value:*\n:   Browsing begins in the last selected location, or, if this is the first invocation, in the user’s `Documents` folder.\n\n`invisibles` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Show invisible files and folders?\n\n*Default Value:*\n:   `true`: This is only for historical compatibility reasons. Unless you have a specific need to choose invisible files, you should always use `invisibles false`.\n\n`multiple selections allowed` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow multiple items to be selected? If `true`, the results will be returned in a list, even if there is exactly one item.\n\n*Default Value:*\n:   `false`\n\n`showing package contents` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Show the contents of packages? If `true`, packages are treated as folders, so that the user can choose a file inside a package (such as an application).\n\n*Default Value:*\n:   `false`. Manipulating the contents of packages is discouraged unless you control the package format or the package itself.\n\n##### Result\n\nThe selected file, as an `alias`. If multiple selections are allowed, returns a list containing one `alias` for each selected file, if any.\n\nSignals a “user canceled” error if the user cancels the dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_78\"></a>\n\n##### Examples\n\n```\nset aFile to choose file with prompt \"HTML or RTF:\" ¬\n    of type {\"public.html\", \"public.rtf\"} invisibles false\n```\n\nA UTI can specify a general class of files, not just a specific format. The following script allows the user to choose any image file, whether its format is `JPEG`, `PNG`, `GIF`, or whatever. It also uses the `default location` parameter combined with `path to (folder)` to begin browsing in the user’s `Pictures` folder:\n\n```\nset picturesFolder to path to pictures folder\nchoose file of type \"public.image\" with prompt \"Choose an image:\" ¬\n    default location picturesFolder invisibles false\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW5\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_680\"></a>\n\nchoose file name\n\nAllows the user to specify a new filename and location. This does not create a file—rather, it returns a file specifier that can be used to create a file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_79\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW86\"></a>`choose file name` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW87\"></a>`with prompt` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW88\"></a>`default name` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW89\"></a>`default location` | | *alias* | optional |\n\n##### Parameters\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The prompt to be displayed near the top of the dialog.\n\n*Default Value:*\n:   `\"Specify new file name and location\"`\n\n`default name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The default file name.\n\n*Default Value:*\n:   `\"untitled\"`\n\n`default location` *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)*\n:   The default file location. See `choose file` for examples.\n\n*Default Value:*\n:   Browsing starts in the last location in which a search was made or, if this is the first invocation, in the user’s `Documents` folder.\n\n##### Result\n\nThe selected location, as a `file`. For example:\n\n` file \"HD:Users:currentUser:Documents:untitled\"`\n\nSignals a “user canceled” error if the user cancels the dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_80\"></a>\n\n##### Examples\n\nThe following example supplies a non-default prompt and search location:\n\n```\nset fileName to choose file name with prompt \"Save report as:\" ¬\ndefault name \"Quarterly Report\" ¬\ndefault location (path to desktop folder)\n```\n\n##### Discussion\n\nIf you choose the name of a file or folder that exists in the selected location, `choose file name` offers the choice of replacing the chosen item. However, choosing to replace does not actually replace the item.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW6\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_684\"></a>\n\nchoose folder\n\nAllows the user to choose a directory, such as a folder or a disk.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_81\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW90\"></a>`choose folder` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW91\"></a>`with prompt` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW92\"></a>`default location` | | *alias* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW93\"></a>`invisibles` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW94\"></a>`multiple selections allowed` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW95\"></a>`showing package contents` | | *boolean* | optional |\n\n##### Parameters\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The prompt to be displayed in the dialog.\n\n*Default Value:*\n:   None; no prompt is displayed.\n\n`default location` *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)*\n:   The folder to begin browsing in.\n\n*Default Value:*\n:   Browsing begins in the last selected location, or, if this is the first invocation, in the user’s `Documents` folder.\n\n`invisibles` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Show invisible folders?\n\n*Default Value:*\n:   `false`\n\n`multiple selections allowed` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow multiple items to be selected? If `true`, the results will be returned in a list, even if there is exactly one item.\n\n*Default Value:*\n:   `false`\n\n`showing package contents` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Show the contents of packages? If `true`, packages are treated as folders, so that the user can choose a package folder, such as an application, or a folder inside a package.\n\n*Default Value:*\n:   `false`. Manipulating the contents of packages is discouraged unless you control the package format or the package itself.\n\n##### Result\n\nThe selected directory, as an `alias`. If multiple selections are allowed, returns a list containing one `alias` for each selected directory, if any.\n\nSignals a “user canceled” error if the user cancels the `choose folder` dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_82\"></a>\n\n##### Examples\n\nThe following example specifies a prompt and allows multiple selections:\n\n```\nset foldersList to choose folder ¬\n    with prompt \"Select as many folders as you like:\" ¬\n    with multiple selections allowed\n```\n\nThe following example gets a POSIX path to a chosen folder and uses the `quoted form` property (of the `text` class) to ensure correct quoting of the resulting string for use with shell commands:\n\n```\nset folderName to quoted form of POSIX path of (choose folder)\n```\n\nSuppose that you choose the folder named `iWork '08` in your `Applications` folder. The previous statement would return the following result, which properly handles the embedded single quote and space characters in the folder name:\n\n```\n\"'/Applications/iWork '\\\\\\\\''08/'\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW7\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_690\"></a>\n\nchoose from list\n\nAllows the user to choose items from a list.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_83\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW96\"></a>`choose from list` | | *list* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW97\"></a>`with title` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW98\"></a>`with prompt` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW99\"></a>`default items` | | *list* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW100\"></a>`OK button name` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW101\"></a>`cancel button name` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW102\"></a>`multiple selections allowed` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW103\"></a>`empty selection allowed` | | *boolean* | optional |\n\n##### Parameters\n\n*[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* (of *[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)* or *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   A list of numbers and/or `text` objects for the user to choose from.\n\n`with title` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   Title text for the dialog.\n\n*Default Value:*\n:   None; no title is displayed.\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The prompt to be displayed in the dialog.\n\n*Default Value:*\n:   `\"Please make your selection:\"`\n\n`default items` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* (of *[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)* or *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   A list of numbers and/or `text` objects to be initially selected. The list cannot include multiple items unless you also specify `multiple selections allowed true`. If an item in the default items list is not in the list to choose from, it is ignored.\n\n*Default Value:*\n:   None; no items are selected.\n\n`OK button name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of the OK button.\n\n*Default Value:*\n:   `\"OK\"`\n\n`cancel button name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of the Cancel button.\n\n*Default Value:*\n:   `\"Cancel\"`\n\n`multiple selections allowed` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow multiple items to be selected?\n\n*Default Value:*\n:   `false`\n\n`empty selection allowed` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow the user to choose OK with no items selected? If `false`, the OK button will not be enabled unless at least one item is selected.\n\n*Default Value:*\n:   `false`\n\n##### Result\n\nIf the user clicks the OK button, returns a `list` of the chosen `number` and/or `text` items; if empty selection is allowed and nothing is selected, returns an empty list (`{}`). If the user clicks the Cancel button, returns `false`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_84\"></a>\n\n##### Examples\n\nThis script selects from a list of all the people in Address Book who have defined birthdays, and gets the birthday of the selected one. Notice the `if the result is not false` test (`choose from list` returns `false` if the user clicks Cancel) and the `set aName to item 1 of the result` (`choose from list` returns a list, even if it contains only one item).\n\n```\ntell application \"Address Book\"\n    set bDayList to name of every person whose birth date is not missing value\n    choose from list bDayList with prompt \"Whose birthday would you like?\"\n    if the result is not false then\n        set aName to item 1 of the result\n        set theBirthday to birth date of person named aName\n        display dialog aName & \"'s birthday is \" & date string of theBirthday\n    end if\nend tell\n```\n\n##### Discussion\n\nFor historical reasons, `choose from list` is the only dialog command that returns a result (`false`) instead of signaling an error when the user presses the “Cancel” button.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW8\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_698\"></a>\n\nchoose remote application\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_699\"></a>Allows the user to choose a running application on a remote machine.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_85\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW104\"></a>`choose remote application` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW105\"></a>`with title` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW106\"></a>`with prompt` | | *text* | optional |\n\n##### Parameters\n\n`with title` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   Title text for the `choose remote application` dialog.\n\n*Default Value:*\n:   None; no title is displayed.\n\n`with prompt` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The prompt to be displayed in the dialog.\n\n*Default Value:*\n:   `\"Select an application:\"`\n\n##### Result\n\nThe selected application, as an `application` object.\n\nSignals a “user canceled” error if the user cancels the dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_86\"></a>\n\n##### Examples\n\n```\nset myApp to choose remote application with prompt \"Choose a remote web browser:\"\n```\n\n##### Discussion\n\nThe user may choose a remote machine using <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_702\"></a>Bonjour or by entering a specific IP address. There is no way to limit the precise kind of application returned, so either limit your script to generic operations or validate the user’s choice. If you want your script to send application-specific commands to the resulting application, you will need a using terms from statement.\n\nFor information on targeting other machines, see [Remote Applications](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW9).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW9\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_703\"></a>\n\nchoose URL\n\nAllows the user to specify a URL.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_87\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW107\"></a>`choose URL` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW108\"></a>`showing` | | *listOfServiceTypesOrTextStrings* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW109\"></a>`editable URL` | | *boolean* | optional |\n\n##### Parameters\n\n`showing` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* (of service types or *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   A list that specifies the types of services to show, if available. The list can contain one or more of the following service types, or one or more `text` objects representing Bonjour service types (described below), or both: * `Web servers`: shows `http` and `https` services * `FTP Servers`: shows `ftp` services * `Telnet hosts`: shows `telnet` services * `File servers`: shows `afp`, `nfs`, and `smb` services * `News servers`: shows `nntp` services * `Directory services`: shows `ldap` services * `Media servers`: shows `rtsp` services * `Remote applications`: shows `eppc` services A `text` object is interpreted as a Bonjour service type—for example, `\"_ftp._tcp\"` represents the file transfer protocol. These types are listed in [Technical Q&A 1312: Bonjour service types used in OS X](http://developer.apple.com/qa/qa2001/qa1312.html).<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_705\"></a>\n\n*Default Value:*\n:   `File servers`\n\n`editable URL` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Allow user to type in a URL? If you specify `editable URL false`, the text field in the dialog is inactive. `choose URL` does not attempt to verify that the user-entered text is a valid URL. Your script should be prepared to verify the returned value.\n\n*Default Value:*\n:   `true`: the user can enter a text string. If `false`, the user is restricted to choosing an item from the Bonjour-supplied list of services.\n\n##### Result\n\nThe URL for the service, as a `text` object. This result may be passed to `open location` or to any application that can handle the URL, such as a browser for `http` URLs.\n\nSignals a “user canceled” error if the user cancels the dialog. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_88\"></a>\n\n##### Examples\n\nThe following script asks the user to choose an URL, either by typing in the text input field or choosing one of the Bonjour-located servers:\n\n```\nset myURL to choose URL\ntell application Finder to open location myURL\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW26\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_707\"></a>\n\nclipboard info\n\nReturns information about the current clipboard contents.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_89\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW110\"></a>`clipboard info` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW111\"></a>`for` | | *class* | optional |\n\n##### Parameters\n\n`for` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   Restricts returned information to only this data type.\n\n*Default Value:*\n:   None; returns information for all types of data as a list of lists, where each list represents a scrap flavor.\n\n##### Result\n\nA `list` containing one entry `{class, size}` for each type of data on the clipboard. To retrieve the actual data, use the `the clipboard` command.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_90\"></a>\n\n##### Examples\n\n```\nclipboard info\nclipboard info for Unicode text\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW29\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_709\"></a>\n\nclose access\n\nCloses a file opened with the `open for access` command.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_91\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW112\"></a>`close access` | | *fileSpecifier* | required |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* | *file descriptor* )\n:   The alias or file specifier or integer file descriptor of the file to close. A file descriptor must be obtained as the result of an earlier `open for access` call.\n\n##### Result\n\nNone.\n\nSignals an error if the specified file is not open.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_92\"></a>\n\n##### Examples\n\nYou should always close files that you open, being sure to account for possible errors while using the open file:\n\n```\nset aFile to choose file\nset fp to open for access aFile\ntry\n    --file reading and writing here\non error e number n\n    --deal with errors here and don't resignal\nend\nclose access fp\n```\n\n##### Discussion\n\nAny files left open will be automatically closed when the application exits.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW53\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_710\"></a>\n\ncopy\n\nCopies one or more values, storing the result in one or more variables. This command only copies AppleScript values, not application-defined objects.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_93\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW113\"></a>`copy` | | *expression* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW114\"></a>`to` | | *variablePattern* | required |\n\n##### Parameters\n\n*expression*\n:   The expression whose value is to be copied.\n\n`to` *variablePattern*\n:   The name of the variable or pattern of variables in which to store the value or pattern of values. Patterns may be lists or records.\n\n##### Result\n\nThe new copy of the value.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_94\"></a>\n\n##### Examples\n\nAs mentioned in the Discussion, `copy` creates an independent copy of the original value, and it creates a deep copy. For example:\n\n```\nset alpha to {1, 2, {\"a\", \"b\"}}\ncopy alpha to beta\nset item 2 of item 3 of alpha to \"change\" --change the original list\nset item 1 of beta to 42 --change a different item in the copy\n{alpha, beta}\n--result: {{1, 2, {\"a\", \"change\"}}, {42, 2, {\"a\", \"b\"}}}\n```\n\nEach variable reflects only the changes that were made directly to that variable. Compare this with the similar example in `set`.\n\nSee the `set` command for examples of using variable patterns. The behavior is the same except that the values are copied.\n\n##### Discussion\n\nThe `copy` command may be used to assign new values to existing variables, or to define new variables. See [Declaring Variables with the copy Command](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW8) for additional details.\n\nUsing the `copy` command creates a new value that is independent of the original—a subsequent change to that value does not change the original value. The copy is a “deep” copy, so sub-objects, such as lists within lists, are also copied. Contrast this with the behavior of the `set` command.\n\nWhen using `copy` with an object specifier, the specifier itself is the value copied, not the object in the target application that it refers to. `copy` therefore copies the object specifier, but does not affect the application data at all. To copy the object in the target application, use the application’s `duplicate` command, if it has one.\n\n##### Special Considerations\n\nThe syntax `put` *expression* `into` *variablePattern* is also supported, but is deprecated. It will be transformed into the `copy` form when you compile the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW55\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_712\"></a>\n\ncount\n\nCounts the number of elements in another object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_95\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW115\"></a>`(count \\| number of)` | | *expression* | required |\n\n##### Parameters\n\n*expression*\n:   An expression that evaluates to an object with elements, such as a `list`, `record`, or application-defined container object. `count` will count the contained elements.\n\n##### Result\n\nThe number of elements, as an `integer`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_96\"></a>\n\n##### Examples\n\nIn its simplest form, `count`, or the equivalent pseudo-property `number`, counts the `item` elements of a value. This may be an AppleScript value, such as a list:\n\n```\nset aList to {\"Yes\", \"No\", 4, 5, 6}\ncount aList  --result: 5\nnumber of aList  --result: 5\n```\n\n…or an application-defined object that has `item` elements:\n\n```\ntell application \"Finder\" to count disk 1  --result: 4\n```\n\nIf the value is an object specifier that evaluates to a list, `count` counts the items of that list. This may be an [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH) specifier:\n\n```\ncount every integer of aList  --result: 3\ncount words of \"hello world\"  --result: 2\ntell application \"Finder\" to count folders of disk 1  --result: 4\n```\n\n…or a [Filter](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BAJJHEFE) specifier:\n\n```\ntell application \"Finder\"\n    count folders of disk 1 whose name starts with \"A\"  --result: 1\nend tell\n```\n\n…or similar. For more on object specifiers, see [Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW39\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_713\"></a>\n\ncurrent date\n\nReturns the current date and time.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_97\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW116\"></a>`current date` | |  | required |\n\n##### Result\n\nThe current date and time, as a `date` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_98\"></a>\n\n##### Examples\n\n```\ncurrent date  --result: date \"Tuesday, November 13, 2007 11:13:29 AM\"\n```\n\nSee the `date` class for information on how to access the properties of a date, such as the day of the week or month.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW10\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_714\"></a>\n\ndelay\n\nWaits for a specified number of seconds.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_99\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW117\"></a>`delay` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW118\"></a> | | *number* | optional |\n\n##### Parameters\n\n*[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)*\n:   The number of seconds to delay. The number may be fractional, such as `0.5` to delay half a second.\n\n*Default Value:*\n:   `0`\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_100\"></a>\n\n##### Examples\n\n```\nset startTime to current date\ndelay 3  --delay for three seconds\nset elapsedTime to ((current date) - startTime)\ndisplay dialog (\"Elapsed time: \" & elapsedTime & \" seconds\")\n```\n\n##### Discussion\n\n`delay` does not make any guarantees about the actual length of the delay, and it cannot be more precise than 1/60th of a second. `delay` is not suitable for real-time tasks such as audio-video synchronization.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW11\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_715\"></a>\n\ndisplay alert\n\nDisplays a standardized alert containing a message, explanation, and from one to three buttons.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_101\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW119\"></a>`display alert` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW120\"></a>`message` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW121\"></a>`as` | | *alertType* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW122\"></a>`buttons` | | *list* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW123\"></a>`default button` | | *buttonSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW124\"></a>`cancel button` | | *buttonSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW125\"></a>`giving up after` | | *integer* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The alert text, which is displayed in emphasized system font.\n\n`message` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   An explanatory message, which is displayed in small system font, below the alert text.\n\n`as` *alertType*\n:   The type of alert to show. You can specify one of the following alert types: * `informational`: the standard alert dialog * `warning`: the alert dialog dialog is badged with a warning icon * `critical`: currently the same as the standard alert dialog\n\n*Default Value:*\n:   `informational`\n\n`buttons` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* (of *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   A list of up to three button names. If you supply one name, a button with that name serves as the default and is displayed on the right side of the alert dialog. If you supply two names, two buttons are displayed on the right, with the second serving as the default button. If you supply three names, the first is displayed on the left, and the next two on the right, as in the case with two buttons.\n\n*Default Value:*\n:   `{\"OK\"}`: One button labeled “OK”, which is the default button.\n\n`default button` ( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* or *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* )\n:   The name or number of the default button. This may be the same as the cancel button.\n\n*Default Value:*\n:   The rightmost button.\n\n`cancel button` ( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* or *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* )\n:   The name or number of the cancel button. See “Result” below. This may be the same as the default button.\n\n*Default Value:*\n:   None; there is no cancel button.\n\n`giving up after` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The number of seconds to wait before automatically dismissing the alert.\n\n*Default Value:*\n:   None; the dialog will wait until the user clicks a button.\n\n##### Result\n\nIf the user clicks a button that was not specified as the cancel button, `display alert` returns a record that identifies the button that was clicked—for example, `{button returned: \"OK\"}`. If the command specifies a `giving up after` value, the record will also contain a `gave up:false` item.\n\nIf the `display alert` command specifies a `giving up after` value, and the dialog is dismissed due to timing out before the user clicks a button, the command returns a record indicating that no button was returned and the command gave up: `{button returned:\"\", gave up:true}`\n\nIf the user clicks the specified cancel button, the command signals a “user canceled” error. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_102\"></a>\n\n##### Examples\n\n```\nset alertResult to display alert \"Insert generic warning here.\" ¬\n    buttons {\"Cancel\", \"OK\"} as warning ¬\n    default button \"Cancel\" cancel button \"Cancel\" giving up after 5\n```\n\nFor an additional example, see the Examples section for the `try` statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW12\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_722\"></a>\n\ndisplay dialog\n\nDisplays a dialog containing a message, one to three buttons, and optionally an icon and a ﬁeld in which the user can enter text.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_103\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW126\"></a>`display dialog` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW127\"></a>`default answer` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW128\"></a>`hidden answer` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW129\"></a>`buttons` | | *list* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW130\"></a>`default button` | | *labelSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW131\"></a>`cancel button` | | *labelSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW132\"></a>`with title` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW133\"></a>`with icon` | | *resourceSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW134\"></a>`with icon` | | *iconTypeSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW135\"></a>`with icon` | | *fileSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW136\"></a>`giving up after` | | *integer* | optional |\n\n##### Parameters\n\n*text*\n:   The dialog text, which is displayed in emphasized system font.\n\n`default answer` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The initial contents of an editable text field. This edit field is not present unless this parameter is present; to have the field present but blank, specify an empty string: `default answer \"\"`\n\n*Default Value:*\n:   None; there is no edit field.\n\n`hidden answer` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   If true, any text in the edit field is obscured as in a password dialog: each character is displayed as a bullet.\n\n*Default Value:*\n:   `false`: text in the edit field is shown in cleartext.\n\n`buttons` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* (of *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   A list of up to three button names.\n\n*Default Value:*\n:   If you don’t specify any buttons, by default, Cancel and OK buttons are shown, with the OK button set as the default button. If you specify any buttons, there is no default or cancel button unless you use the following parameters to specify them.\n\n`default button` ( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* | *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* )\n:   The name or number of the default button. This button is highlighted, and will be pressed if the user presses the Return or Enter key.\n\n*Default Value:*\n:   If there are no buttons specified using `buttons`, the OK button. Otherwise, there is no default button.\n\n`cancel button` ( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* | *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* )\n:   The name or number of the cancel button. This button will be pressed if the user presses the Escape key or Command-period.\n\n*Default Value:*\n:   If there are no buttons specified using `buttons`, the Cancel button. Otherwise, there is no cancel button.\n\n`with title` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The dialog window title.\n\n*Default Value:*\n:   None; no title is displayed.\n\n`with icon` ( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* | *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* )\n:   The resource name or ID of the icon to display.\n\n`with icon` ( *stop | note | caution* )\n:   The type of icon to show. You may specify one of the following constants: * `stop` (or `0`): Shows a stop icon * `note` (or `1`): Shows the application icon * `caution` (or `2`): Shows a warning icon, badged with the application icon\n\n`with icon` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies a `.icns` file.\n\n`giving up after` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The number of seconds to wait before automatically dismissing the dialog.\n\n*Default Value:*\n:   None; the dialog will wait until the user presses a button.\n\n##### Result\n\nA record containing the button clicked and text entered, if any. For example:\n\n`{text returned:\"Cupertino\", button returned:\"OK\"}`\n\nIf the dialog does not allow text input, there is no `text returned` item in the returned record.\n\nIf the user clicks the specified cancel button, the command signals a “user canceled” error. For an example of how to handle such errors, see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973).\n\nIf the `display dialog` command specifies a `giving up after` value, and the dialog is dismissed due to timing out before the user clicks a button, it returns a record indicating that no button was returned and the command gave up: `{button returned:\"\", gave up:true}`\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_104\"></a>\n\n##### Examples\n\nThe following example shows how to use many of the parameters to a `display dialog` command, how to process possible returned values, and one way to handle a user cancelled error. The dialog displays two buttons and prompts a user to enter a name, giving up if they do not make a response within fifteen seconds. It shows one way to handle the case where the user cancels the dialog, which results in AppleScript signaling an “error” with the error number -128. The script uses additional `display dialog` commands to show the flow of logic and indicate where you could add statements to handle particular outcomes.\n\n```\nset userCanceled to false\ntry\n    set dialogResult to display dialog ¬\n        \"What is your name?\" buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\" cancel button \"Cancel\" ¬\n        giving up after 15 ¬\n        default answer (long user name of (system info))\non error number -128\n    set userCanceled to true\nend try\n \nif userCanceled then\n    -- statements to execute when user cancels\n    display dialog \"User cancelled.\"\nelse if gave up of dialogResult then\n    -- statements to execute if dialog timed out without an answer\n    display dialog \"User timed out.\"\nelse if button returned of dialogResult is \"OK\" then\n    set userName to text returned of dialogResult\n    -- statements to process user name\n    display dialog \"User name: \" & userName\nend if\nend\n```\n\nThe following example displays a dialog that asks for a password. It supplies a default answer of `\"wrong\"`, and specifies that the default answer, as well as any text entered by the user, is hidden (displayed as a series of bullets). It gives the user up to three chances to enter a correct password.\n\n```\nset prompt to \"Please enter password:\"\nrepeat 3 times\n    set dialogResult to display dialog prompt ¬\n        buttons {\"Cancel\", \"OK\"} default button 2 ¬\n        default answer \"wrong\" with icon 1 with hidden answer\n    set thePassword to text returned of dialogResult\n    if thePassword = \"magic\" then\n        exit repeat\n    end if\nend repeat\nif thePassword = \"magic\" or thePassword = \"admin\" then\n    display dialog \"User entered valid password.\"\nend if\n```\n\nThe password text is copied from the return value `dialogResult`. The script doesn’t check for a user cancelled error, so if the user cancels AppleScript stops execution of the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW224\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_733\"></a>\n\ndisplay notification\n\nPosts a notification using the Notification Center, containing a title, subtitle, and explanation, and optionally playing a sound.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_105\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW225\"></a>`display notification` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW226\"></a>`with title` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW227\"></a>`subtitle` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW228\"></a>`sound name` | | *text* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The body text of the notification. At least one of this and the title must be specified.\n\n`with title` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The title of the notification. At least one of this and the body text must be specified.\n\n`subtitle` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The subtitle of the notification.\n\n`sound name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of a sound to play when the notification appears. This may be the base name of any sound installed in `Library/Sounds`.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_106\"></a>\n\n##### Examples\n\n```\ndisplay notification \"Encoding complete\" subtitle \"The encoded files are in the folder \" & folderName\n```\n\n##### Discussion\n\nExactly how the notification is presented is controlled by the “Notifications” preferences in System Preferences. Users may opt to display a reduced form of notification, turn off the sound, or even not display them at all.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW40\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_737\"></a>\n\ndo shell script\n\nExecutes a shell script using the `sh` shell.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_107\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW137\"></a>`do shell script` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW138\"></a>`as` | | *class* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW139\"></a>`administrator privileges` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW140\"></a>`user name` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW141\"></a>`password` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW142\"></a>`altering line endings` | | *boolean* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The shell script to execute.\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   Specifies the desired type of the result. The raw bytes returned by the command will be interpreted as the specified class.\n\n*Default Value:*\n:   `«class utf8»`: UTF-8 text. If there is no *as* parameter and the output is not valid UTF-8, the output will be interpreted as text in the primary encoding.\n\n`administrator privileges` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Execute the command as the administrator? Once a script is correctly authenticated, it will not ask for authentication again for five minutes. The elevated privileges and the grace period do not extend to any other scripts or to the rest of the system. For security reasons, you may not tell another application to `do shell script with administrator privileges`. Put the command outside of any `tell` block, or put it inside a `tell me` block.\n\n*Default Value:*\n:   `false`\n\n`user name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of an administrator account. You can avoid a password dialog by specifying a name in this parameter and a password in the `password` parameter. If you specify a user name, you must also specify a password.\n\n`password` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   An administrator password, typically used in conjunction with the administrator specified by the `user name` parameter. If `user name` is omitted, it is assumed to be the current user.\n\n`altering line endings` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Should the `do shell script` command change all line endings in the command output to Mac-style and trim a trailing one? For example, the result of `do shell script \"echo foo; echo bar\"` is `\"foo\\\\rbar\"`, not the `\"foo\\\\nbar\\\\n\"` that the shell script actually returned.\n\n*Default Value:*\n:   `true`\n\n##### Result\n\nThe output of the shell script.\n\nSignals an error if the shell script exits with a non-zero status. The error number will be the status, the error message will be the contents of stderr.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_108\"></a>\n\n##### Examples\n\n```\ndo shell script \"uptime\"\n```\n\n##### Discussion\n\nFor additional documentation and examples of the `do shell script` command, see Technical Note TN2065, [do shell script in AppleScript](http://developer.apple.com/technotes/tn2002/tn2065.html).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW56\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_743\"></a>\n\nget\n\nEvaluates an object specifier and returns the result.\n\nThe command name `get` is typically optional—expressions that appear as statements or operands are automatically evaluated as if they were preceded by `get`. However, `get` can be used to force early evaluation of part of an object specifier.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_109\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW143\"></a>`get` | | *specifier* | required |\n|  | `as` | *class* | optional |\n\n##### Parameters\n\n*specifier*\n:   An object specifier to be evaluated. If the specifier refers to an application-defined object, the `get` command is sent to that application. Technically, all values respond to `get`, but for all values other than object specifiers, `get` is an identity operation: the result is the exact same value.\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   The desired class for the returned data. If the data is not of the desired type, AppleScript attempts to coerce it to that type.\n\n*Default Value:*\n:   None; no coercion is performed.\n\n##### Result\n\nThe value of the evaluated expression. See [Reference Forms](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-120522) for details on what the results of evaluating various object specifiers are.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_110\"></a>\n\n##### Examples\n\n`get` can get properties or elements of AppleScript-defined objects, such as lists:\n\n```\nget item 1 of {\"How\", \"are\", \"you?\"}  --result: \"How\"\n```\n\n…or of application-defined objects:\n\n```\ntell application \"Finder\" to get name of home  --result: \"myname\"\n```\n\nAs noted above, the `get` is generally optional. For example, these statements are equivalent to the above two:\n\n```\nitem 1 of {\"How\", \"are\", \"you?\"}  --result: \"How\"\ntell application \"Finder\" to name of home  --result: \"myname\"\n```\n\nHowever, an explicit `get` can be useful for forcing early evaluation of part of an object specifier. Consider:\n\n```\ntell application \"Finder\" to get word 1 of name of home\n--Finder got an error: Can’t get word 1 of name of folder \"myname\" of folder \"Users\" of startup disk.\n```\n\nThis fails because Finder does not know about elements of `text`, such as `words`. AppleScript does, however, so the script has to make Finder get only the `name of ...` part:\n\n```\ntell application \"Finder\" to get word 1 of (get name of home)\n--result: \"myname\"\n```\n\nThe explicit `get` forces that part of the specifier to be evaluated; Finder returns a `text` result, from which AppleScript can then get `word 1`.\n\nFor more information on specifiers, see [Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW30\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_745\"></a>\n\nget eof\n\nReturns the length of a file, in bytes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_111\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW63\"></a>`get eof` | | *fileSpecifier* | required |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* | *file descriptor* )\n:   The file to obtain the length for, as an alias, a file specifier, or an `integer` file descriptor. A file descriptor must be obtained as the result of an earlier `open for access` call.\n\n##### Result\n\nThe logical size of the file, that is, the length of its contents in bytes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_112\"></a>\n\n##### Examples\n\nThis example obtains an alias to a desktop picture folder and uses `get eof` to obtain its length:\n\n```\nset desktopPicturesFolderPath to ¬\n     (path to desktop pictures folder as text) & \"Flow 1.jpg\" as alias\n--result: alias \"Leopard:Library:Desktop Pictures:Flow 1.jpg\"\nget eof desktopPicturesFolderPath --result: 531486\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW41\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_746\"></a>\n\nget volume settings\n\nReturns the sound output and input volume settings.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_113\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW144\"></a>`get volume settings` | |  | required |\n\n##### Result\n\nA record containing the sound output and input volume settings. All the integer settings are between 0 (silent) and 100 (full volume):\n\n`output volume` (an `integer` )\n:   The base output volume.\n\n`input volume` (an `integer` )\n:   The input volume.\n\n`alert volume` (an `integer` )\n:   The alert volume. 100 for this setting means “as loud as the output volume.”\n\n`output muted` (a `boolean` )\n:   Is the output muted? If true, this overrides the output and alert volumes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_114\"></a>\n\n##### Examples\n\n```\nset volSettings to get volume settings\n--result: {output volume:43, input volume:35, alert volume:78, output muted:false}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW14\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_747\"></a>\n\ninfo for\n\nReturn information for a file or folder.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_115\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW65\"></a>`info for` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW145\"></a>`size` | | *boolean* | optional |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An alias or file specifier for the file or folder.\n\n`size` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Return the size of the file or folder? For a file, its “size” is its length in bytes; for a folder, it is the sum of the sizes of all the files the folder contains.\n\n*Default Value:*\n:   `true`: Because getting the size of a folder requires getting the sizes of all the files inside it, `size true` may take a long time for large folders such as `/System`. If you do not need the size, ask to not get it using `size false`. Alternatively, target the Finder or System Events applications to ask for the specific properties you want.\n\n##### Result\n\nA record containing information about the specified file or folder, with the following fields. Some fields are only present for certain kinds of items:\n\n`name` (a `text` object)\n:   The item’s full name, as it appears in the file system. This always includes the extension, if any. For example, `\"OmniOutliner Professional.app\"`.\n\n`displayed name` (a `text` object)\n:   The item’s name as it appears in Finder. This may be different than the `name` if the extension is hidden or if the item has a localized name. For example, `\"OmniOutliner Professional\"`.\n\n`short name` ( a `text` object, applications only)\n:   The application’s `CFBundleName`, which is the name displayed in the menu bar when the application is active. This is often, but not always, the same as the displayed name. For example, `\"OmniOutliner Pro\"`.\n\n`name extension` (a `text` object)\n:   The extension part of the item name. For example, the name extension of the file “`foo.txt`” is `\"txt\"`.\n\n`bundle identifier` (a `text` object)\n:   The package’s bundle identifier. If the package is an application, this is the application’s `id`.\n\n`type identifier` (a `text` object)\n:   The item’s type, as a Uniform Type Identifier (UTI). This is the preferred form for identifying item types, and may be used with `choose file`.\n\n`kind` (a `text` object)\n:   The item’s type, as displayed in Finder. This may be localized, and should only be used for display purposes.\n\n`default application` (an `alias` object)\n:   The application that will open this item.\n\n`creation date` (a `date` object)\n:   The date the item was created.\n\n`modification date` (a `date` object)\n:   The date the item was last modified. Folder modification dates do not change when an item inside them changes, though they do change when an item is added or removed.\n\n`file type` (a `text` object)\n:   The item’s type, as a four-character code. This is the classic equivalent of the type identifier, but less accurate and harder to interpret; use `type identifier` if possible.\n\n`file creator` (a `text` object)\n:   The item’s four-character creator code. For applications, this is the classic equivalent of the bundle identifier, and will work for referencing an application by id. For files, this can be used to infer the default application, but not reliably; use `default application` if possible.\n\n`short version` (a `text` object)\n:   The item’s short version string, as it appears in a Finder “Get Info” window. Any item may have this attribute, but typically only applications do.\n\n`long version` (a `text` object)\n:   The item’s long version string, as it appears in a Finder “Get Info” window. Any item may have this attribute, but typically only applications do.\n\n`size` (an `integer` )\n:   The item’s size, in bytes. For more details, see the `size` parameter.\n\n`alias` (a `boolean` )\n:   Is the item an alias file?\n\n`folder` (a `boolean` )\n:   Is the item a folder? This is true for packages, such as application packages, as well as normal folders.\n\n`package folder` (a `boolean` )\n:   Is the item a package folder, such as an application? A package folder appears in Finder as if it is a file.\n\n`extension hidden` (a `boolean` )\n:   Is the item’s name extension hidden?\n\n`visible` (a `boolean` )\n:   Is the item visible? Typically, only special system files are invisible.\n\n`locked` (a `boolean` )\n:   Is the item locked?\n\n`busy status` (a `boolean` )\n:   Is the item currently in use? If `true`, the item is reliably busy. If `false`, the item may still be busy, because this status may not be supported by some applications or file systems.\n\n`folder window` (rectangle, folders only)\n:   The folder’s window’s bounding rectangle, as list of four integers: {top, left, bottom, right}.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_116\"></a>\n\n##### Examples\n\n```\nset downloadsFolder to path to downloads folder\n    --result: alias \"HD:Users:me:Downloads:\"\ninfo for downloadsFolder\n    --result: {name:\"Downloads\", folder:true, alias:false, ...}\n```\n\n##### Special Considerations\n\nBecause `info for` returns so much information, it can be slow, and because it only works on one file at a time, it can be difficult to use. The recommended technique is to use System Events or Finder to ask for the particular properties you want.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW51\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_749\"></a>\n\nlaunch\n\nLaunches an application, if it is not already running, but does not send it a `run` command.\n\nIf an application is already running, sending it a `launch` command has no effect. That allows you to open an application without performing its usual startup procedures, such as opening a new window or, in the case of a script application, running its script. For example, you can use the `launch` command when you don’t want an application to open and close visibly. This is less useful in AppleScript 2.0, which launches applications as hidden by default (even with the `run` command).\n\nSee the `application` class reference for information on how to use an `application` object’s `is running` property to determine if it is running without having to launch it.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_117\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW146\"></a>`launch` | | *application* | required |\n\n##### Parameters\n\n*application*\n:   The application to launch.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_118\"></a>\n\n##### Examples\n\n```\nlaunch application \"TextEdit\"\ntell application \"TextEdit\" to launch\n```\n\n##### Discussion\n\nThe `launch` command does not launch applications on remote machines. For examples of other ways to specify an application, see the `application` class.\n\nMany applications also support the `reopen` <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_750\"></a>command, which reactivates a running application or launches it if it isn’t running. If the application is already running, this command has the same effect as double-clicking the application icon in the Finder. Each application determines how it will implement the `reopen` command—some may perform their usual startup procedures, such as opening a new window, while others perform no additional operations.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW15\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_751\"></a>\n\nlist disks\n\nReturns the names of the currently mounted volumes.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_119\"></a>\n>\n> **Important:** This command is deprecated; use `tell application \"System Events\" to get the name of every disk`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_120\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW147\"></a>`list disks` | |  | required |\n\n##### Result\n\nA `list` of text objects, one for each currently mounted volume.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW16\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_752\"></a>\n\nlist folder\n\nReturns the names of the items in a specified folder.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_121\"></a>\n>\n> **Important:** This command is deprecated; use `tell application \"System Events\" to get the name of every disk item of ...`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_122\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW148\"></a>`list folder` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW149\"></a>`invisibles` | | *boolean* | optional |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   Specifies the folder to list.\n\n`invisibles` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Show invisible files and folders?\n\n*Default Value:*\n:   `true`\n\n##### Result\n\nA `list` of `text` objects, one for each item in the specified folder.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW35\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_754\"></a>\n\nload script\n\nReturns a `script` object loaded from a specified file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_123\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW150\"></a>`load script` | | *fileSpecifier* | required |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies a `script` object. The file must be a compiled script (with extension `scpt`) or script bundle (with extension `scptd`).\n\n##### Result\n\nThe `script` object. You can get this object’s properties or call its handlers as if it were a local `script` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_124\"></a>\n\n##### Examples\n\nFor examples, see [Parameter Specifications](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW12) in [About Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW23\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_755\"></a>\n\nlocalized string\n\nReturns the localized text for the specified key.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_125\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW151\"></a>`localized string` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW152\"></a>`from table` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW219\"></a>`in bundle` | | *fileSpecifier* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The key for which to obtain the localized text.\n\n`from table` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of the strings file excluding the `.strings` suffix.\n\n*Default Value:*\n:   `\"Localizable\"`\n\n`in bundle` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies the strings file.\n\n*Default Value:*\n:   The current script bundle for a document-based script (a `scptd` bundle); otherwise, the current application.\n\n##### Result\n\nA `text` object containing the localized text, or the original key if there is no localized text for that key.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_126\"></a>\n\n##### Examples\n\nIn order for `localized string` to be useful, you must create localized string data for it to use:\n\n1. Save your script as an application bundle or script bundle.\n2. Create `lproj` folders in the `Resources` directory of the bundle for each localization: for example, `English.lproj`, `French.lproj`. Create files named `Localized.strings` in each one. When you are done, the folder structure should look like this:\n\n   <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW48\"></a>\n\n   **Figure 7-1**  Bundle structure with localized string data\n\n   ![Bundle structure with localized string data](https://developer.apple.com/library/archive/applescript-language-guide/Art/localizedStringLayout_2x.png)\n3. Add key/value pairs to each Localized.strings file. Each pair is a line of text `\"`*key*`\" = \"`*value*`\";`, for example:\n\n   <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW218\"></a>\n\n   **Figure 7-2**  Key/value pair for localized string data\n\n   ![Key/value pair for localized string data](https://developer.apple.com/library/archive/applescript-language-guide/Art/localizableStringData_2x.png)\n\nNow `localized string` will return the appropriate values, as defined in your files. For example, when running in French:\n\n```\nlocalized string \"hello\"  --result: \"bonjour\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW49\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_758\"></a>\n\nlog\n\nIn Script Editor, displays a value in the Event Log History window or in the Event Log pane of a script window.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_127\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW220\"></a>`log` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW221\"></a> | | *value* | optional |\n\n##### Parameters\n\n*value*\n:   The value to display. Expressions are evaluated but object specifiers are not resolved. The displayed value is enclosed in block comment characters—for example, `(*window 1*)`. If you do not specify a value, `log` will display just the comment characters: `(**)`.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_128\"></a>\n\n##### Examples\n\nThe following shows a simple use of logging:\n\n```\nset area to 7 * 43 as square feet\nlog area -- result (in Event Log pane): (*square feet 301.0*)\n```\n\nLog statements can be useful for tracking a script’s progress. For an example that shows how to log statements in a repeat loop, see [Logging](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW17).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW17\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_759\"></a>\n\nmount volume\n\nMounts the specified network volume.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_129\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW153\"></a>`mount volume` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW154\"></a>`on server` | | *text* | (see parameter description) |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW155\"></a>`in AppleTalk zone` | | *text* | (see parameter description) |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW156\"></a>`as user name` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW157\"></a>`with password` | | *text* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name or URL (for example, `afp://server/volume/`) of the volume to mount.\n\n`on server` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The server on which the volume resides; omit if URL path provided in direct parameter.\n\n`in AppleTalk zone` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The AppleTalk zone in which the server resides; omit if URL path provided.\n\n`as user name` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The user name with which to log in to the server; omit for guest access.\n\n`with password` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The password for the user name; omit for guest access.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_130\"></a>\n\n##### Examples\n\n```\nmount volume \"afp://myserver.com/\" -- guest access\nmount volume \"http://idisk.mac.com/myname/Public\"\nmount volume \"http://idisk.mac.com/somebody\" ¬\n    as user name \"myname\" with password \"mypassword\"\n```\n\n##### Discussion\n\nThe `mount volume` command can connect to any file server that is supported by the Finder Connect To... command, including Windows (smb), Samba, and FTP servers. On some kinds of servers, the `as user name` and `with password` parameters may not bypass the login dialog, but encoding the name and password in the URL (for example, `smb://myname:passwd@server.domain.com/sharename`) will mount it silently.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW24\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_764\"></a>\n\noffset\n\nFinds one piece of text inside another.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_131\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW158\"></a>`offset` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW159\"></a>`of` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW160\"></a>`in` | | *text* | required |\n\n##### Parameters\n\n`of` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The source text to find the position of.\n\n`in` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The target text to search in.\n\n##### Result\n\nAn `integer` value indicating the position, in characters, of the source text in the target, or 0 if not found.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_132\"></a>\n\n##### Examples\n\n```\nset myString to \"Yours, mine, and ours\"\noffset of \"yours\" in myString  --result: 1, because case is ignored by default\noffset of \"mine\" in myString  --result: 8\noffset of \"theirs\" in myString  --result: 0, because \"theirs\" doesn't appear\nconsidering case\n    offset of \"yours\" in myString -- result: 0, because case is now considered\nend considering\n```\n\n##### Discussion\n\n`offset` compares text as the `equals` operator does, including `considering` and `ignoring` conditions. The values returned are counted the same way `character` elements of `text` are counted—for example, `offset of \"c\" in \"école\"` is always `2`, regardless of whether `\"école\"` is in Normalization Form C or D. The result of matching part of a character cluster is undefined.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW31\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_767\"></a>\n\nopen for access\n\nOpens a file for reading and writing.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_133\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW62\"></a>`open for access` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW161\"></a>`write permission` | | *boolean* | optional |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies the file to open. You can only use an alias if the file exists.\n\n`write permission` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Should writing to the file be allowed?\n\n*Default Value:*\n:   `false`: `write` and `set eof` commands on this file will fail with an error.\n\n##### Result\n\nA file descriptor, as an `integer`. This file descriptor may be used with any of the other file commands: `read`, `write`, `get eof`, `set eof`, and `close access`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_134\"></a>\n\n##### Examples\n\nThe following example opens a file named \"NewFile\" in the specified location `path to desktop`, but does not ask for write access:\n\n```\nset theFile to (path to desktop as text) & \"NewFile\"\nset referenceNumber to open for access theFile\n```\n\nTo open the file with write access, you would substitute the following line:\n\n```\nset referenceNumber to open for access theFile with write permission\n```\n\n##### Discussion\n\nOpening a file using `open for access` is not the same as opening a file using Finder. It is “open” only in the sense that AppleScript has access to read (and optionally write) its contents; it does not appear in one of the target application’s windows, and it does not even have to be one of the target application’s files. `open for access` and the associated file commands (`read`, `write`, `get eof`, `set eof`) are typically used with text files. They can also read and write arbitrary binary data, but this is not recommended unless you create the file yourself or have detailed knowledge of the file format.\n\nCalling `open for access` on a file returns an integer, termed a *file descriptor*, which represents an open communication channel to the file’s data. This file descriptor remains open until the script calls `close access` on it (or on the same file). Each file descriptor maintains a *file pointer*, which marks the current position within the file and is initially set to the beginning of the file. `read` and `write` commands begin reading or writing at the file pointer, unless instructed otherwise using a `from` or `starting at` parameter, and advance the file pointer by the number of bytes read or written, so the next operation will begin where the previous one left off.\n\nA single file may be opened more than once, and therefore have several different file descriptors. Each file descriptor maintains its own file pointer, and each must be closed separately. If you open more than one channel at once with write permission, behavior is unspecified.\n\nIt is not strictly necessary to use `open for access`—all the other file commands can accept an alias; if the file is not open, they will open it, do the operation, and then close it. Explicitly opening and closing the file does have two potential advantages, however.\n\nOne is performance: if you are performing a number of operations on the same file, opening and closing it repeatedly could become expensive. It is cheaper to explicitly open the file, do the work, and then explicitly close it.\n\nTwo is ease of sequential read and write operations: because the file pointer tracks the progress through the file, reading or writing several pieces of data from the same file is a simple matter. Doing the same thing without using the file pointer requires calculating the data size yourself, which is not even possible in some cases.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW54\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_769\"></a>\n\nopen location\n\nOpens a URL with the appropriate program.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_135\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW61\"></a>`open location` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW162\"></a>`error reporting` | | *boolean* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The URL to open.\n\n`error reporting` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   This parameter exists only for historical reasons; it is no longer supported.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_136\"></a>\n\n##### Examples\n\nThis example opens an Apple web page:\n\n```\nopen location \"http://www.apple.com\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW18\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_771\"></a>\n\npath to (application)\n\nReturns the location of the specified application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_137\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW66\"></a>`path to` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW163\"></a> | | *application* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW164\"></a>`as` | | *class* | optional |\n\n##### Parameters\n\n*application*\n:   The application to locate. See the `application` class reference for possible ways to specify an application. You may also use one of the following identifiers: `current application` : The application executing the script, such as Script Editor. `frontmost application` : The frontmost application. `me` : The script itself. For script applications, this is the same as `current application`, but for script documents, it is the location of the document. <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW165\"></a> **Note:** Some older applications may treat `me` identically to `current application`. `it` : The application of the current target.\n\n*Default Value:*\n:   `it`\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)* ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   The class of the returned location. If specified, must be one of `alias` or `text`.\n\n*Default Value:*\n:   `alias`\n\n##### Result\n\nThe location of the specified application, as either an `alias` or a `text` object containing the path.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_138\"></a>\n\n##### Examples\n\n```\npath to application \"TextEdit\"\n    --result: alias \"Leopard:Applications:TextEdit.app:\"\npath to  --result: alias \"Leopard:Applications:AppleScript:Script Editor.app:\"\npath to me  --result: same as above\npath to it  --result: same as above\npath to frontmost application  --result: same as above\npath to current application\n    --result: same, but could be different for a script application\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW19\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_773\"></a>\n\npath to (folder)\n\nReturns the location of the specified special folder.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_139\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW166\"></a>`path to` | | *folder constant* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW167\"></a>`from` | | *domain constant* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW168\"></a>`as` | | *class* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW169\"></a>`folder creation` | | *boolean* | optional |\n\n##### Parameters\n\n*folder constant*\n:   The special folder for which to return the path. You may specify one of the following folders: ``` application support applications folder desktop desktop pictures folder documents folder downloads folder favorites folder Folder Action scripts fonts help home folder internet plugins keychain folder library folder modem scripts movies folder music folder pictures folder preferences printer descriptions public folder scripting additions scripts folder services folder shared documents shared libraries sites folder startup disk startup items system folder system preferences temporary items trash users folder utilities folder workflows folder ``` The following folders are also defined, but are only meaningful when used with `from Classic domain`: ``` apple menu control panels control strip modules extensions launcher items folder printer drivers printmonitor shutdown folder speakable items stationery voices ```\n\n`from` *domain constant*\n:   The domain in which to look for the specified folder. You may specify one of the following domains: `system domain` : A folder in `/System`. `local domain` : A folder in `/Library`. `network domain` : A folder in `/Network`. `user domain` : A folder in `~`, the user’s home folder. `Classic domain` : A folder in the Classic Mac OS system folder. Only meaningful on systems that support Classic.\n\n*Default Value:*\n:   The default domain for the specified folder. This varies depending on the folder.\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)* ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* )\n:   The class of the returned location.\n\n*Default Value:*\n:   `alias`\n\n`folder creation` *boolean*\n:   Create the folder if it doesn’t exist? Your script may not have permission to create the folder (for example, asking to create something in the system domain), so your script should be prepared for that error.\n\n*Default Value:*\n:   `true`\n\n##### Result\n\nThe location of the specified folder, as either an `alias` or a `text` object containing the path.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_140\"></a>\n\n##### Examples\n\n```\npath to desktop --result: alias \"Leopard:Users:johndoe:Desktop:\"\npath to desktop as string --result: \"Leopard:Users:johndoe:Desktop:\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW20\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_777\"></a>\n\npath to resource\n\nReturns the location of the specified resource.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_141\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW170\"></a>`path to resource` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW171\"></a>`in bundle` | | *fileSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW172\"></a>`in directory` | | *text* | optional |\n\n##### Parameters\n\n*text*\n:   The name of the requested resource.\n\n`in bundle` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies the bundle containing the resource.\n\n*Default Value:*\n:   The current script bundle for a document-based script (a `scptd` bundle); otherwise, the current application.\n\n`in directory` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The name of a subdirectory in the bundle’s `Resources` directory.\n\n##### Result\n\nThe location of the specified resource, as an `alias`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_142\"></a>\n\n##### Examples\n\nThe following example shows how you can get the path to a `.icns` file—in this case, in the Finder application.\n\n```\ntell application \"Finder\"\nset gearIconPath to path to resource \"Gear.icns\"\nend\n--result: alias \"HD:System:Library:CoreServices:Finder.app:Contents:Resources:Gear.icns\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW42\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_780\"></a>\n\nrandom number\n\nReturns a random number.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_143\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW173\"></a>`random number` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW174\"></a>`from` | | *number* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW175\"></a>`to` | | *number* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW176\"></a>`with seed` | | *number* | optional |\n\n##### Parameters\n\n`from` *[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)*\n:   The lowest number to return. Can be negative.\n\n*Default Value:*\n:   0.0\n\n`to` *[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)*\n:   The highest number to return. Can be negative.\n\n*Default Value:*\n:   1.0\n\n`with seed` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   An initial seed for the random number generator. Once called with any particular seed value, `random number` will always generate the same sequence of numbers. This can be useful when testing randomized algorithms: you can force it to behave the same way every time.\n\n##### Result\n\nA number between the `from` and `to` limits, including the limit values. Depending on the limit values, the result may be an integer or a real. If at least one limit is specified, and all specified limits are integers, the result is an integer. Otherwise, the result is a real, and may have a fractional part.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_144\"></a>\n\n##### Examples\n\n```\nrandom number  --result: 0.639215561057\nrandom number from 1 to 10  --result: 8\n```\n\n##### Discussion\n\nRandom numbers are, by definition, random, which means that you may get the same number twice (or even more) in a row, especially if the range of possible numbers is small.\n\nThe numbers generated are only pseudo-random, and are not considered cryptographically secure.\n\nIf you need to select one of a set of objects in a relationship, use `some` *object* rather than *object* `(random number from 1 to count` *objects*`)`. See the [Arbitrary](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE) reference form for more details.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW32\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_784\"></a>\n\nread\n\nReads data from a file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_145\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW177\"></a>`read` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW178\"></a>`from` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW179\"></a>`for` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW180\"></a>`to` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW181\"></a>`before` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW182\"></a>`until` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW183\"></a>`using delimiters` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW184\"></a>`as` | | *class* | optional |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* | *file descriptor* )\n:   The file to read from, as an alias, a file specifier, or an `integer` file descriptor. A file descriptor must be obtained as the result of an earlier `open for access` call.\n\n`from` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The byte position in the file to start reading from. The position is 1-based, so `1` is the first byte of the file, `2` the second, and so on. Negative integers count from the end of the file, so `-1` is the last byte, `-2` the second-to-last, and so on.\n\n*Default Value:*\n:   The current file pointer (see `open for access`) if the file is open, or the beginning of the file if not.\n\n`for` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The number of bytes to read.\n\n*Default Value:*\n:   Read until the end of the file.\n\n`to` ( *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* | *eof* )\n:   Stop reading at this byte position in the file; use `eof` to indicate the last byte. The position is 1-based, like the `from` parameter.\n\n`before` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A single character; read up to the next occurrence of that character. The *before* character is also read, but is not part of the result, so the next `read` will start just after it.\n\n`until` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A single character; read up to and including the next occurrence of that character.\n\n`using delimiter` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   A delimiter, such as a tab or return character, used to separate the data read into a list of text objects. The resulting items consist of the text between occurrences of the delimiter text. The delimiter is considered a separator, so a leading or trailing delimiter will produce an empty string on the other side. For example, the result of reading `\"axbxcx\"` using a delimiter of `\"x\"` would be `{\"a\", \"b\", \"c\", \"\"}`.\n\n*Default Value:*\n:   None; `read` returns a single item.\n\n`using delimiters` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* of *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   As `using delimiter` above, but all of the strings in the list count as delimiters.\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   Interpret the raw bytes read as this class. The most common ones control the use of three different text encodings: `text` or `string` : The primary text encoding, as determined by the user’s language preferences set in the International preference panel. (For example, Mac OS Roman for English, MacJapanese for Japanese, and so on.) `Unicode text` : UTF-16. `«class utf8»` : UTF-8. (See [Double Angle Brackets](../conceptual/ASLR_raw_data.md#//apple_ref/doc/uid/TP40000983-CH225-SW1) for information on chevron or “raw” syntax.) Any other class is possible, for example `date` or `list`, but is typically only useful if the data was written using a `write` statement specifying the same value for the `as` parameter.\n\n*Default Value:*\n:   `text`\n\n##### Result\n\nThe data read from the file. If the file is open, the file pointer is advanced by the number of bytes read, so the next `read` command will start where the previous one left off.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_146\"></a>\n\n##### Examples\n\nThe following example opens a file for read access, reads up to (and including) the first occurrence of `\".\"`, closes the file, and displays the text it read. (See the Examples section for the `write` command for how to create a similar file for reading.)\n\n```\nset fp to open for access file \"Leopard:Users:myUser:NewFile\"\nset myText to read fp until \".\"\nclose access fp\ndisplay dialog myText\n```\n\nTo read all the text in the file, replace `set myText to read fp until \".\"` with `set myText to read fp`.\n\n##### Discussion\n\nAt most one of `to`, `for`, `before`, and `until` is allowed. Use of `before`, `until`, or `using delimiter(s)` will interpret the file first as text and then coerce the text to whatever is specified in the `as` parameter. Otherwise, it is treated as binary data (which may be interpreted as text if so specified.)\n\n`read` cannot automatically detect the encoding used for a text file. If a file is not in the primary encoding, you must supply an appropriate `as` parameter.\n\nWhen reading binary data, `read` always uses big-endian byte order. This is only a concern if you are reading binary files produced by other applications.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW43\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_793\"></a>\n\nround\n\nRounds a number to an integer.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_147\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW185\"></a>`round` | | *real* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW186\"></a>`rounding` | | *roundingDirection* | optional |\n\n##### Parameters\n\n*[real](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCJECEC)*\n:   The number to round.\n\n`rounding` *roundingDirection*\n:   The direction to round. You may specify one of the following rounding directions: `up` : Rounds to the next largest integer. This is the same as the math “ceiling” function. `down` : Rounds down to the next smallest integer. This is the same as the math “floor” function. `toward zero` : Rounds toward zero, discarding any fractional part. Also known as truncation. `to nearest` : Rounds to the nearest integer; .5 cases are rounded to the nearest even integer. For example, 1.5 rounds to 2, 0.5 rounds to 0. Also known as “unbiased rounding” or “bankers’ rounding.” See Discussion for details. `as taught in school` : Rounds to the nearest integer; .5 cases are rounded away from zero. This matches the rules commonly taught in elementary mathematics classes.\n\n*Default Value:*\n:   `to nearest`\n\n##### Result\n\nThe rounded value, as an `integer` if it is within the allowable range (±2^29), or as a `real` if not.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_148\"></a>\n\n##### Examples\n\nRounding up or down is not the same as rounding away from or toward zero, though it may appear so for positive numbers. For example:\n\n```\nround 1.1 rounding down --result: 1\nround -1.1 rounding down --result: -2\n```\n\nTo round to the nearest multiple of something other than 1, divide by that number first, round, and then multiply. For example, to round a number to the nearest 0.01:\n\n```\nset x to 5.1234\nset quantum to 0.01\n(round x/quantum) * quantum --result: 5.12\n```\n\n##### Discussion\n\nThe definition of `to nearest` is more accurate than `as taught in school`, but may be surprising if you have not seen it before. For example:\n\n```\nround 1.5 --result: 2\nround 0.5 --result: 0\n```\n\nRounding 1.5 to 2 should come as no surprise, but `as taught in school` would have rounded 0.5 up to 1. The problem is that when dealing with large data sets or with many subsequent rounding operations, always rounding up introduces a slight upward skew in the results. The round-to-even rule used by `to nearest` tends to reduce the total rounding error, because on average an equal portion of numbers will round down as will round up.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW57\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_795\"></a>\n\nrun\n\nExecutes the `run` handler of the specified target.\n\nTo run an application, it must be on a local or mounted volume. If the application is already running, the effect of the `run` command depends on the application. Some applications are not affected; others repeat their startup procedures each time they receive a `run` command.\n\nThe `run` command launches an application as hidden; use `activate` to bring the application to the front.\n\nFor a `script` object, the `run` command causes either the explicit or the implicit `run` handler, if any, to be executed. For related information, see [run Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW15).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_149\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n|  | `run` | *runTarget* | optional |\n\n##### Parameters\n\n`runTarget` *script*\n:   A `script` or `application` object.\n\n*Default Value:*\n:   `it` (the current target)\n\n##### Result\n\nThe result, if any, returned by the specified object’s `run` handler.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_150\"></a>\n\n##### Examples\n\n```\nrun application \"TextEdit\"\ntell application \"TextEdit\" to run\nrun myScript --where myScript is a script object\n```\n\nFor information about using the `run` command with `script` objects, see [Sending Commands to Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW3).\n\n##### Discussion\n\nTo specify an application to run, you can supply a string with only the application name, as shown in the Examples section. Or you can specify a location more precisely, using one of the forms described in [Aliases and Files](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW28). For examples of other ways to specify an application, see the `application` class.\n\nIt is not necessary to explicitly tell an application to `run` before sending it other commands; AppleScript will do that automatically. To launch an application without invoking its usual startup behavior, use the `launch` command. For further details, see [Calling a Script Application From a Script](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW17).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW36\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_797\"></a>\n\nrun script\n\nRuns a specified script or script file.\n\nSee also `store script`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_151\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW187\"></a>`run script` | | *scriptTextOrFileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW188\"></a>`with parameters` | | *listOfParameters* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW189\"></a>`in` | | *text* | optional |\n\n##### Parameters\n\n( *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)* | *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   The script text, or an `alias` or `file` specifier that specifies the script file to run.\n\n`with parameters` *[list](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE)* of *anything*\n:   A list of parameter values to be passed to the script.\n\n`in` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The scripting component to use.\n\n*Default Value:*\n:   `\"AppleScript\"`\n\n##### Result\n\nThe result of the script’s `run` handler.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_152\"></a>\n\n##### Examples\n\nThe following script targets the application Finder, escaping the double quotes around the application name with the backslash character (for more information on using the backslash, see the Special String Characters section in the `text` class description):\n\n```\nrun script \"get name of front window of app \\\\\"Finder\\\\\"\" --result: a window name\n```\n\nThis example executes a script stored on disk:\n\n```\nset scriptAlias to \"Leopard:Users:myUser:Documents:savedScript.scptd:\" as alias\nrun script scriptAlias --result: script is executed\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW13\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_800\"></a>\n\nsay\n\nSpeaks the specified text.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_153\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW190\"></a>`say` | | *text* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW191\"></a>`displaying` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW192\"></a>`using` | | *text* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW193\"></a>`waiting until completion` | | *boolean* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW194\"></a>`saving to` | | *fileSpecifier* | optional |\n\n##### Parameters\n\n*[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The text to speak.\n\n`displaying` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The text to display in the feedback window, if different from the spoken text. This parameter is ignored unless Speech Recognition is turned on (in System Preferences).\n\n`using` *[text](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF)*\n:   The voice to speak with—for example: `\"Zarvox\"`. You can use any of the voices from the System Voice pop-up on the Text to Speech tab in the Speech preferences pane.\n\n*Default Value:*\n:   The current System Voice (set in the Speech panel in System Preferences.\n\n`waiting until completion` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Should the command wait for speech to complete before returning? This parameter is ignored unless Speech Recognition is turned on (in System Preferences).\n\n*Default Value:*\n:   `true`\n\n`saving to` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier to an `AIFF` file (existing or not) to contain the sound output. You can only use an `alias` specifier if the file exists. If this parameter is specified, the sound is not played audibly, only saved to the file.\n\n*Default Value:*\n:   None; the text is spoken out loud, and no file is saved.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_154\"></a>\n\n##### Examples\n\n```\nsay \"You are not listening to me!\" using \"Bubbles\" -- result: spoken in Bubbles\n```\n\nThe following example saves the spoken text into a sound file:\n\n```\nset soundFile to choose file name -- specify name ending in \".aiff\"\n    --result: a file URL\nsay \"I love oatmeal.\" using \"Victoria\" saving to soundFile\n    --result: saved to specified sound file\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW37\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_805\"></a>\n\nscripting components\n\nReturns a list of the names of all currently available scripting components, such as the AppleScript component.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_155\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW195\"></a>`scripting components` | |  | required |\n\n##### Result\n\nA `list` of `text` items, one for each installed scripting component.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_156\"></a>\n\n##### Examples\n\n```\nscripting components --result: {\"AppleScript\"}\n```\n\n##### Discussion\n\nA scripting component is a software component, such as AppleScript, that conforms to the Open Scripting Architecture (OSA) interface. The OSA provides an abstract interface for applications to compile, execute, and manipulate scripts without needing to know the details of the particular scripting language. Each scripting language corresponds to a single scripting component.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW52\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_806\"></a>\n\nset\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_807\"></a>\n\nAssigns one or more values to one or more variables.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_157\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n|  | `set` | *variablePattern* | required |\n|  | `to` | *expression* | optional |\n\n##### Parameters\n\n*variablePattern*\n:   The name of the variable or pattern of variables in which to store the value or pattern of values. Patterns can be lists or records.\n\n`to` *expression*\n:   The expression whose value is to be set. It can evaluate to any type of object or value.\n\n##### Result\n\nThe value assigned.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_158\"></a>\n\n##### Examples\n\n`set` may be used to create new variables:\n\n```\nset myWeight to 125\n```\n\n...assign new values to existing variables:\n\n```\nset myWeight to myWeight + 23\n```\n\n...change properties or elements of objects, such as lists:\n\n```\nset intList to {1, 2, 3}\nset item 3 of intList to 42\n```\n\n...or application-defined objects:\n\n```\ntell application \"Finder\" to set name of startup disk to \"Happy Fun Ball\"\n```\n\nAs mentioned in the Discussion, setting one variable to another makes both variables refer to the exact same object. If the object is mutable, that is, it has writable properties or elements, changes to the object will appear in both variables:\n\n```\nset alpha to {1, 2, {\"a\", \"b\"}}\nset beta to alpha\nset item 2 of item 3 of alpha to \"change\" --change the original variable\nset item 1 of beta to 42 --change a different item in the new variable\n{alpha, beta}\n--result: {{42, 2, {\"a\", \"change\"}}, {42, 2, {\"a\", \"change\"}}}\n```\n\nBoth variables show the same changes, because they both refer to the same object. Compare this with the similar example in `copy`. Assigning a new object to a variable is not the same thing as changing the object itself, and does not affect any other variables that refer to the same object. For example:\n\n```\nset alpha to {1, 2, 3}\nset beta to alpha --result: beta refers to the same object as alpha\nset alpha to {4, 5, 6}\n    --result: assigns a new object to alpha; this does not affect beta.\n{alpha, beta}\n--result: {{4, 5, 6}, {1, 2, 3}}\n```\n\n`set` can assign several variables at once using a pattern, which may be a list or a record. For example:\n\n```\ntell application \"Finder\" to set {x, y} to position of front window\n```\n\nSince `position of front window` evaluates to a list of two integers, this sets `x` to the first item in the list and `y` to the second item.\n\nYou can think of pattern assignment as shorthand for a series of simple assignments, but that is not quite accurate, because the assignments are effectively simultaneous. That means that you can use pattern assignment to exchange two variables:\n\n```\nset {x, y} to {1, 2} --now x is 1, and y is 2.\nset {x, y} to {y, x} --now x is 2, and y is 1.\n```\n\nTo accomplish the second statement using only simple assignments, you would need a temporary third variable.\n\nFor more information on using the set command, including a more complex pattern example, see [Declaring Variables with the set Command](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW9).\n\n##### Discussion\n\nUsing the `set` command to assign a value to a variable causes the variable to refer to the original value. In a sense, it creates a new name for the same object. If multiple variables refer to a mutable object (that is, one with writable properties or elements, such as a list or `script` object), changes to the object are observable through any of the variables. If you want a separate copy, use the `copy` command. This sharing only applies to values in AppleScript itself; it does not apply to values in other applications. Changing the object a variable refers to is not the same as altering the object itself, and does not affect other variables that refer to the same object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW33\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_809\"></a>\n\nset eof\n\nSets the length of a file, in bytes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_159\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW64\"></a>`set eof` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW196\"></a>`to` | | *integer* | required |\n\n##### Parameters\n\n( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* | *file descriptor* )\n:   The file to set the length of, as an alias, a file specifier, or as an integer file descriptor, which must be obtained as the result of an earlier `open for access` call.\n\n`to` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The new length of the file, in bytes. If the new length is shorter than the existing length of the file, any data beyond that position is lost. If the new length is longer, the contents of the new bytes are unspecified.\n\n##### Result\n\nNone.\n\nSignals a “write permission” error if the file was opened using `open for access` without write permission.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_160\"></a>\n\n##### Examples\n\nIf you want to completely replace the contents of an existing file, the first step must be to change its length to zero:\n\n```\nset theFile to choose file with prompt \"Choose a file to clobber:\"\nset eof theFile to 0\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW27\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_811\"></a>\n\nset the clipboard to\n\nPlaces data on the clipboard.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_161\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW197\"></a>`set the clipboard to` | | *anything* | required |\n\n##### Parameters\n\n*anything*\n:   The data (of any type) to place on the clipboard.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_162\"></a>\n\n##### Examples\n\nThe following script places text on the clipboard, then retrieves the text in TextEdit with a `the clipboard` command:\n\n```\nset the clipboard to \"Important new text.\"\ntell application \"TextEdit\"\n    activate  --make sure TextEdit is running\n    set clipText to the clipboard  --result: \"Important new text.\"\n    --perform operations with retrieved text\nend tell\n```\n\n##### Discussion\n\nIt is not necessary to use the clipboard to move data between scriptable applications. You can simply `get` the data from the first application into a variable and `set` the appropriate data in the second application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW44\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_812\"></a>\n\nset volume\n\nSets the sound output, input, and alert volumes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_163\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW198\"></a>`set volume` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW199\"></a> | | *number* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW200\"></a>`output volume` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW201\"></a>`input volume` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW202\"></a>`alert volume` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW203\"></a>`output muted` | | *boolean* | optional |\n\n##### Parameters\n\n*[number](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCBJDGC)*\n:   The sound output volume, a real number from 0 to 7. <a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_164\"></a> **Important:** This parameter is deprecated; if specified, all other parameters will be ignored.\n\n`output volume` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The sound output volume, an integer from 0 to 100.\n\n*Default Value:*\n:   None; the output volume is not changed.\n\n`input volume` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The sound input volume, an integer from 0 to 100.\n\n*Default Value:*\n:   None; the input volume is not changed.\n\n`alert volume` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The alert input volume, an integer from 0 to 100.\n\n*Default Value:*\n:   None; the alert volume is not changed.\n\n`output muted` *[boolean](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCIBBGG)*\n:   Should the sound output be muted?\n\n*Default Value:*\n:   None; the output muting is not changed.\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_165\"></a>\n\n##### Examples\n\nThe following example saves the current volume settings, before increasing the output volume, saying some text, and restoring the original value:\n\n```\nset savedSettings to get volume settings\n-- {output volume:32, input volume:70, alert volume:78, output muted:false}\nset volume output volume 90\nsay \"This is pretty loud.\"\nset volume output volume (output volume of savedSettings)\ndelay 1\nsay \"That's better.\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW38\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_817\"></a>\n\nstore script\n\nStores a `script` object into a file.\n\nSee also `run script`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_166\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW204\"></a>`store script` | | *script* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW205\"></a>`in` | | *fileSpecifier* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW206\"></a>`replacing` | | *replacingConstant* | optional |\n\n##### Parameters\n\n*script*\n:   The `script` object to store.\n\n`in` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* )\n:   An `alias` or `file` specifier that specifies the file to store the `script` object in.\n\n*Default Value:*\n:   None; a standard Save As dialog will be presented to allow the user to choose where to save the `script` object.\n\n`replacing` *replacingConstant*\n:   Allow overwriting an existing file? You may specify one of the following constants: `yes` : Overwrite without asking. `no` : Never overwrite; signal an error if the file exists. `ask` : Present a dialog asking the user what to do; the options are Replace (overwrite the file), Cancel (signal a “user canceled” error), or Save As (save to a different location).\n\n*Default Value:*\n:   `ask`\n\n##### Result\n\nNone.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_167\"></a>\n\n##### Examples\n\nThis example stores a script on disk, using the Save As dialog to specify a location on the desktop and the name `storedScript`. It then creates an alias to the stored script and runs it with `run script`:\n\n```\nscript test\n    display dialog \"Test\"\nend script\n \nstore script test --specify \"Leopard:Users:myUser:Desktop:storedScript\"\n \nset localScript to alias \"Leopard:Users:myUser:Desktop:storedScript\" run script localScript --result: displays dialog \"Test\"\n```\n\nThe `store script` command stores only the contents of the script—in this case, the one statement, `display dialog \"Test\"`. It does not store the beginning and ending statements of the script definition.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW25\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_820\"></a>\n\nsummarize\n\nSummarizes the specified text or text file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_168\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW207\"></a>`summarize` | | *textSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW222\"></a>`in` | | *integer* | optional |\n\n##### Parameters\n\n*textSpecifier*\n:   The `text`, or an `alias` to a text file, to summarize.\n\n`in` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The number of sentences desired in the summary.\n\n*Default Value:*\n:   `1`\n\n##### Result\n\nA `text` object containing a summarized version of the text or file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_169\"></a>\n\n##### Examples\n\nThis example summarizes Lincoln’s famous Gettysburg Address down to one sentence—a tough job even for AppleScript:\n\n```\nset niceSpeech to \"Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.\nNow we are engaged in a great civil war, testing whether that nation, or any nation, so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.\nBut, in a larger sense, we can not dedicate—we can not consecrate—we can not hallow—this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us—that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion—that we here highly resolve that these dead shall not have died in vain—that this nation, under God, shall have a new birth of freedom—and that government of the people, by the people, for the people, shall not perish from the earth.\"\nset greatSummary to summarize niceSpeech in 1\ndisplay dialog greatSummary --result: displays one inspiring sentence\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW45\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_822\"></a>\n\nsystem attribute\n\nGet environment variables or attributes of this computer.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_170\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW208\"></a>`system attribute` | | *attribute* | optional |\n\n##### Parameters\n\n*attribute*\n:   The attribute to test: either a Gestalt value or a shell environment variable name. Gestalt values are described in *[Gestalt Manager Reference](https://developer.apple.com/documentation/coreservices/carbon_core/gestalt_manager)*.\n\n*Default Value:*\n:   If the attribute is omitted, `system attribute` will return a list of the names of all currently defined environment variables.\n\n`has` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   For Gestalt values, an integer mask that is bitwise-ANDed with the Gestalt response. If the result is non-zero, `system attribute` returns `true`, otherwise `false`. For environment variables, this parameter is ignored.\n\n*Default Value:*\n:   None; `system attribute` returns the original Gestalt response code.\n\n##### Result\n\nIf the attribute specified is a Gestalt selector, either the Gestalt response code or `true` or `false` depending on the `has` parameter.\n\nIf the attribute specified is an environment variable, the value of that variable, or an empty string (`\"\"`) if it is not defined.\n\nIf no attribute is supplied, a list of all defined environment variables.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_171\"></a>\n\n##### Examples\n\nTo get the current shell:\n\n```\nsystem attribute \"SHELL\" --result: \"/bin/bash\" (for example)\n```\n\nTo get a list of all defined environment variables:\n\n```\nsystem attribute\n(* result: (for example)\n{\"PATH\", \"TMPDIR\", \"SHELL\", \"HOME\", \"USER\", \"LOGNAME\", \"DISPLAY\", \"SSH_AUTH_SOCK\", \"Apple_PubSub_Socket_Render\", \"__CF_USER_TEXT_ENCODING\", \"SECURITYSESSIONID\", \"COMMAND_MODE\"}\n*)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW46\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_824\"></a>\n\nsystem info\n\nGets information about the system.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_172\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW209\"></a>`system info` | |  | required |\n\n##### Result\n\nA record containing various information about the system and the current user. This record contains the following fields:\n\n`AppleScript version` (a `text` object)\n:   The version number of AppleScript, for example, `\"2.0\"`. This can be useful for testing for the existence of AppleScript features. When comparing version numbers, use `considering numeric strings` to make them compare in numeric order, since standard lexicographic ordering would consider `\"1.9\"` to come after `\"1.10\"`.\n\n`AppleScript Studio version` (a `text` object)\n:   The version number of AppleScript Studio, for example, `\"1.5\"`. <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW223\"></a> **Note:** AppleScript Studio is deprecated in OS X v10.6.\n\n`system version` (a `text` object)\n:   The version number of OS X, for example, `\"10.5.1\"`.\n\n`short user name` (a `text` object)\n:   The current user’s short name, for example, `\"hoser\"`. This is set in the Advanced Options panel in the Accounts preference pane, or in the “Short Name” field when creating the account. This is also available from System Events using `name of current user`.\n\n`long user name` (a `text` object)\n:   The current user’s long name, for example, `\"Random J. Hoser\"`. This is the “User Name” field in the Accounts preference pane, or in the “Name” field when creating the account. This is also available from System Events using `full name of current user`.\n\n`user ID` (an `integer` )\n:   The current user’s user ID. This is set in the Advanced Options panel in the Accounts preference pane.\n\n`user locale` (a `text` object)\n:   The current user’s locale code, for example `\"en_US\"`.\n\n`home directory` (an `alias` object)\n:   The location of the current user’s home folder. This is also available from Finder’s `home` property, or System Events’ `home folder` property.\n\n`boot volume` (a `text` object)\n:   The name of the boot volume, for example, `\"Macintosh HD\"`. This is also available from Finder or System Events using `name of startup disk`.\n\n`computer name` (a `text` object)\n:   The computer’s name, for example `\"mymac\"`. This is the “Computer Name” field in the Sharing preference pane.\n\n`host name` (a `text` object)\n:   The computer’s DNS name, for example `\"mymac.local\"`.\n\n`IPv4 address` (a `text` object)\n:   The computer’s IPv4 address, for example `\"192.201.168.13\"`.\n\n`primary Ethernet address` (a `text` object)\n:   The MAC address of the primary Ethernet interface, for example `\"00:1c:63:91:4e:db\"`.\n\n`CPU type` (a `text` object)\n:   The CPU type, for example `\"Intel 80486\"`.\n\n`CPU speed` (an `integer` )\n:   The clock speed of the CPU in MHz, for example `2400`.\n\n`physical memory` (an `integer` )\n:   The amount of physical RAM installed in the computer, in megabytes (MB), for example `2048`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_173\"></a>\n\n##### Examples\n\n```\nsystem info --result: long record of information\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW28\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_825\"></a>\n\nthe clipboard\n\nReturns the contents of the clipboard.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_174\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW210\"></a>`the clipboard` | |  | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW211\"></a>`as` | | *class* | optional |\n\n##### Parameters\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   The type of data desired. `the clipboard` will attempt to find that “flavor” of data on the clipboard; if it is not found, it will attempt to coerce whatever flavor is there.\n\n##### Result\n\nThe data from the clipboard, which can be of any type.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_175\"></a>\n\n##### Examples\n\nThe following script places text on the clipboard, and then appends the clipboard contents to the frontmost TextEdit document:\n\n```\n \nset the clipboard to \"Add this sentence at the end.\"\ntell application \"TextEdit\"\n    activate  --make sure TextEdit is running\n    make new paragraph at end of document 1 with data (return & the clipboard)\nend tell\n```\n\n##### Discussion\n\nIt is not necessary to use the clipboard to move data between scriptable applications. You can simply `get` the data from the first application into a variable and `set` the appropriate data in the second application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW47\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_827\"></a>\n\ntime to GMT\n\nReturns the difference between local time and GMT (Greenwich Mean Time) or Universal Time, in seconds.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_176\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW212\"></a>`time to GMT` | |  | required |\n\n##### Result\n\nThe `integer` number of seconds difference between the current time zone and Universal Time.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_177\"></a>\n\n##### Examples\n\nThe following example computes the time difference between the current location and Cupertino:\n\n```\nset localOffset to time to GMT  --local difference, in seconds\nset cupertinoOffset to -8.0 * hours\n    --doesn't account for Daylight Savings; may actually be -7.0.\nset difference to (localOffset - cupertinoOffset) / hours\ndisplay dialog (\"Hours to Cupertino: \" & difference)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW34\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_828\"></a>\n\nwrite\n\nWrites data to a specified file.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_178\"></a>\n\n##### Syntax\n\n|  |  |  |  |\n| --- | --- | --- | --- |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW213\"></a>`write` | | *anything* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW214\"></a>`to` | | *fileSpecifier* | required |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW215\"></a>`starting at` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW216\"></a>`for` | | *integer* | optional |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH216-SW217\"></a>`as` | | *class* | optional |\n\n##### Parameters\n\n*anything*\n:   The data to write to the file. This is typically `text`, but may be of any type. When reading the data back, the `read` command must specify the same type, or the results are undefined.\n\n`to` ( *[alias](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW3)* | *[file](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-SW17)* | *file descriptor* )\n:   The file to write to, as an alias, a file specifier, or an `integer` file descriptor. A file descriptor must be obtained as the result of an earlier `open for access` call.\n\n`starting at` ( *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)* | *eof* )\n:   The byte position in the file to start reading from. The position is 1-based, so `1` is the first byte of the file, `2` the second, and so on. Negative integers count from the end of the file, so `-1` is the last byte, `-2` the second-to-last, and so on. The constant `eof` is the position just after the last byte; use this to append data to the file.\n\n*Default Value:*\n:   The current file pointer (see `open for access`) if the file is open, or the beginning of the file if not.\n\n`for` *[integer](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCHBDCJ)*\n:   The number of bytes to write.\n\n*Default Value:*\n:   Write all the data provided.\n\n`as` *[class](ASLR_classes.md#//apple_ref/doc/uid/TP40000983-CH1g-BBCFEDGB)*\n:   Write the data as this class. The most common ones control the use of three different text encodings: `text` or `string` : The primary text encoding, as determined by the user’s language preferences set in the International preference panel. (For example, Mac OS Roman for English, MacJapanese for Japanese, and so on.) `Unicode text` : UTF-16. `«class utf8»` : UTF-8. Any other class is possible, for example `date` or `list`, but is typically only useful if the data will be read using a `read` statement specifying the same value for the `as` parameter.\n\n*Default Value:*\n:   The class of the supplied data. See Special Considerations.\n\n##### Result\n\nNone. If the file is open, `write` will advance the file pointer by the number of bytes written, so the next `write` command will start writing where the last one ended.\n\nSignals an error if the file is open without write permission, or if there is any other problem that prevents writing to the file, such as a lack of disk space.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_179\"></a>\n\n##### Examples\n\nThe following example opens a file with write permission, creating it if it doesn’t already exist, writes text to it, and closes it.\n\n```\nset fp to open for access file \"HD:Users:myUser:NewFile\" with write permission\nwrite \"Some text. And some more text.\" to fp\nclose access fp\n```\n\n##### Special Considerations\n\nAs specified above, `write` with no `as` parameter writes as the class of the supplied data, which means that in AppleScript 2.0 `write` always writes `text` data using the primary encoding. Prior to 2.0, `string` and `Unicode text` were distinct types, which meant that it would use primary encoding for `string` and UTF-16 for `Unicode text`. For reliable results when creating scripts that will run on both 2.0 and pre-2.0, always specify the encoding explicitly using `as text` or `as Unicode text`, as appropriate.<a id=\"//apple_ref/doc/uid/TP40000983-CH216-DontLinkElementID_833\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_cmds.html", "sha256": "a5df61079b60abdec2659c151efcac56f015a66b47f12fb5eadffbc0e8c83b1d", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_control_statements.md", "title": "Control Statements Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-157332\"></a>\n\n# Control Statements Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_834\"></a>This chapter describes AppleScript control statements. A *control statement* is a statement that determines when and how other statements are executed or how expressions are evaluated. For example, a control statement may cause AppleScript to skip or repeat certain statements.\n\n*Simple statements* can be written on one line, while *compound statements* can contain other statements, including multiple clauses with nested and multi-line statements. A compound statement is known as a *statement block*.\n\nCompound statements begin with one or more reserved words, such as `tell`, that identify the type of control statement. The last line of a compound statement always starts with `end`, and can optionally include the word that begins the control statement (such as `end tell`).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-130224\"></a>\n\n### considering and ignoring Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_835\"></a>The `considering` and `ignoring` statements cause AppleScript to consider or ignore specific characteristics as it executes groups of statements. There are two kinds of `considering` and `ignoring` statements:\n\n* Those that specify attributes to be considered or ignored in performing text comparisons.\n* Those that specify whether AppleScript should consider or ignore responses from an application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-159879\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_836\"></a>\n\nconsidering / ignoring (text comparison)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_837\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_838\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_839\"></a>Specify how AppleScript should treats attributes, such as case, in performing text comparisons.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  considering attribute [, attribute ... and attribute ] ¬     [ but ignoring attribute [, attribute ... and attribute ] ]        [ statement ]...  end considering   ignoring attribute [, attribute ... and attribute ] ¬     [ but considering attribute [, attribute ... and attribute ] ]        [ statement ]...  end ignoring  ``` |\n\n##### Placeholders\n\n*attribute*\n:   A characteristic of the text: `case` : If this attribute is ignored, uppercase letters are not distinguished from lowercase letters. See Special Considerations below for related information. See also `greater than, less than` for a description of how AppleScript sorts letters, punctuation, and other symbols.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_840\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_841\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_842\"></a> `diacriticals` : If this attribute is ignored, `text` objects are compared as if no diacritical marks (such as ´, `, ˆ, ¨, and ˜) are present; for example, `\"résumé\"` is equal to `\"resume\"`.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_843\"></a> `hyphens` : If this attribute is ignored, `text` objects are compared as if no hyphens are present; for example `\"anti-war\"` is equal to `\"antiwar\"`. <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_844\"></a> `numeric strings` : By default, this attribute is ignored, and text strings are compared according to their character values. For example, if this attribute is considered, `\"1.10.1\" &gt; \"1.9.4\"` evaluates as `true`; otherwise it evaluates as `false`. This can be useful in comparing version strings.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_845\"></a> `punctuation` : If this attribute is ignored,`text` objects are compared as if no punctuation marks (such as `. , ? : ; ! ' \"`) are present; for example `\"What? he inquired.\"` is equal to `\"what he inquired\"`. <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_846\"></a> `white space` : If this attribute is ignored, the `text` objects are compared as if spaces, tab characters, and return characters were not present; for example `\"Brick house\"` would be considered equal to `\"Brickhouse\"`.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_847\"></a> *Default Value:* : Case and numeric strings are ignored; all others are considered.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_180\"></a>\n\n##### Examples\n\nThe following examples show how `considering` and `ignoring` statements for various attributes can change the value of text comparisons.\n\n```\n\"Hello Bob\" = \"HelloBob\" --result: false\nignoring white space\n    \"Hello Bob\" = \"HelloBob\" --result: true\nend ignoring\n \n\"BOB\" = \"bob\" --result: true\nconsidering case\n    \"BOB\" = \"bob\" --result: false\nend considering\n \n\"a\" = \"á\" --result: false\nignoring diacriticals\n    \"a\" = \"á\" --result: true\nend considering\n \n\"Babs\" = \"bábs\" --result: false\n \nignoring case\n    \"Babs\" = \"bábs\" --result: false\nend ignoring\n \nignoring case and diacriticals\n    \"Babs\" = \"bábs\" --result: true\nend ignoring\n```\n\n##### Discussion\n\nYou can nest `considering` and `ignoring` statements. If the same attribute appears in both an outer and inner statement, the attribute specified in the inner statement takes precedence.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_848\"></a> When attributes in an inner `considering` or `ignoring` statement are different from those in outer statements, they are added to the attributes to be considered and ignored.\n\n##### Special Considerations\n\nBecause `text item delimiters` (described in [version](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW6)) respect `considering` and `ignoring` attributes in AppleScript 2.0, delimiters are case-insensitive by default. Formerly, they were always case-sensitive. To enforce the previous behavior, add an explicit `considering case` statement.\n\n`considering` and `ignoring` are fully Unicode-aware. For example, with `ignoring case`, “Горбач” is equal to “ГОРБАЧ”. Also, the characters ignored by diacriticals, hyphens, punctuation, and white space are defined by Unicode character classes:\n\n* `ignoring punctuation` ignores category P\\*, which includes left- and right-quotation marks such as `“ ” « »`.\n* `ignoring hyphens` ignores category Pd, which includes em- and en-dashes.\n* `ignoring whitespace` ignores category Z\\*, plus tab (\\\\t), return (\\\\r), and linefeed (\\\\n), which includes em-, en-, and non-breaking spaces.\n\nPara\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW2\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_849\"></a>\n\nconsidering / ignoring (application responses)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_850\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_851\"></a>Permits a script to continue without waiting for an application to respond to commands that target it.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` considering \\| ignoring  application responses    [ statement ]... end [ considering \\| ignoring ]  ``` |\n\n##### Placeholders\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_181\"></a>\n\n##### Examples\n\nThe following example shows how to use an ignoring statement so that a script needn’t wait while Finder is performing a potentially lengthy task:\n\n```\ntell application \"Finder\"\n    ignoring application responses\n        empty the trash\n    end ignoring\nend tell\n```\n\nYour script may want to ignore most responses from an application, but wait for a response to a particular statement. You can do so by nesting `considering` and `ignoring` statements:\n\n```\ntell application \"Finder\"\n    ignoring application responses\n        empty the trash\n        -- other statements that ignore application responses\n        considering application responses\n            set itemName to name of first item of startup disk\n        end considering\n        -- other statements that ignore application responses\n    end ignoring\nend tell\n```\n\n##### Discussion\n\nA response to an application command indicates whether the command completed successfully, and also returns results and error messages, if there are any. When you use an `ignoring application responses` block, you forego this information.\n\nResults and error messages from AppleScript commands, scripting additions, and expressions are not affected by the `application responses` attribute.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-129657\"></a>\n\n### error Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_852\"></a>During script execution, errors can occur in the operating system (for example, when a specified file isn’t found), in an application (for example, when the script specifies an object that doesn’t exist), and in the script itself. An <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_853\"></a>*error message* is a message that is supplied by an application, AppleScript, or macOS when an error occurs during the handling of a command. An error message can include an <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_854\"></a>*error number*, which is an integer that identifies the error; an <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_855\"></a>*error expression*, which is an expression, usually a `text` object, that describes the error; and other information.\n\nA script can signal an error—which can then be handled by an error handler—with the `error` statement. This allows scripts to supply their own messages for errors that occur within the script. For example, a script can prepare to handle anticipated errors by using a `try` statement. In the `on error` branch of a `try` statement, a script may be able to recover gracefully from the error. If not, it can use an `error` statement to resignal the error message it receives, modifying the message as needed to supply information specific to the script.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-129678\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_856\"></a>\n\nerror\n\nSignals an error in a script.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  error [ errorMessage ] [ number errorNumber ] ¬    [ partial result resultList ] ¬    [ from offendingObject ] [ to expectedType ]  ``` |\n\n##### Placeholders\n\n*errorMessage*\n:   A `text` object describing the error. Although this parameter is optional, you should provide descriptions for errors wherever possible. If you do not include an error description, an empty `text` object (\"\") is passed to the error handler.\n\n*errorNumber*\n:   The error number for the error. This is an optional parameter. If you do not include a number parameter, the value -2700 (unknown error) is passed to the error handler. If the error you are signaling is a close match for one that already has an AppleScript error constant, you can use that constant. If you need to create a new number for the error, avoid using one that conflicts with error numbers defined by AppleScript, macOS, and the Apple Event Manager. In general, you should use positive numbers from 500 to 10,000. For more information, see [Error Numbers and Error Messages](ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-SW5).\n\n*resultList*\n:   A list of objects. Applies only to commands that return results for multiple objects. If results for some, but not all, of the objects specified in the command are available, you can include them in the partial result parameter. This is rarely supported by applications.\n\n*offendingObject*\n:   A reference to the object, if any, that caused the error.\n\n*expectedType*\n:   A class. If a parameter specified in the command was not of the expected class, and AppleScript was unable to coerce it to the expected class, then you can include the expected class in the `to` parameter.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_182\"></a>\n\n##### Examples\n\nThe following example uses a `try` statement to handle a simple error, and demonstrates how you can use an `error` statement to catch an error, then resignal the error exactly as it was received, causing AppleScript to display an error dialog (and halt execution):\n\n```\ntry\n    word 5 of \"one two three\"\non error eStr number eNum partial result rList from badObj to expectedType\n    -- statements that take action based on the error\n    display dialog \"Doing some preliminary handling...\"\n    -- then resignal the error\n    error eStr number eNum partial result rList from badObj to expectedType\nend try\n```\n\nIn the next example, an `error` statement resignals an error, but omits any original error information and supplies its own message to appear in the error dialog:\n\n```\ntry\n    word 5 of \"one two three\"\non error\n    -- statements to execute in case of error\n    error \"There are not enough words.\"\nend try\n```\n\nFor more comprehensive examples, see [Working with Errors](ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-158244\"></a>\n\n### if Statements\n\nAn `if` statement allows you to define statements or groups of statements that are executed only in specific circumstances, based on the evaluation of one or more Boolean expressions.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_857\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_858\"></a>\n\nAn `if` statement is also called a conditional statement. Boolean expressions in `if` statements are also called tests.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_859\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-126990\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_860\"></a>\n\nif (simple)\n\nExecutes a statement if a Boolean expression evaluates to `true`.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  if boolean then statement   ``` |\n\n##### Placeholders\n\n*boolean*\n:   A Boolean expression.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_183\"></a>\n\n##### Examples\n\nThis script displays a dialog if the value of the Boolean expression `ageOfCat &gt; 1` is `true`. (The variable `ageOfCat` is set previously.)\n\n```\nif ageOfCat &gt; 1 then display dialog \"This is not a kitten.\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-127122\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_861\"></a>\n\nif (compound)\n\nExecutes a group (or groups) of statements if a Boolean expression (or expressions) evaluates to `true`.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  if boolean [ then ]    [ statement ]...  [ else if boolean [ then ]    [ statement ]...]...  [ else    [ statement ]...]  end [ if ]  ``` |\n\n##### Placeholders\n\n*boolean*\n:   A Boolean expression.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_184\"></a>\n\n##### Examples\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_862\"></a>The following example uses a compound `if` statement, with a final `else` clause, to display a statement based on the current temperature (obtained separately):\n\n```\nif currentTemp &lt; 60 then\n    set response to \"It's a little chilly today.\"\nelse if currentTemp &gt; 80 then\n    set response to \"It's getting hotter today.\"\nelse\n    set response to \"It's a nice day today.\"\nend if\ndisplay dialog response\n```\n\n##### Discussion\n\nAn `if` statement can contain any number of `else if` clauses; AppleScript looks for the first Boolean expression contained in an `if` or `else if` clause that is `true`, executes the statements contained in its block (the statements between one `else if` and the following `else if` or `else` clause), and then exits the `if` statement.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_863\"></a>\n\nAn `if` statement can also include a final `else`<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_864\"></a> clause. The statements in its block are executed if no other test in the `if` statement passes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-127362\"></a>\n\n### repeat Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_865\"></a>You use a `repeat` statement to create loops or execute groups of repeated statements in scripts.\n\nThere are a number of types of `repeat` statement, each differing in the way it terminates the loop. Each of the options, from repeating a loop a specific number of times, to looping over the items in a list, to looping until a condition is met, and so on, lends itself to particular kinds of tasks.\n\nFor information on testing and debugging `repeat` statements, see [Debugging AppleScript Scripts](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW20).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-128843\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_866\"></a>\n\nexit\n\nTerminates a `repeat` loop and resumes execution with the statement that follows the `repeat` statement.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_867\"></a>\n\nYou can only use an `exit` statement inside a `repeat` statement. Though most commonly used with the `repeat (forever)` form, you can also use an `exit` statement with other types of `repeat` statement.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  exit [ repeat ]  ``` |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_185\"></a>\n\n##### Examples\n\nSee the example in `repeat (forever)`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-127499\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_868\"></a>\n\nrepeat (forever)\n\nRepeats a statement (or statements) until an <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_869\"></a>`exit` statement is encountered.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_186\"></a>\n>\n> **Important:** A `repeat` (forever) statement will never complete unless you cause it to do so.\n\nTo terminate a `repeat` (forever) statement, you can:\n\n* Use an `exit` statement and design the logic so that it eventually encounters the `exit` statement.\n* Use a `return` statement, which exits the handler or script that contains the loop, and therefore the loop as well.\n* Use a `try` statement and rely on an error condition to exit the loop.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_187\"></a>\n\n##### Examples\n\nThis form of the `repeat` statement is similar to the `repeat until` form, except that instead of putting a test in the `repeat` statement itself, you determine within the loop when it is time to exit. You might use this form, for example, to wait for a lengthy or indeterminate operation to complete:\n\n```\nrepeat\n    -- perform operations\n    if someBooleanTest then\n        exit repeat\n    end if\nend repeat\n```\n\nIn a script application that stays open, you can use an `idle` handler to perform periodic tasks, such as checking for an operation to complete. See [idle Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW8) for more information.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-127676\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_870\"></a>\n\nrepeat (number) times\n\nRepeats a statement (or statements) a specified number of times.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat integer [ times ]     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*integer*\n:   Specifies the number of times to repeat the statements in the body of the loop. Instead of an integer, you can specify any value that can be coerced to an integer. If the value is less than one, the body of the `repeat` statement is not executed.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_188\"></a>\n\n##### Examples\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_871\"></a>The following handler uses the `repeat (number) times` form of the `repeat` statement to raise a passed number to the passed power:\n\n```\non raiseToTheNth(x, power)\n    set returnVal to x\n    repeat power - 1 times\n        set returnVal to returnVal * x\n    end repeat\n    return returnVal\nend raiseToTheNth\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-128014\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_872\"></a>\n\nrepeat until\n\nRepeats a statement (or statements) until a condition is met. Tests the condition before executing any statements.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat until boolean     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*boolean*\n:   A Boolean expression. If it has the value `true` when entering the loop, the statements in the loop are not executed.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_189\"></a>\n\n##### Examples\n\nThe following example uses the `repeat until` form of the `repeat` statement to allow a user to enter database records. The handler `enterDataRecord()`, which is not shown, returns `true` if the user is done entering records:\n\n```\nset userDone to false\nrepeat until userDone\n    set userDone to enterDataRecord()\nend repeat\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-127845\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_873\"></a>\n\nrepeat while\n\nRepeats a statement (or statements) as long as a condition is met. Tests the condition before executing any statements. Similar to the `repeat until` form, except that it continues *while* a condition is `true`, instead of *until* it is `true`.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat while boolean     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*boolean*\n:   A Boolean expression. If it has the value `false` when entering the loop, the statements in the loop are not executed.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_190\"></a>\n\n##### Examples\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_874\"></a>The following example uses the `repeat while` form of the `repeat` statement to allow a user to enter database records. In this case, we’ve just reversed the logic shown in the `repeat until` example. Here, the handler `enterDataRecord()`, which is not shown, returns `true` if the user is *not* done entering records:\n\n```\nset userNotDone to true\nrepeat while userNotDone\n    set userNotDone to enterDataRecord()\nend repeat\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-128207\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_875\"></a>\n\nrepeat with loopVariable (from startValue to stopValue)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_876\"></a>Repeats a statement (or statements) until the value of the controlling loop variable exceeds the value of the predefined stop value.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat with  loopVariable  from  startValue  to  stopValue [ by  stepValue ]     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*loopVariable*\n:   Controls the number of iterations. It can be a previously defined variable or a new variable you define in the `repeat` statement.\n\n*startValue*\n:   Specifies a value that is assigned to *loopVariable* when the loop is entered. You can specify an integer or any value that can be coerced to an integer.\n\n*stopValue*\n:   Specifies an value. When that value is exceeded by the value of *loopVariable*, iteration ends. If *stopValue* is less than *startValue*, the body is not executed. You can specify an integer or any value that can be coerced to an integer.\n\n*stepValue*\n:   Specifies a value that is added to *loopVariable* after each iteration of the loop. You can assign an `integer` or a `real` value; a `real` value is rounded to an `integer`. *Default Value:* : 1\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_191\"></a>\n\n##### Examples\n\nThe following handler uses the `repeat with loopVariable (from startValue to stopValue)` form of the `repeat` statement to compute a factorial value (the factorial of a number is the product of all the positive integers from 1 to that number):\n\n```\non factorial(x)\n    set returnVal to 1\n    repeat with n from 2 to x\n        set returnVal to returnVal * n\n    end repeat\n    return returnVal\nend factorial\n```\n\n##### Discussion\n\nYou can use an existing variable as the loop variable in a `repeat with loopVariable (from startValue to stopValue)` statement or define a new one in the statement. In either case, the loop variable is defined outside the loop. You can change the value of the loop variable inside the loop body but it will get reset to the next loop value the next time through the loop. After the loop completes, the loop variable retains its last value.\n\nAppleScript evaluates *startValue*, *stopValue*, and *stepValue* when it begins executing the loop and stores the values internally. As a result, if you change the values in the body of the loop, it doesn’t change the execution of the loop.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-128481\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_877\"></a>\n\nrepeat with loopVariable (in list)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_878\"></a>Loops through the items in a specified list.\n\nThe number of iterations is equal to the number of items in the list. In the first iteration, the value of the variable is a reference to the first item in *list*, in the second iteration, it is a reference to the second item in *list*, and so on.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  repeat with loopVariable in list     [ statement ]...  end [ repeat ]  ``` |\n\n##### Placeholders\n\n*loopVariable*\n:   Any previously defined variable or a new variable you define in the `repeat` statement (see Discussion).\n\n*list*\n:   A list or a object specifier (such as `words 1 thru 5`) whose value is a list. *list* can also be a record; AppleScript coerces the record to a list (see Discussion).\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_192\"></a>\n\n##### Examples\n\nThe following script uses the `repeat with loopVariable (in list)` form of the `repeat` statement to loop through a list of first names, displaying a greeting for each.\n\n```\nset peopleList to {\"Chris\", \"David\", \"Sal\", \"Ben\"}\nrepeat with aPerson in peopleList\n    display dialog \"Hello \" & aPerson & \"!\"\nend repeat\n```\n\n##### Discussion\n\nYou can use an existing variable as the loop variable in a `repeat with loopVariable (in list)` statement or define a new one in the `repeat with…` statement. In either case, the loop variable is assigned a new value—the current item in the loop—at the start of each loop. After the loop completes, the loop variable retains its last value.\n\nThis example uses an existing variable as the loop variable:\n\n```\nset currentIncrement to 0\n-- The loop variable is an existing variable, defined above\nrepeat with currentIncrement in {1, 2, 3, 4}\n    -- Do something\nend repeat\ncurrentIncrement\n--result: item 4 of {1, 2, 3, 4} --result: the last value of the loop variable\n```\n\nThis example defines a new variable as the loop variable:\n\n```\n-- The loop variable is a new variable, defined in the repeat statement\nrepeat with currentIncrement in {1, 2, 3, 4}\n    -- Do something\nend repeat\ncurrentIncrement\n--result: item 4 of {1, 2, 3, 4} --result: the last value of the loop variable\n```\n\nYou can change the value of the loop variable inside the loop body, but it gets reset to the next loop value the next time through the loop. Again, after the loop completes, the loop variable retains its last value.\n\n```\nrepeat with currentIncrement in {1, 2, 3, 4}\n    display dialog currentIncrement\n    set currentIncrement to 0\nend repeat\ncurrentIncrement\n--result: 0\n```\n\nAppleScript evaluates *loopVariable* `in` *list* as an object specifier—a reference to the current item in the list—that takes on the value of `item 1 of list`, `item 2 of list`, `item 3 of list`, and so on until it reaches the last item in the list. For example:\n\n```\nrepeat with i in {1, 2, 3, 4}\n    set listItem to i\nend repeat\n--result: item 4 of {1, 2, 3, 4} --result: an object specifier\n```\n\nTo access the actual value of an item in the list, rather than a reference to the item, use the `contents of` property:\n\n```\nrepeat with i in {1, 2, 3, 4}\n    set listItem to contents of i\nend repeat\n--result: 4\n```\n\nThis technique is especially important when performing a comparison, as you typically want to test whether the *value* of a list item matches another value. The following script examines a list of words, displaying a dialog if it finds the word “hammer” in the list. To perform a proper comparison, the test statement (`if (contents of currentWord) is equal to \"hammer\" then`) compares the `contents` of the current list item, rather than the object specifier itself.\n\n```\nset wordList to words in \"Where is the hammer?\"\nrepeat with currentWord in wordList\n    log currentWord\n    if (contents of currentWord) is equal to \"hammer\" then\n        display dialog \"I found the hammer!\"\n    end if\nend repeat\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW11\"></a>\n>\n> **Note:** In the previous example, the statement `log currentWord` logs the current list item to Script Editor’s log pane. For more information about logging, see [Debugging AppleScript Scripts](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW20).\n\nYou can also use list variables directly in expressions, which may result in an implicit coercion from an object reference to a specific data type. In the following example, the loop variable `i` is implicitly coerced to an integer (equivalent to explicitly retrieving the `contents of i`) by using the `+` operator to add it to a variable containing an integer.\n\n```\nset total to 0\nrepeat with i in {1, 2, 3, 4}\n    set total to total + i\nend repeat\n--result: 10\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-158637\"></a>\n\n### tell Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_879\"></a>A `tell` statement specifies the default target—that is, the object to which commands are sent if they do not include a direct parameter. Statements within a `tell` statement that use terminology from the targeted object are compiled against that object’s dictionary.\n\nThe object of a `tell` statement is typically a reference to an application object or a `script` object. For example, the following `tell` statement targets the Finder application:\n\n```\ntell application \"Finder\"\n    set frontWindowName to name of front window\n    -- any number of additional statements can appear here\nend tell\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_880\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_881\"></a>You can nest `tell` statements inside other `tell` statements, as long as you follow the syntax and rules described in `tell (compound)`.\n\nWhen you need to call a handler from within a `tell` statement, there are special terms you use to indicate that the handler is part of the script and not a command that should be sent to the object of the `tell` statement. These terms are described in [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) and in [Calling Handlers in a tell Statement](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW1).\n\nA `tell` statement that targets a local application doesn’t cause it to launch, if it is not already running. For example, a script can examine the `running` property of the targeted `application` object to determine if the application is running before attempting to send it any commands. If it is not running it won’t be launched.\n\nIf a `tell` statement targets a local application and executes any statements that require a response from the application, then AppleScript will launch the application if it is not already running. The application is launched as hidden, but the script can send it an `activate` command to bring it to the front, if needed.\n\nA `tell` statement that targets a remote application will not cause it to launch—in fact, it will not compile or run unless the application is already running. Nor is it possible to access the `running` property of an application on a remote computer.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-157872\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_882\"></a>\n\ntell (simple)\n\nSpecifies a target object and a command to send to it.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  tell referenceToObject to statement   ``` |\n\n##### Placeholders\n\n*referenceToObject*\n:   Any object. Typically an object specifier or a `reference` object (which contains an object specifier).\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_193\"></a>\n\n##### Examples\n\nThis simple `tell` statement closes the front Finder window:\n\n```\ntell front window of application \"Finder\" to close\n```\n\nFor more information on how to specify an application object, see the `application` class.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-158020\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_883\"></a>\n\ntell (compound)\n\nSpecifies a target object and one or more commands to send to it. A compound `tell` statement is different from a simple `tell` statement in that it always includes an `end` statement.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  tell referenceToObject      [ statement ]...  end [ tell ]  ``` |\n\n##### Placeholders\n\n*referenceToObject*\n:   Any object. Typically an object specifier or a `reference` object (which contains an object specifier).\n\n*statement*\n:   Any AppleScript statement, including another `tell` statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_194\"></a>\n\n##### Examples\n\nThe following statements show how to close a window using first a compound `tell` statement, then with two variations of a simple `tell` statement:\n\n```\ntell application \"Finder\"\n    close front window\nend tell\n \ntell front window of application \"Finder\" to close\ntell application \"Finder\" to close front window\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_884\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_885\"></a>The following example shows a nested `tell` statement:\n\n```\ntell application \"Finder\"\n    tell document 1 of application \"TextEdit\"\n        set newName to word 1 -- handled by TextEdit\n    end tell\n    set len to count characters in newName -- handled by AppleScript\n    if (len &gt; 2) and (len &lt; 15) then -- comparisons handled by AppleScript\n        set name of first item of disk \"HD\" to newName -- handled by Finder\n    end if\nend tell\n```\n\nThis example works because in each case the terminology understood by a particular application is used within a `tell` block targeting that application. However, it would not compile if you asked the Finder for `word 1` of a document, or told TextEdit to `set name` of the first item on a disk, because those applications do not support those terms.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-128973\"></a>\n\n### try Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_886\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_887\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_888\"></a>A `try` statement provides the means for scripts to handle potential errors. It attempts to execute one or more statements and, if an error occurs, executes a separate set of statements to deal with the error condition. If an error occurs and there is no `try` statement in the calling chain to handle it, AppleScript displays an error and script execution stops.\n\nFor related information, see [error Statements](#//apple_ref/doc/uid/TP40000983-CH6g-129657) and [AppleScript Error Handling](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW10).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-129232\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_889\"></a>\n\ntry\n\nAttempts to execute a list of AppleScript statements, calling an error handler if any of the statements results in an error.\n\nA `try` statement is a two-part compound statement that contains a series of AppleScript statements, followed by an error handler to be invoked if any of those statements causes an error. If the statement that caused the error is included in a `try` statement, then AppleScript passes control to the error handler. After the error handler completes, control passes to the statement immediately following the end of the `try` statement.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  try     [ statement ]...  [ on error [ errorMessage ] [ number errorNumber ] [ from offendingObject ] ¬     [ partial result resultList ] [ to expectedType ]        [ statement ]... ]  end [ error \\| try ]  ``` |\n\n##### Placeholders\n\n*statement*\n:   Any AppleScript statement.\n\n*errorMessage*\n:   A `text` object, that describes the error.\n\n*errorNumber*\n:   The error number, an integer. For possible values, see [Error Numbers and Error Messages](ASLR_error_codes.md#//apple_ref/doc/uid/TP40000983-CH220-SW5).\n\n*offendingObject*\n:   A reference to the object, if any, that caused the error.\n\n*resultList*\n:   A list that provides partial results for objects that were handled before the error occurred. The list can contain values of any class. This parameter applies only to commands that return results for multiple objects. This is rarely supported by applications.\n\n*expectedType*\n:   The expected class. If the error was caused by a coercion failure, the value of this variable is the class of the coercion that failed. (The second example below shows how this works in a case where AppleScript is unable to coerce a `text` object into an `integer`.)\n\n*variable*\n:   Either a global variable or a local variable that can be used in the handler. A variable can contain any class of value. The scope of a local variable is the handler. The scope of a global variable extends to any other part of the script, including other handlers and `script` objects. For related information about local and global variables, see [version](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW6).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_195\"></a>\n\n##### Examples\n\nThe following example shows how you can use a `try` statement to handle the “Cancel” button for a `display alert` command. Canceling returns an error number of -128, but is not really an error. This test handler just displays a dialog to indicate when the user cancels or when some other error occurs.\n\n```\ntry\n    display alert \"Hello\" buttons {\"Cancel\", \"Yes\", \"No\"} cancel button 1\non error errText number errNum\n    if (errNum is equal to -128) then\n        -- User cancelled.\n        display dialog \"User cancelled.\"\n    else\n        display dialog \"Some other error: \" & errNum & return & errText\n    end if\nend try\n```\n\nYou can also use a simplified version of the `try` statement that checks for just a single error number. In the following example, only error -128 is handled. Any other error number is ignored by this `try` statement, but is automatically passed up the calling chain, where it may be handled by other `try` statements.\n\n```\ntry\n    display alert \"Hello\" buttons {\"Cancel\", \"Yes\", \"No\"} cancel button 1\non error number -128\n    -- Either do something special to handle Cancel, or just ignore it.\nend try\n```\n\nThe following example demonstrates the use of the `to` keyword to capture additional information about an error that occurs during a coercion failure:\n\n```\ntry\n    repeat with i from 1 to \"Toronto\"\n        -- do something that depends on variable \"i\"\n    end repeat\non error from obj to newClass\n    log {obj, newClass} -- Display from and to info in log pane.\nend try\n```\n\nThis `repeat` statement fails because the `text` object `\"Toronto\"` cannot be coerced to an `integer`. The error handler simply writes the values of `obj` (the offending value, `\"Toronto\"`) and `newClass` (the class of the coercion that failed, `integer`<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_890\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_891\"></a>) to Script Editor’s Event Log History window (and to the script window’s Event Log pane). The result is “(\\*Toronto, integer\\*)”, indicating the error occurred while trying to coerce “Toronto” to an integer.\n\nFor additional examples, see [Working with Errors](ASLR_error_xmpls.md#//apple_ref/doc/uid/TP40000983-CH221-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW4\"></a>\n\n### use Statements\n\nA `use` statement declares a required resource for a script—an application, script library, framework, or version of AppleScript itself—and can optionally *import* terminology from the resource for use elsewhere in the script. The effects and syntax of `use` vary slightly depending on the used resource; the different cases are described below.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW7\"></a>\n>\n> **Note:** `use` statements are supported in OS X Mavericks v10.9 (AppleScript 2.3) and later.\n\nThe basic function of `use` is to require that a resource be present before the script begins executing. If the requirement cannot be met, the script will fail to run. A `use` statement can also specify a minimum version for the required resource, such as a minimum compatible version of an application. In this example, AppleScript will ensure that Safari version 7.0 or later is available:\n\n```\nuse application \"Safari\" version \"7.0\"\n```\n\n`use` statements can also import terminology from the used resource, making the terms available throughout the script without requiring the use of `tell` or `using terms from`. AppleScript tracks where terms were imported from, and sends events that use those terms to that target. Ordinarily, commands are sent to the current target (`it`) as described in [Target](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW18), but imported terminology overrides this. If…\n\n* the event identifier is imported\n* the direct parameter is an imported class or enumeration identifier\n* the direct parameter is an object specifier ending with an imported term\n\n…then the command is sent to the import source instead. This happens even if the command is inside a `tell` block for a different target. For example, this script uses a command from Safari:\n\n```\nuse application \"Safari\"\nsearch the web for \"AppleScript\"\n```\n\nImporting happens by default, but can be suppressed using the `without importing` parameter, if applicable. You can use this to add requirements to existing scripts without changing anything else about the script:\n\n```\nuse application \"Safari\" version \"7.0\" without importing\n```\n\nBecause Safari's terms are not imported, the script will still need to use `tell` to send it events.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW8\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_892\"></a>\n\nuse (AppleScript)\n\nDeclares a required minimum version of AppleScript, and that the script expects a newer behavior for how scripting additions are handled, described in [use (scripting additions)](#//apple_ref/doc/uid/TP40000983-CH6g-SW5).\n\n##### Syntax\n\n|  |\n| --- |\n| ``` use AppleScript [ version versionText ]   ``` |\n\n##### Placeholders\n\nversionText\n:   The required minimum version of AppleScript, as a version string such as `\"2.3.2\"`. If omitted, its default value is 2.3, the version in which `use` was introduced. This value is always text, not a number, and is compared as if `considering numeric strings` is in effect. For example, `\"2.10\"` is greater than `\"2.3\"`, because 10 is greater than 3.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_196\"></a>\n\n##### Examples\n\nIn its simplest form, `use` can be used to declare that the script uses AppleScript:\n\n```\nuse AppleScript\n```\n\nThis also implicitly means that the script uses AppleScript version 2.3 or later, when `use` was first introduced, and that the script expects a newer behavior for how scripting additions are handled, described in [use (scripting additions)](#//apple_ref/doc/uid/TP40000983-CH6g-SW5).\n\nA `use` command can also explicitly specify a minimum required version of AppleScript:\n\n```\nuse AppleScript version \"2.3.2\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW5\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_893\"></a>\n\nuse (scripting additions)\n\nDeclares that a script uses scripting additions.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` use scripting additions ¬     [ with importing \\| without importing \\| importing boolean ]  ``` |\n\n##### Placeholders\n\nboolean\n:   A boolean value,`true` or `false`. AppleScript will recompile this to `with importing` or `without importing`. The default is `with importing`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_197\"></a>\n\n##### Examples\n\nUse `use scripting additions` to explicitly declare that the script uses scripting addition commands:\n\n```\nuse scripting additions\n```\n\n##### Discussion\n\nScripting addition commands are handled differently if a script has `use` commands. If a script has one or more `use` commands of any kind, scripting addition commands are *not* available by default. You must explicitly indicate that you wish to use scripting additions, either with a `use` or `using terms from` command.\n\n```\nuse scripting additions\ndisplay dialog \"hello world\"\n```\n\n```\nusing terms from scripting additions\n   display dialog \"hello world\"\nend using terms from\n```\n\nIf a script uses `use scripting additions`, AppleScript may optimize scripting addition commands, sending them to the current application instead of the current target (`it`) when it does not change the meaning to do so. For example, [random number](ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-SW42) does not need to be sent to another application to work correctly, and will always be sent to the current application when imported with `use`. Without a `use scripting additions` command, AppleScript must use a less efficient dispatching scheme, so explicitly declaring them is recommended.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW9\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_894\"></a>\n\nuse (application or script)\n\nDeclares a required application or script library, and may import its terms for use later in the script.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` use [ identifier : ] ( script \\| application ) specifier ¬    [ version versionText ] ¬    [ with importing \\| without importing \\| importing boolean ]  ``` |\n\n##### Placeholders\n\nversionText\n:   The required minimum version of the resource as a version number, such as `\"2.3.2\"`. This value is always text, not a number, and is compared as if `considering numeric strings` is in effect. For example, `\"2.10\"` is greater than `\"2.3\"`, because 10 is greater than 3.\n\nidentifier\n:   An optional identifier for the resource.\n\nspecifier\n:   Specifier data for the resource. This is typically a name, as in `use application \"Finder\"` or `use script \"My Library\"`, but may be any valid specifier form, such as by ID, as in `use application id \"com.apple.mail\"`.\n\nboolean\n:   A boolean value,`true` or `false`. AppleScript will recompile this to `with importing` or `without importing`. The default is `with importing`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_198\"></a>\n\n##### Examples\n\nA `use` command may refer to an application:\n\n```\nuse application \"Finder\"\n```\n\n…or a script library:\n\n```\nuse script \"Happy Fun Ball\"\n```\n\nIf an optional identifier is given, it defines a property whose value is the required resource. This can make it more convenient to refer to the resource, as in this example: the `get` statement uses the identifier `Safari` instead of the full specifier `application \"Safari\"`.\n\n```\nuse Safari : application \"Safari\"\nget the name of Safari's front window\n```\n\nBy using `use` with multiple applications, you can combine terms from different sources in ways impossible using `tell`, because `tell` only makes one terminology source available at a time. For example, the following script, in one statement, uses Mail and Safari to search the web for the sender of the currently selected mail message. The `get` event is sent to Mail because it defines `message viewer`, while the `search the web` event is sent to Safari.\n\n```\nuse application \"Mail\"\nuse application \"Safari\"\n \nsearch the web for the sender of the first item of ¬\n \n   (get selected messages of the front message viewer)\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW6\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_895\"></a>\n\nuse (framework)\n\nDeclares a required framework for use with the AppleScript/Objective-C bridge.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` use  framework  specifier  ``` |\n\n##### Placeholders\n\nspecifier\n:   Specifier data for the resource. This may be a base name (`\"AppKit\"`), a full name (`\"AppKit.framework\"`), or a POSIX path (`\"/System/Library/Frameworks/AppKit.framework\"`).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_199\"></a>\n\n##### Examples\n\nMost scripts that use the AppleScript/Objective-C bridge should have at least one of these two `use` statements:\n\n```\nuse framework \"Foundation\"\nuse framework \"AppKit\"\n```\n\nYou can also use other frameworks, such as WebKit:\n\n```\nuse framework \"WebKit\"\n```\n\n##### Discussion\n\nWhen you declare a required framework, AppleScript ensures the framework is loaded before running your script. To ensure that your AppleScript/Objective-C script libraries work correctly in any application, declare all needed frameworks explicitly; otherwise, there is no guarantee that a given framework will be available, and your script may fail.\n\nThe `version` parameter is not supported for frameworks; to check whether or not a framework supports a certain feature, use `NSClassFromString` or `-respondsToSelector:`.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW10\"></a>\n>\n> **Note:** OS X Yosemite v10.10 and later allow using Objective-C frameworks from any script. OS X Mavericks v10.9 only allows using Objective-C frameworks from a script library.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW3\"></a>\n\n### using terms from Statements\n\nA `using terms from` statement lets you specify which terminology AppleScript should use in compiling the statements in a script. Whereas a `tell` statement specifies the default target (often an application) to which commands are sent *and* the terminology to use, a `using terms from` statement specifies only the terminology.\n\nA `using terms from` statement can be useful in writing application event handler scripts, such as Mail rules.\n\nAnother use for this type of statement is with a script that targets an application on a remote computer that may not be available when you compile the script (or the application may not be running). Or, you might be developing locally and only want to test with the remote application at a later time. In either case, you can use a `using terms from` statement to specify a local application (presumably with a terminology that matches the one on the remote computer) to compile against.\n\nEven if a statement contained within a `using terms from` statement compiles, the script may fail when run because the target application’s terminology may differ from that used in compiling.\n\nYou can nest `using terms from` statements. When you do so, each script statement is compiled against the terminology of the application named in the innermost enclosing `using terms from` statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-SW1\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_896\"></a>\n\nusing terms from\n\nInstructs AppleScript to use the terminology from the specified source in compiling the enclosed statements.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` using terms from ( application  \\|  script  \\| scripting additions)     [ statement ]...  end [ using terms from ]  ``` |\n\n##### Placeholders\n\n*application*\n:   A specifier for an application object.\n\nscript\n:   A specifier for a script library.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_200\"></a>\n\n##### Examples\n\nThe following example shows how to use a `using terms from` statement in writing a Mail rule action script. These scripts take the following form:\n\n```\nusing terms from application \"Mail\"\n  on perform mail action with messages theMessages for rule theRule\n    tell application \"Mail\"\n        -- statements to process each message in theMessages\n    end tell\n  end perform mail action with messages\nend using terms from\n```\n\nTo use the script, you open Preferences for the Mail application, create or edit a rule, and assign the script as the action for the rule.\n\nFor an example that works with an application on a remote machine, see [Targeting Remote Applications](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW35).\n\nAs discussed in [use Statements](#//apple_ref/doc/uid/TP40000983-CH6g-SW4), a script with any `use` statements does not make scripting addition terms visible by default. You can enable scripting addition terms for specific parts of a script with `using terms from` as in this example:\n\n```\nuse AppleScript\n-- scripting addition commands such as \"display dialog\" will not compile here...\nusing terms from scripting additions -- ...but will compile within this block.\n   display dialog \"Hello world!\"\nend using terms from\n```\n\n##### Discussion\n\n`using terms from` does not import terms as `use` does, and is subject to the same limits on terminology use as `tell`. `using terms from scripting additions` does not enable optimization of scripting addition commands as `use scripting additions` does.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-130992\"></a>\n\n### with timeout Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_897\"></a>You can use a `with timeout` statement to control how long AppleScript waits for a command to execute before timing out. By default, <a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_898\"></a>when an application fails to respond to a command, AppleScript waits for two minutes before reporting an error and halting execution.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-131094\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_899\"></a>\n\nwith timeout\n\nSpecifies how long AppleScript waits for a response to a command that is sent to another application.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  with timeout [ of ] integerExpression second [ s ]     [ statement ]...  end [ timeout ]   ``` |\n\n##### Placeholders\n\n*integerExpression*\n:   The amount of time, in seconds, AppleScript should wait before timing out (and interrupting the command).\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_201\"></a>\n\n##### Examples\n\nThe following script tells TextEdit to close its first document; if the document has been modified, it asks the user if the document should be saved. It includes the statement `with timeout of 20 seconds`, so that if the user doesn’t complete the `close` operation within 20 seconds, the operation times out.\n\n```\ntell application \"TextEdit\"\n    with timeout of 20 seconds\n        close document 1 saving ask\n    end timeout\nend tell\n```\n\n##### Discussion\n\nWhen a command fails to complete in the allotted time (whether the default of two minutes, or a time set by a `with timeout` statement), AppleScript stops running the script and returns the error `\"event timed out\"`.<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_900\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_901\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_902\"></a> AppleScript does not cancel the operation—it merely stops execution of the script. If you want the script to continue, you can wrap the statements in a `try` statement. However, whether your script can send a command to cancel an offending lengthy operation after a timeout is dependent on the application that is performing the command.\n\nA `with timeout` statement applies only to commands sent to application objects, not to commands sent to the application that is running the script.\n\nIn some situations, you may want to use an `ignoring application responses` statement (instead of a `with timeout` statement) so that your script needn’t wait for application commands to complete. For more information, see [considering and ignoring Statements](#//apple_ref/doc/uid/TP40000983-CH6g-130224).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-131273\"></a>\n\n### with transaction Statements\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_903\"></a>When you execute a script, AppleScript may send one or more Apple events to targeted applications. A transaction is a set of operations that are applied as a single unit—either all of the changes are applied or none are. This mechanism works only with applications that support it.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-131303\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_904\"></a>\n\nwith transaction\n\nAssociates a single transaction ID with any events sent to a target application as a result of executing commands in the body of the statement.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  with transaction [ session ]      [ statement ]...  end [ transaction ]  ``` |\n\n##### Placeholders\n\n*session*\n:   An object that identifies a specific session.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_202\"></a>\n\n##### Examples\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_905\"></a>This example uses a `with transaction` statement to ensure that a record can be modified by one user without being modified by another user at the same time. (In the following examples, “Small DB” and “Super DB” are representative database applications.)\n\n```\ntell application \"Small DB\"\n    with transaction\n        set oldName to Field \"Name\"\n        set oldAddress to Field \"Address\"\n        set newName to display dialog ¬\n            \"Please type a new name\" ¬\n            default answer oldName\n        set newAddress to display dialog ¬\n            \"Please type the new address\" ¬\n            default answer oldAddress\n        set Field \"Name\" to newName\n        set Field \"Address\" to newAddress\n    end transaction\nend tell\n```\n\nThe `set` statements obtain the current values of the Name and Address fields and invite the user to change them. Enclosing these `set` statements in a single `with transaction` statement informs the application that other users should not be allowed to access the same record at the same time.\n\nA `with transaction` statement works only with applications that explicitly support it. Some applications only support `with transaction` statements (like the one in the previous example) that do not take a session object as a parameter. Other applications support both `with transaction` statements that have no parameter and `with transaction` statements that take a session parameter.\n\nThe following example demonstrates how to specify a session for a `with transaction` statement:<a id=\"//apple_ref/doc/uid/TP40000983-CH6g-DontLinkElementID_906\"></a>\n\n```\ntell application \"Super DB\"\n    set mySession to make session with data {user: \"Bob\", password: \"Secret\"}\n    with transaction mySession\n        ...\n    end transaction\nend tell\n```\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_control_statements.html", "sha256": "13199efe6f8d2eede9ce927030b04525cb54401af1467fa37d08b4c24c281fa9", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_error_codes.md", "title": "Error Numbers and Error Messages", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW5\"></a>\n\n# Error Numbers and Error Messages\n\nThis appendix describes error numbers and error messages provided by AppleScript and macOS.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW1\"></a>\n\n## AppleScript Errors\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_907\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_908\"></a>An AppleScript error is an error that occurs when AppleScript processes script statements. Nearly all of these are of interest to users. For errors returned by an application, see the documentation for that application.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW3\"></a>\n\n**Table B-1**  AppleScript errors\n\n| Error number | Error message |\n| -2700 | Unknown error. |\n| -2701 | Can’t divide &lt;number&gt; by zero. |\n| -2702 | The result of a numeric operation was too large. |\n| -2703 | &lt;reference&gt; can't be launched because it is not an application. |\n| -2704 | &lt;reference&gt; isn't scriptable. |\n| -2705 | The application has a corrupted dictionary. |\n| -2706 | Stack overflow. |\n| -2707 | Internal table overflow. |\n| -2708 | Attempt to create a value larger than the allowable size. |\n| -2709 | Can't get the event dictionary. |\n| -2720 | Can't both consider and ignore &lt;attribute&gt;. |\n| -2721 | Can't perform operation on text longer than 32K bytes. |\n| -2729 | Message size too large for the 7.0 Finder. |\n| -2740 | A &lt;language element&gt; can't go after this &lt;language element&gt;. |\n| -2741 | Expected &lt;language element&gt; but found &lt;language element&gt;. |\n| -2750 | The &lt;name&gt; parameter is specified more than once. |\n| -2751 | The &lt;name&gt; property is specified more than once. |\n| -2752 | The &lt;name&gt; handler is specified more than once. |\n| -2753 | The variable &lt;name&gt; is not defined. |\n| -2754 | Can't declare &lt;name&gt; as both a local and global variable. |\n| -2755 | Exit statement was not in a repeat loop. |\n| -2760 | Tell statements are nested too deeply. |\n| -2761 | &lt;name&gt; is illegal as a formal parameter. |\n| -2762 | &lt;name&gt; is not a parameter name for the event &lt;event&gt;. |\n| -2763 | No result was returned for some argument of this expression. |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW2\"></a>\n\n## Operating System Errors\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_909\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_910\"></a>An operating system error is an error that occurs when AppleScript or an application requests services from the Mac OS. They are rare, and often there is nothing you can do about them in a script, other than report them. A few, such as `\"User canceled\"`, make sense for scripts to handle—as shown, for an example, in the Examples section for the [display dialog](ASLR_cmds.md#//apple_ref/doc/uid/TP40000983-CH216-SW12) command.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW4\"></a>\n\n**Table B-2**  Mac OS errors\n\n| Error number | Error message |\n| 0 | No error. |\n| -34 | Disk &lt;name&gt; full. |\n| -35 | Disk &lt;name&gt; wasn’t found. |\n| -37 | Bad name for file |\n| -38 | File &lt;name&gt; wasn’t open. |\n| -39 | End of file error. |\n| -42 | Too many files open. |\n| -43 | File &lt;name&gt; wasn’t found. |\n| -44 | Disk &lt;name&gt; is write protected. |\n| -45 | File &lt;name&gt; is locked. |\n| -46 | Disk &lt;name&gt; is locked. |\n| -47 | File &lt;name&gt; is busy. |\n| -48 | Duplicate file name. |\n| -49 | File &lt;name&gt; is already open. |\n| -50 | Parameter error. |\n| -51 | File reference number error. |\n| -61 | File not open with write permission. |\n| -108 | Out of memory. |\n| -120 | Folder &lt;name&gt; wasn’t found. |\n| -124 | Disk &lt;name&gt; is disconnected. |\n| -128 | User cancelled. |\n| -192 | A resource wasn’t found. |\n| -600 | Application isn’t running |\n| -601 | Not enough room to launch application with special requirements. |\n| -602 | Application is not 32-bit clean. |\n| -605 | More memory needed than is specified in the size resource. |\n| -606 | Application is background-only. |\n| -607 | Buffer is too small. |\n| -608 | No outstanding high-level event. |\n| -609 | Connection is invalid. |\n| -904 | Not enough system memory to connect to remote application. |\n| -905 | Remote access is not allowed. |\n| -906 | &lt;name&gt; isn’t running or program linking isn’t enabled. |\n| -915 | Can’t find remote machine. |\n| -30720 | Invalid date and time &lt;date string&gt;. |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW6\"></a>\n\n## Apple Event Errors\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_911\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_912\"></a>An Apple event error may occur when an app attempts to process an event sent by a script or a script attempts to process the reply.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW7\"></a>\n\n**Table B-3**  Apple Event Manager errors\n\n| Error number | Error message |\n| -1700 | Bad parameter data was detected or there was a failure while performing a coercion. |\n| -1701 | An Apple event description was not found. |\n| -1702 | Corrupt data was detected. |\n| -1703 | The wrong data type was detected. |\n| -1704 | An invalid Apple event description was detected. |\n| -1705 | The specified list item doesn’t exist. |\n| -1706 | A newer version of Apple Event Manager is required to perform this operation. |\n| -1707 | The event isn’t an Apple event. |\n| -1708 | The script doesn’t understand the &lt;message&gt; message. The event was not handled. |\n| -1709 | An invalid reply parameter was received by `AEResetTimer`. |\n| -1710 | An invalid sending mode (something other than `NoReply`, `WaitReply`, or `QueueReply`) was detected or interaction level is unknown. |\n| -1711 | The user canceled while waiting for an event reply. |\n| -1712 | The Apple event has timed out. |\n| -1713 | User interaction is not allowed. |\n| -1714 | There is no special function for this keyword. |\n| -1715 | A required parameter is missing. |\n| -1716 | The target address type of an Apple event is unknown. |\n| -1717 | Unable to find a matching event or coercion handler. |\n| -1718 | Unable to access the contents of an event reply because the reply hasn’t been received yet. |\n| -1719 | The specified index is invalid or out of range. |\n| -1720 | The specified range is invalid, such as `3rd` to `2nd` or `1st` to `all`. |\n| -1721 | The wrong number of arguments was detected. |\n| -1723 | The accessor was not found. |\n| -1725 | There is no such Boolean operator. |\n| -1726 | An invalid comparison was made or an invalid logical descriptor was detected. |\n| -1727 | `AEResolve` was given a non-object parameter. |\n| -1728 | The referenced object doesn’t exist. This is a run-time resolution error, such as when attempting to reference a third object when only two objects exist. |\n| -1729 | An object counting procedure returned a negative value. |\n| -1730 | Attempted to pass an empty list to an accessor. |\n| -1731 | An unknown type of object was detected. |\n| -10000 | The Apple event handler failed. |\n| -10001 | A type mismatch has occurred. |\n| -10002 | Invalid key form was detected. |\n| -10003 | The specified object cannot be modified. |\n| -10004 | A privilege error has occurred. |\n| -10005 | The read operation was denied. |\n| -10006 | The write operation was denied. |\n| -10007 | The object index is too large. |\n| -10008 | The specified object is not an element. |\n| -10009 | Unable to provide the requested type. |\n| -10010 | The Apple event handler doesn’t support the specified class. |\n| -10011 | The event is not part of the current transaction. |\n| -10012 | There is no such transaction. |\n| -10013 | Nothing is selected by the user. |\n| -10014 | The Apple event handler only handles single objects. |\n| -10015 | The previous action can’t be undone. |\n| -10016 | The Apple event handler does not handle remote events. |\n| -10023 | The specified constant value is invalid for this property. |\n| -10024 | The specified class can’t be an element of the specified container, such as when attempting to make or duplicate an object. |\n| -10025 | An invalid combination of properties was provided, such as for the `set`, `make`, or `duplicate` command. |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW8\"></a>\n\n## Open Scripting Architecture Errors\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_913\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH220-DontLinkElementID_914\"></a>An Open Scripting Architecture error may occur when the scripting system itself encounters an error.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH220-SW9\"></a>\n\n**Table B-4**  Open Scripting Architecture errors\n\n| Error number | Error message |\n| -1750 | A scripting component error has occurred. |\n| -1751 | An invalid script ID was detected. |\n| -1752 | The script isn’t a supported type. |\n| -1753 | A script error has occurred. |\n| -1754 | A bad selector was detected. |\n| -1756 | The source is not available. |\n| -1757 | There is no matching dialect. |\n| -1758 | The data format is obsolete. |\n| -1759 | The data format is too new. |\n| -1761 | There is a component mismatch—parameters are from two different components. |\n| -1762 | Unable to connect to the scripting system matching the specified ID. |\n| -1763 | Unable to store memory pointers in a saved script. |\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_error_codes.html", "sha256": "418d30cd4500d458c8c433d6a8e86bf1b0da7b0976bd79e1b51adb0d3abb5bfb", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_error_xmpls.md", "title": "Working with Errors", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH221-SW1\"></a>\n\n# Working with Errors\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_915\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_916\"></a>This appendix provides a detailed example of handling errors with [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973) and [error Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-129657). It shows how to use a `try` statement to check for bad data and other errors, and an `error` statement to pass on any error that can’t be handled. It also shows how to check for just a particular error number that you are interested in.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH221-SW2\"></a>\n\n## Catching Errors in a Handler\n\nThe `SumIntegerList` handler expects a list of integers. If any item in the passed list is not an integer, `SumIntegerList` signals `error number 750` and returns 0. The handler includes an error handler that displays a dialog if the error number is equal to 750; if the error number is not equal to 750, the handler resignals the error with an `error` statement so that other statements in the call chain can handle the unknown error. <a id=\"//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_917\"></a>If no statement handles the error, AppleScript displays an error dialog and execution stops.\n\n```\non SumIntegerList from itemList\n    try\n        -- Initialize return value.\n        set integerSum to 0\n        -- Before doing sum, check that all items in list are integers.\n        if ((count items in itemList) is not equal to ¬\n            (count integers in itemList)) then\n            -- If all items aren’t integers, signal an error.\n            error number 750\n        end if\n        -- Use a repeat statement to sum the integers in the list.\n        repeat with currentItem in itemList\n            set integerSum to integerSum + currentItem\n        end repeat\n        return integerSum -- Successful completion of handler.\n    on error errStr number errorNumber\n        -- If our own error number, warn about bad data.\n        if the errorNumber is equal to 750 then\n            display dialog \"All items in the list must be integers.\"\n            return integerSum -- Return the default value (0).\n        else\n            -- An unknown error occurred. Resignal, so the caller\n            -- can handle it, or AppleScript can display the number.\n            error errStr number errorNumber\n        end if\n    end try\nend SumIntegerList\n```\n\nThe `SumIntegerList` handler handles various error conditions. For example, the following call completes without error:\n\n```\nset sumList to {1, 3, 5}\nset listTotal to SumIntegerList from sumList --result: 9\n```\n\nThe following call passes bad data—the list contains an item that isn’t an integer:\n\n```\nset sumList to {1, 3, 5, \"A\"}\nset listTotal to SumIntegerList from sumList\nif listTotal is equal to 0 then\n    -- the handler didn’t total the list;\n    -- do something to handle the error (not shown)\nend if\n```\n\nThe `SumIntegerList` routine checks the list and signals an error 750 because the list contains at least one non-integer item. The routine’s error handler recognizes error number 750 and puts up a dialog to describe the problem. The `SumIntegerList` routine returns 0. The script checks the return value and, if it is equal to 0, does something to handle the error (not shown).\n\nSuppose some unknown error occurs while `SumIntegerList` is processing the integer list in the previous call. When the unknown error occurs, the `SumIntegerList` error handler calls the `error` command to resignal the error. Since the caller doesn’t handle it, AppleScript displays an error dialog and execution halts. The `SumIntegerList` routine does not return a value.\n\nFinally, suppose the caller has its own error handler, so that if the handler passes on an error, the caller can handle it. Assume again that an unknown error occurs while `SumIntegerList` is processing the integer list.\n\n```\ntry\n    set sumList to {1, 3, 5}\n    set listTotal to SumIntegerList from sumList\non error errMsg number errorNumber\n    display dialog \"An unknown error occurred:  \" & errorNumber as text\nend try\n```\n\nIn this case, when the unknown error occurs, the `SumIntegerList` error handler calls the `error` command to resignal the error. Because the caller has an error handler, it is able to handle the error by displaying a dialog that includes the error number. Execution can continue if it is meaningful to do so.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH221-SW3\"></a>\n\n## Simplified Error Checking\n\nAppleScript provides a mechanism to streamline the way you can catch and handle individual errors. It is often necessary for a script to handle a particular error, but not others. It is possible to catch an error, check for the error number you are interested in, and use an error statement to resignal for other errors. For example:\n\n```\ntry\n    open for access file \"MyFolder:AddressData\" with write permission\non error msg number n from f to t partial result p\n    if n = -49 then -- File already open error\n        display dialog \"I'm sorry but the file is already open.\"\n    else\n        error msg number n from f to t partial result p\n    end if\nend try\n```\n\nThis script tries to open a file with write permission, but if the file is already opened, it just displays a dialog. However, you can instead implement this more concisely as:\n\n```\ntry\n    open for access file \"MyFolder:AddressData\" with write permission\non error number -49\n    display dialog \"I'm sorry but the file is already open.\"\nend try\n```\n\nIn this version, there is no need to list the `message`, `from`, `to`, or `partial result` parameters, in order to pass them along. If the error is not -49 (file &lt;name&gt; is already open), this error handler will not catch the error, and AppleScript will pass the error to the next handler in an outer scope.\n\nOne drawback to this approach is that you must use a literal constant for the error number in the `on error` parameter list. You can't use global variable or property names because the number must be known when the script is compiled.<a id=\"//apple_ref/doc/uid/TP40000983-CH221-DontLinkElementID_918\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_error_xmpls.html", "sha256": "4c5c1272c48e8cdc3049d63767d963b534e01884bc4e775b7f8fbb87021d3aaa", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_folder_actions.md", "title": "Folder Actions Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW2\"></a>\n\n# Folder Actions Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_919\"></a>Folder Actions is a feature of macOS that lets you associate AppleScript scripts with folders. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its window is opened, closed, moved, or resized. The script provides a handler that matches the appropriate format for the action, as described in this chapter.\n\nFolder Actions make it easy to create hot folders that respond to external actions to trigger a workflow. For example, you can use a Folder Action script to initiate automated processing of any photo dropped in a targeted folder. A well written Folder Action script leaves the hot folder empty. This avoids repeated application of the action to the same files, and allows Folder Actions to perform more efficiently.\n\nYou can Control-click a folder to access some Folder Action features with the contextual menu in the Finder. Or you can use the Folder Actions Setup application, located in `/System/Library/CoreServices`. This application lets you perform tasks such as the following:\n\n* Enable or disable Folder Actions.\n* View the folders that currently have associated scripts\n* View and edit the script associated with a folder.\n* Add folders to or remove folders from the list of folders.\n* Associate one or more scripts with a folder.\n* Enable or disable all scripts associated with a folder.\n* Enable or disable individual scripts associated with a folder.\n* Remove scripts associated with a folder.\n\nFolder Actions Setup looks for scripts located in `/Library/Scripts/Folder Action Scripts` and `~/Library/Scripts/Folder Action Scripts`. You can use the sample scripts located in `/Library/Scripts/Folder Action Scripts` or any scripts you have added to these locations, or you can navigate to other scripts.\n\nA Folder Action script provides a handler (see [Handler Reference](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-163762)) that is invoked when the specified action takes place. When working with Folder Action handlers, keep in mind that:\n\n* You do not invoke Folder Actions directly. Instead, when a triggering action takes place on a folder, the associated handler is invoked automatically.\n* When a Folder Action handler is invoked, none of the parameters is optional.\n* A Folder Action handler does not return a value.\n\nHere’s how you can use a Folder Action script to perform a specific action whenever an image file is dropped on a specific image folder:\n\n1. Create a script with Script Editor or another script application.\n2. In that script, write a handler that conforms to the syntax documented here for the `adding folder items to` folder action. Your handler can use the aliases that are passed to it to access the image files dropped on the folder.\n3. Save the script as a compiled script or script bundle.\n4. Put a copy of the script in `/Library/Scripts/Folder Action Scripts` or `~/Library/Scripts/Folder Action Scripts`.\n5. Use the Folder Actions Setup application, located in `/Applications/AppleScript`, to:\n\n   1. Enable folder actions for your image folder.\n   2. Add a script to that folder, choosing the script you created.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW48\"></a>\n\nadding folder items to\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_920\"></a>A script handler that is invoked after items are added to its associated folder.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on adding folder items to alias after receiving listOfAlias  [ statement ]... end [ adding folder items to ]  ``` |\n\n##### Placeholders\n\n*alias*\n:   An `alias` that identifies the folder that received the items.\n\n*listOfAlias*\n:   List of aliases that identify the items added to the folder.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_203\"></a>\n\n##### Examples\n\nThe following Folder Action handler is triggered when items are added to the folder to which it is attached. It makes an archived copy, in ZIP format, of the individual items added to the attached folder. Archived files are placed in a folder named `Done` within the attached folder.\n\n```\n \non adding folder items to this_folder after receiving these_items\n    tell application \"Finder\"\n        if not (exists folder \"Done\" of this_folder) then\n            make new folder at this_folder with properties {name:\"Done\"}\n        end if\n        set the destination_folder to folder \"Done\" of this_folder as alias\n        set the destination_directory to POSIX path of the destination_folder\n    end tell\n    repeat with i from 1 to number of items in these_items\n        set this_item to item i of these_items\n        set the item_info to info for this_item\n        if this_item is not the destination_folder and ¬\n            the name extension of the item_info is not in {\"zip\", \"sit\"} then\n            set the item_path to the quoted form of the POSIX path of this_item\n            set the destination_path to the quoted form of ¬\n                (destination_directory & (name of the item_info) & \".zip\")\n            do shell script (\"/usr/bin/ditto -c -k -rsrc --keepParent \" ¬\n                & item_path & \" \" & destination_path)\n        end if\n    end repeat\nend adding folder items to\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW1\"></a>\n\nclosing folder window for\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_921\"></a>A script handler that is invoked after a folder’s associated window is closed.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on closing folder window for alias  [ statement ]... end [ closing folder window for ]  ``` |\n\n##### Placeholders\n\n*alias*\n:   An `alias` that identifies the folder that was closed.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_204\"></a>\n\n##### Examples\n\nThe following Folder Action handler is triggered when the folder to which it is attached is closed. It closes any open windows of folders within the targeted folder.\n\n```\n-- This script is designed for use with OS X v10.2 and later.\non closing folder window for this_folder\n    tell application \"Finder\"\n        repeat with EachFolder in (get every folder of folder this_folder)\n            try\n                close window of EachFolder\n            end try\n        end repeat\n    end tell\nend closing folder window for\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW50\"></a>\n\nmoving folder window for\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_922\"></a>A script handler that is invoked after a folder’s associated window is moved or resized. Not currently available.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on moving folder window for alias from bounding rectangle  [ statement ]... end [ moving folder window for ]  ``` |\n\n##### Placeholders\n\n*alias*\n:   An `alias` that identifies the folder that was moved or resized. You can use this alias to obtain the folder window’s new coordinates from the Finder.\n\n*bounding rectangle*\n:   The previous coordinates of the window of the folder that was moved or resized. The coordinates are provided as a list of four numbers, {left, top, right, bottom}; for example, {10, 50, 500, 300} for a window whose origin is near the top left of the screen (but below the menu bar, if present).\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_205\"></a>\n\n##### Examples\n\n```\non moving folder window for this_folder from original_coordinates\n    tell application \"Finder\"\n        set this_name to the name of this_folder\n        set the bounds of the container window of this_folder ¬\n            to the original_coordinates\n    end tell\n    display dialog \"Window \\\\\"\" & this_name & \"\\\\\" has been returned to its original size and position.\" buttons {\"OK\"} default button 1\nend moving folder window for\n```\n\n##### Special Considerations\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_206\"></a>\n\n**Warning:** In OS X v10.5, and possibly in previous OS versions, Folder Actions does not activate attached `moving folder window for` scripts when the folder is moved.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW51\"></a>\n\nopening folder\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_923\"></a>A script handler that is invoked when its associated folder is opened in a window.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on opening folder alias  [ statement ]... end [ opening folder ]  ``` |\n\n##### Placeholders\n\n*alias*\n:   An `alias` that identifies the folder that was opened.\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_207\"></a>\n\n##### Examples\n\nThe following Folder Action handler is triggered when the folder it is attached to is opened. It displays any text from the Spotlight Comments field of the targeted folder. (Prior to OS X v10.4, this script displays text from the Comments field of the specified folder.)\n\n```\n-- This script is designed for use with OS X v10.2 and later.\nproperty dialog_timeout : 30 -- set the amount of time before dialogs auto-answer.\n \non opening folder this_folder\n    tell application \"Finder\"\n        activate\n        set the alert_message to the comment of this_folder\n        if the alert_message is not \"\" then\n            display dialog alert_message buttons {\"Open Comments\", \"Clear Comments\", \"OK\"} default button 3 giving up after dialog_timeout\n            set the user_choice to the button returned of the result\n            if the user_choice is \"Clear Comments\" then\n                set comment of this_folder to \"\"\n            else if the user_choice is \"Open Comments\" then\n                open information window of this_folder\n            end if\n        end if\n    end tell\nend opening folder\n```\n\n##### Special Considerations\n\nSpotlight was introduced in OS X v10.4. In prior versions of the Mac OS, the example script shown above works with the Comments field of the specified folder, rather than the Spotlight Comments field.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-SW52\"></a>\n\nremoving folder items from\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_924\"></a>A script handler that is invoked after items have been removed from its associated folder.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on removing folder items from alias after losing listOfAliasOrText  [ statement ]... end [ removing folder items from ]  ``` |\n\n##### Placeholders\n\n*alias*\n:   An `alias` that identifies the folder from which the items were removed.\n\n*listOfAliasOrText*\n:   List of aliases that identify the items lost (removed) from the folder. For permanently deleted items, only the names are provided (as `text` strings).\n\n*statement*\n:   Any AppleScript statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_208\"></a>\n\n##### Examples\n\nThe following Folder Action handler is triggered when items are removed from the folder to which it is attached. It displays an alert containing the number of items removed.<a id=\"//apple_ref/doc/uid/TP40000983-CH219-DontLinkElementID_925\"></a>\n\n```\non removing folder items from this_folder after losing these_items\n    tell application \"Finder\"\n        set this_name to the name of this_folder\n    end tell\n    set the item_count to the count of these_items\n    display dialog (item_count as text) & \" items have been removed \" & \"from folder \\\\\"\" & this_name & \"\\\\\".\" buttons {\"OK\"} default button 1\nend removing folder items from\n```\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_folder_actions.html", "sha256": "1af6c0a40e60da744c781aaea1662c391ffb5f6a512461d7594e25465c177bfd", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_glossary.md", "title": "Glossary", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW1\"></a>\n\n# Glossary\n\n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW2\"></a>**absolute object specifier**\n\n  An object specifier that has enough information to identify an object or objects uniquely. For an object specifier to an application object to be complete, its outermost container must be the application itself. See [relative object specifier](#//apple_ref/doc/uid/TP40000983-CH213-SW95).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW3\"></a>\n  **Apple event**\n\n  An interprocess message that encapsulates a command in a form that can be passed across process boundaries, performed, and responded to with a reply event. When an AppleScript script is executed, a statement that targets a scriptable application may result in an Apple event being sent to that application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW4\"></a>**AppleScript**\n\n  A scripting language that makes possible direct control of scriptable applications and scriptable parts of macOS.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW5\"></a>**AppleScript command**\n\n  A script command provided by AppleScript. AppleScript commands do not have to be included in `tell` statements.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW6\"></a>**application command**\n\n  A command that is defined by scriptable application to provide access to a scriptable feature. An application command must either be included in a `tell` statement or include the name of the application in its direct parameter.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW7\"></a>**application object**\n\n  An object stored in an application or its documents and managed by the application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW8\"></a>**arbitrary reference form**\n\n  A reference form that specifies an arbitrary object in a container.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW9\"></a>**assignment statement**\n\n  A statement that assigns a value to a variable. Assignment statements use the `copy` or `set` commands.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW10\"></a>**attribute**\n\n  A characteristic that can be considered or ignored in a `considering` or `ignoring` statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW11\"></a>**binary operator**\n\n  An operator that derives a new value from a pair of values.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW12\"></a>**boolean**\n\n  A logical truth value; see the `boolean` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW13\"></a>**Boolean expression**\n\n  An expression whose value can be either true or false.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW14\"></a>**chevrons**\n\n  See [double angle brackets](#//apple_ref/doc/uid/TP40000983-CH213-BBCFEEHB).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW15\"></a>**child script object**\n\n  A `script` object that inherits properties and handlers from another object, called the parent.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCGGDFI\"></a>**class**\n\n  (1) A category for objects that share characteristics such as properties and elements and respond to the same commands. (2) The label for the AppleScript `class` property—a reserved word that specifies the class to which an object belongs.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW54\"></a>**coercion**\n\n  The process of converting an object from one class to another. For example, an integer value can be coerced into a real value. Also, the software that performs such a conversion. Also known as object conversion.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW17\"></a>**command**\n\n  A word or series of words that requests an action. See also [handler](#//apple_ref/doc/uid/TP40000983-CH213-SW55).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW18\"></a>**comment**\n\n  Text that remains in a script after compilation but is ignored by AppleScript when the script is executed.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW19\"></a>**compile**\n\n  In AppleScript, to convert a script from the form typed into a script editor to a form that can be used by AppleScript. The process of compiling a script includes syntax and vocabulary checks. A script is compiled when you first run it and again when you modify it and then run it again, save it, or check its syntax.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW20\"></a>**compiled script**\n\n  The form to which a script is converted when you compile it.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW21\"></a>**composite value**\n\n  A value that contains other values. Lists, records, and strings are examples of composite values.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCICCIH\"></a>**compound statement**\n\n  A statement that occupies more than one line and contains other statements. A compound statement begins with a reserved word indicating its function and ends with the word `end`. See also [simple statement](#//apple_ref/doc/uid/TP40000983-CH213-BBCFBDBH).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW22\"></a>**conditional statement**\n\n  See [if statement](#//apple_ref/doc/uid/TP40000983-CH213-BBCGEIFI).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW23\"></a>**considering statement**\n\n  A control statement that lists a specific set of attributes to be considered when AppleScript performs operations on strings or sends commands to applications.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW24\"></a>**constant**\n\n  A reserved word with a predefined value; see the `constant` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW25\"></a>**container**\n\n  An object that contains one or more other objects, known as elements. You specify containers with the reserved words `of` or `in`.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW26\"></a>**continuation character**\n\n  A character used in Script Editor to extend a statement to the next line. With a U.S. keyboard, you can enter this character by typing Option-l (lower-case L).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW29\"></a>**continue statement**\n\n  A statement that controls when and how other statements are executed. AppleScript defines standard control statements such as `if`, `repeat`, and `while`.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW27\"></a>**control statement**\n\n  A statement that causes AppleScript to exit the current handler and transfer execution to the handler with the same name in the parent. A `continue` statement can also be used to invoke an inherited handler in the local context.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW28\"></a>**current application**\n\n  The application that is using the AppleScript component to compile and execute scripts (typically, Script Editor).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW117\"></a>**current script**\n\n  The script currently being executed.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW30\"></a>**current target**\n\n  The object that is the current default target for commands.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW31\"></a>**data**\n\n  A class used for data that do not belong to any of the other AppleScript classes; see the `data` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW32\"></a>**date**\n\n  A class that specifies a time, day of the month, month, and year; see the `date` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW33\"></a>**declaration**\n\n  The first occurrence of a variable or property identifier in a script. The form and location of the declaration determine how AppleScript treats the identifier in that script—for example, as a property, global variable, or local variable.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW34\"></a>**default target**\n\n  The object that receives a command if no object is specified or if the object is incompletely specified in the command. Default (or implicit) targets are specified in `tell` statements.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW35\"></a>**delegation**\n\n  The handing off of control to another object. In AppleScript, the use of a `continue` statement to call a handler in a parent object or the current application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW36\"></a>**dialect**\n\n  A version of the AppleScript language that resembles a specific human language or programming language. As of AppleScript 1.3, English is the only dialect supported.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW37\"></a>**dictionary**\n\n  The set of commands, objects, and other terminology that is understood by an application or other scriptable entity. You can display an application’s dictionary with Script Editor.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW38\"></a>**direct parameter**\n\n  The parameter immediately following a command, which typically specifies the object to which the command is sent.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCFEEHB\"></a>**double angle brackets**\n\n  Characters («») typically used by AppleScript to enclose raw data. With a U.S. keyboard, you can enter double angle brackets (also known as chevrons) by typing Option-Backslash and Shift-Option-Backslash.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW39\"></a>**element**\n\n  An object contained within another object. An object can typically contain zero or more of each of its elements.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW40\"></a>**empty list**\n\n  A list containing no items. See the `list` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW41\"></a>**error expression**\n\n  An expression, usually a `text` object, that describes an error.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW42\"></a>**error handler**\n\n  A collection of statements that are executed in response to an error message. See the `try` statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW43\"></a>**error message**\n\n  A message that is supplied by an application, by AppleScript, or by macOS when an error occurs during the handling of a command.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW44\"></a>**error number**\n\n  An integer that identifies an error.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW45\"></a>**evaluation**\n\n  The conversion of an expression to a value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW46\"></a>**every reference form**\n\n  A reference form that specifies every object of a particular type in a container.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW47\"></a>**exit statement**\n\n  A statement used in the body of a `repeat` statement to exit the Repeat statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW48\"></a>**explicit run handler**\n\n  A handler at the top level of a `script` object that begins with `on run` and ends with `end`. A single `script` object can include an explicit `run` handler or an implicit `run` handler, but not both.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW49\"></a>**expression**\n\n  In AppleScript, any series of words that has a value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW50\"></a>**filter**\n\n  A phrase, added to a reference to a system or application object, that specifies elements in a container that match one or more conditions.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW51\"></a>**filter reference form**\n\n  A reference form that specifies all objects in a container that match a condition specified by a Boolean expression.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW52\"></a>**formal parameter**\n\n  See [parameter variable](#//apple_ref/doc/uid/TP40000983-CH213-BBCHJJBG).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW53\"></a>**global variable**\n\n  A variable that is available anywhere in the script in which it is defined.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW55\"></a>**handler**\n\n  A collection of statements that can be invoked by name. See also [command](#//apple_ref/doc/uid/TP40000983-CH213-SW17).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW56\"></a>**identifier**\n\n  A series of characters that identifies a value or handler in AppleScript. Identifiers are used to name variables, handlers, parameters, properties, and commands.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW57\"></a>**ID reference form**\n\n  A reference form that specifies an object by the value of its ID property.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCGEIFI\"></a>**if statement**\n\n  A control statement that contains one or more Boolean expressions whose results determine whether to execute other statements within the `if` statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW58\"></a>**ignoring statement**\n\n  A control statement that lists a specific set of attributes to be ignored when AppleScript performs operations on text strings or sends commands to applications.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW59\"></a>**implicit run handler**\n\n  All the statements at the top level of a script except for property definitions, `script` object definitions, and other handlers. A single `script` object can include an explicit `run` handler or an implicit `run` handler, but not both.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW60\"></a>**index reference form**\n\n  A reference form that specifies an object by describing its position with respect to the beginning or end of a container.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW139\"></a>**inheritance**\n\n  The ability of a child `script` object to take on the properties and handlers of a parent object.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW62\"></a>**inheritance chain**\n\n  The hierarchy of objects that AppleScript searches to find the target for a command or the definition of a term.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW63\"></a>**initializing a script object**\n\n  The process of creating a `script` object from the properties and handlers listed in a `script` object definition. AppleScript creates a `script` object when it runs a script or handler that contains a `script` object definition.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW64\"></a>**insertion point**\n\n  A location where another object or objects can be added.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW65\"></a>**integer**\n\n  A positive or negative number without a fractional part; see the `integer` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW137\"></a>**item**\n\n  A value in a list or record. An item can be specified by its offset from the beginning or end of the list or record.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW66\"></a>**keyword**\n\n  A word that is part of the AppleScript language. Synonymous with [reserved word](#//apple_ref/doc/uid/TP40000983-CH213-SW99).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW67\"></a>**labeled parameter**\n\n  A parameter that is identified by a label. See also [positional parameter](#//apple_ref/doc/uid/TP40000983-CH213-BBCDAEBE).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW138\"></a>**lifetime**\n\n  The period of time over which a variable or property is in existence.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW68\"></a>**list**\n\n  An ordered collection of values; see the `list` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW69\"></a>**literal**\n\n  A value that evaluates to itself.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW70\"></a>**local variable**\n\n  A variable that is available only in the handler in which it is defined. Variables that are defined within handlers are local unless they are explicitly declared as global variables.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW71\"></a>**log statement**\n\n  A script statement that reports the value of one or more variables to the Event Log pane of a script window, and to the Event Log History window, if it is open.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW72\"></a>**loop**\n\n  A series of statements that is repeated.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW73\"></a>**loop variable**\n\n  A variable whose value controls the number of times the statements in a `repeat` statement are executed.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW74\"></a>**middle reference form**\n\n  A reference form that specifies the middle object of a particular class in a container. (This form is rarely used.)\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW75\"></a>**name reference form**\n\n  A reference form that specifies an object by name—that is, by the value of its `name` property.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW76\"></a>**nested control statement**\n\n  A control statement that is contained within another control statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW77\"></a>**number**\n\n  A synonym for the AppleScript classes `integer` and `real`.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW78\"></a>**object**\n\n  An instantiation of a class definition, which can include properties and actions.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW16\"></a>**object conversion**\n\n  See [coercion](#//apple_ref/doc/uid/TP40000983-CH213-SW54).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW79\"></a>**object specifier**\n\n  A phrase specifies the information needed to find another object in terms of the objects in which it is contained. See also [absolute object specifier](#//apple_ref/doc/uid/TP40000983-CH213-SW2), [relative object specifier](#//apple_ref/doc/uid/TP40000983-CH213-SW95), and [reference form](#//apple_ref/doc/uid/TP40000983-CH213-SW94).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW80\"></a>**operand**\n\n  An expression from which an operator derives a value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW81\"></a>**operation**\n\n  The evaluation of an expression that contains an operator.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW82\"></a>**operator**\n\n  A symbol, word, or phrase that derives a value from another value or pair of values.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW136\"></a>**optional parameter**\n\n  A parameter that need not be included for a command to be successful.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW83\"></a>**outside property, variable, or statement**\n\n  A property, variable, or statement in a `script` object but occurs outside of any handlers or nested `script` objects.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCHJJBG\"></a>**parameter variable**\n\n  An identifier in a handler definition that represents the actual value of a parameter when the handler is called. Also called a *formal parameter*.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW84\"></a>**parent object**\n\n  An object from which another `script` object, called the child, inherits properties and handlers. A parent object may be any object, such as a `list` or an `application` object, but it is typically another `script` object.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCDAEBE\"></a>**positional parameter**\n\n  A handler parameter that is identified by the order in which it is listed. In a handler call, positional parameters are enclosed in parentheses and separated by commas. They must be listed in the order in which they appear in the corresponding handler definition.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW85\"></a>**property**\n\n  A labeled container in which to store a value. Properties can specify characteristics of objects.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW86\"></a>**property reference form**\n\n  A reference form that specifies a property of an `application` object, `record` or `script` object.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW87\"></a>**range reference form**\n\n  A reference form that specifies a series of objects of the same class in the same container.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW88\"></a>**raw format**\n\n  AppleScript terms enclosed in double angle brackets, or chevrons («»). AppleScript uses raw format because it cannot find a script term in any available dictionary, or cannot display data in its native format.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW89\"></a>**real**\n\n  A number that can include a decimal fraction; see the `real` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW90\"></a>**record**\n\n  An unordered collection of properties, identified by unique labels; see the `record` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW91\"></a>**recordable application**\n\n  An application that uses Apple events to report user actions for recording purposes. When recording is turned on, Script Editor creates statements corresponding to any significant actions you perform in a recordable application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW92\"></a>**recursive handler**\n\n  A handler that calls itself.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW93\"></a>**reference**\n\n  An object that encapsulates an object specifier.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW94\"></a>**reference form**\n\n  The syntax for identifying an object or group of objects in an application or other container—that is, the syntax for constructing an object specifier. AppleScript defines reference forms for arbitrary, every, filter, ID, index, middle, name, property, range, and relative.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW95\"></a>**relative object specifier**\n\n  An object specifier that does not include enough information to identify an object or objects uniquely. When AppleScript encounters a partial object specifier, it uses the default object specified in the enclosing `tell` statement to complete the reference. See [absolute object specifier](#//apple_ref/doc/uid/TP40000983-CH213-SW2).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW96\"></a>**relative reference form**\n\n  A reference form that specifies an object or location by describing its position in relation to another object, known as the base, in the same container.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW97\"></a>**repeat statement**\n\n  A control statement that contains a series of statements to be repeated and, in most cases, instructions that specify when the repetition stops.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW98\"></a>**required parameter**\n\n  A parameter that must be included for a command to be successful.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW99\"></a>**reserved word**\n\n  A word that is part of the AppleScript language. Synonymous with [keyword](#//apple_ref/doc/uid/TP40000983-CH213-SW66).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW100\"></a>**result**\n\n  A value generated when a command is executed or an expression evaluated.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW61\"></a>**return statement**\n\n  A statement that exits a handler and optionally returns a specified value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW101\"></a>**scope**\n\n  The range over which AppleScript recognizes a variable or property, which determines where else in a script you may refer to that variable or property.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW102\"></a>**script**\n\n  A series of written instructions that, when executed, cause actions in applications or macOS.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW103\"></a>**scriptable application**\n\n  An application that can be controlled by a script. For AppleScript, that means being responsive to interapplication messages, called Apple events, sent when a script command targets the application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW104\"></a>**script application**\n\n  An application whose only function is to run the script associated with it.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW106\"></a>**script editor**\n\n  An application used to create and modify scripts.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW107\"></a>**Script Editor**\n\n  The script-editing application distributed with AppleScript.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW108\"></a>**scripting addition**\n\n  A file that provides additional commands or coercions you can use in scripts. If a scripting addition is located in the Scripting Additions folder, its terminology is available for use by any script.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW140\"></a>**scripting addition command**\n\n  A command that is implemented as a scripting addition.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW126\"></a>**script library**\n\n  A script saved in a Script Libraries folder so it can be used by other scripts.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW109\"></a>**script object**\n\n  A user-defined object that can combine data (in the form of properties) and actions (in the form of handlers and additional `script` objects).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW110\"></a>**script object definition**\n\n  A compound statement that contains a collection of properties, handlers, and other AppleScript statements.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-BBCFBDBH\"></a>**simple statement**\n\n  One that can be written on a single line. See also [compound statement](#//apple_ref/doc/uid/TP40000983-CH213-BBCICCIH).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW112\"></a>**simple value**\n\n  A value, such as an integer or a constant, that does not contain other values.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW116\"></a>**Standard suite**\n\n  A set of standard AppleScript terminology that a scriptable application should support if possible. The Standard suite contains commands such as `count`, `delete`, `duplicate`, and `make`, and classes such as `application`, `document`, and `window`.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW105\"></a>**statement**\n\n  A series of lexical elements that follows a particular AppleScript syntax. Statements can include keywords, variables, operators, constants, expressions, and so on. See also [compound statement](#//apple_ref/doc/uid/TP40000983-CH213-BBCICCIH), [simple statement](#//apple_ref/doc/uid/TP40000983-CH213-BBCFBDBH).\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW113\"></a>**statement block**\n\n  One or more statements enclosed in a compound statement and having an `end` statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW114\"></a>**string**\n\n  A synonym for the `text` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW115\"></a>**styled text**\n\n  Text that may include style and font information. Not supported in AppleScript 2.0.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW132\"></a>**suite**\n\n  Within an application's scriptability information, a grouping of terms associated with related operations.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW118\"></a>**synonym**\n\n  An AppleScript word, phrase, or language element that has the same meaning as another AppleScript word, phrase, or language element. For example, the operator `does not equal` is a synonym for `≠`.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW119\"></a>**syntax**\n\n  The arrangement of words in an AppleScript statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW120\"></a>**syntax description**\n\n  The rules for constructing a valid AppleScript statement of a particular type.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW121\"></a>**system object**\n\n  An object that is part of a scriptable element of macOS.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW122\"></a>**target**\n\n  The recipient of a command. Potential targets include `application` objects, `script` objects (including the current script), and the current application.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW123\"></a>**tell statement**\n\n  A control statement that specifies the default target for the statements it contains.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW124\"></a>**test**\n\n  A Boolean expression that specifies the conditions of a filter or an `if` statement.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW125\"></a>**text**\n\n  An ordered series of characters (a text string); see the `text` class.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW127\"></a>**try statement**\n\n  A two-part compound statement that contains a series of AppleScript statements, followed by an error handler to be invoked if any of those statements cause an error.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW128\"></a>**unary operator**\n\n  An operator that derives a new value from a single value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW129\"></a>**Unicode**\n\n  An international standard that uses a 16-bit encoding to uniquely specify the characters and symbols for all commonly used languages.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW141\"></a>**Unicode code point**\n\n  A unique number that represents a character and allows it to be represented in an abstract way, independent of how it is rendered.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW130\"></a>**Unicode text**\n\n  A class that represents an ordered series of two-byte Unicode characters.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW142\"></a>**use statement**\n\n  A control statement that declares a required resource for a script and may import terminology from that resource.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW131\"></a>**user-defined command**\n\n  A command that is implemented by a handler defined in a `script` object.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW111\"></a>**using terms from statement**\n\n  A control statement that instructs AppleScript to use the terminology from the specified application in compiling the enclosed statements.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW133\"></a>**variable**\n\n  A named container in which to store a value.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW134\"></a>**with timeout statement**\n\n  A control statement that specifies the amount of time AppleScript waits for application commands to complete before stopping execution of the script.\n  \n* <a id=\"//apple_ref/doc/uid/TP40000983-CH213-SW135\"></a>**with transaction statement**\n\n  A control statement that allows you to take advantage of applications that support the notion of a transaction—a sequence of related events that should be performed as if they were a single operation, such that either all of the changes are applied or none are.\n  \n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_glossary.html", "sha256": "0002b6d36a75c0f6557bef4347eb8f2db290214770c1bbb47eeae2784de748ca", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_handlers.md", "title": "Handler Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-163762\"></a>\n\n# Handler Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_926\"></a>This chapter provides reference for handlers, which are defined and introduced in [About Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH). It describes the types of parameters you can use with handlers and how you invoke them. It also describes the `continue` and `return` statements, which you use to control the flow of execution in handlers.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-SW1\"></a>\n\ncontinue\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_927\"></a>A `continue` statement causes AppleScript to invoke the handler with the same name in the parent of the current handler. If there is no such handler in the parent, AppleScript looks up the parent chain, ending with the current application.\n\nA `continue` statement is like a handler call, in that after execution completes in the new location, it resumes with the statement after the `continue` statement.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` continue handlerName [ parameterList ]  ``` |\n\n##### Placeholders\n\n*handlerName*\n:   A required identifier that specifies the name of the current handler (which is also the name of the handler in which to continue execution).\n\n*parameterList*\n:   The list of parameters to be passed to *handlerName*. The list must follow the same format as the parameter definitions in the handler definition for the command. For handlers with labeled parameters, this means that the parameter labels must match those in the handler definition. For handlers with positional parameters, the parameters must appear in the correct order. You can list the parameter variables that were specified in the original command (and thus the original values) or you can list values that may differ from those of the original variables.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_928\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_929\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_209\"></a>\n\n##### Examples\n\nYou can write a handler that overrides an AppleScript command but uses a `continue` statement to pass control on to the AppleScript command if desired:\n\n```\non beep numTimes\n    set x to display dialog \"Start beeping?\" buttons {\"Yes\", \"No\"}\n    if button returned of x is \"Yes\" then ¬\n        continue beep numTimes -- Let AppleScript handle the beep.\n        -- In this example, nothing to do after returning from the continue.\nend beep\n \nbeep 3 --result: local beep handler invoked; shows dialog before beeping\ntell my parent to beep 3 -- result: AppleScript beep command invoked\n```\n\nWhen AppleScript encounters the statement `beep 3`, it invokes the local `beep` handler, which displays a dialog. If the user clicks Yes, the handler uses a `continue` statement to pass the `beep` command to the script’s parent (AppleScript), which handles the command by beeping. If the user clicks No, it does not continue the `beep` command, and no sound is heard.\n\nThe final statement, `tell my parent to beep 3`, shows how to directly invoke the AppleScript `beep` command, rather than the local handler.\n\nFor an example that uses a `continue` statement to exit a script handler and return control to the application’s default `quit` handler, see [quit Handlers](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW9).\n\nFor additional examples, see [Using the continue Statement in Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-SW9).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-163937\"></a>\n\nreturn\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_930\"></a>A `return` statement exits a handler and optionally returns a specified value. Execution continues at the place in the script where the handler was called.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_931\"></a>\n\n##### Syntax\n\n|  |\n| --- |\n| ```  return [ expression ]  ``` |\n\n##### Placeholders\n\n*expression*\n:   Represents the value to return.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_210\"></a>\n\n##### Examples\n\nThe following statement, inserted in the body of a handler, returns the integer `2`:\n\n```\nreturn 2 -- returns integer value 2\n```\n\nIf you include a `return` statement without an expression, AppleScript exits the handler immediately and no value is returned:\n\n```\nreturn -- no value returned\n```\n\nSee other sections throughout [Handler Reference](#//apple_ref/doc/uid/TP40000983-CH7g-163762) for more examples of scripts that use the `return` statement.\n\n##### Discussion\n\nIf a handler does not include a `return` statement, AppleScript returns the value returned by the last statement. If the last statement doesn’t return a value, AppleScript returns nothing.\n\nWhen AppleScript has finished executing a handler (that is, when it executes a `return` statement or the last statement in the handler), it passes control to the place in the script immediately after the place where the handler was called. If a handler call is part of an expression, AppleScript uses the value returned by the handler to evaluate the expression.\n\nIt is often considered good programming practice to have just one `return` statement and locate it at the end of a handler. Doing so can provide the following benefits:\n\n* The script is easier to understand.\n* The script is easier to debug.\n* You can place cleanup code in one place and make sure it is executed.\n\nIn some cases, however, it may make more sense to use multiple `return` statements. For example, the `minimumValue` handler in [Handler Syntax (Positional Parameters)](#//apple_ref/doc/uid/TP40000983-CH7g-166812) is a simple script that uses two `return` statements.\n\nFor related information, see [AppleScript Error Handling](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW10).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-SW2\"></a>\n\nHandler Syntax (Labeled Parameters)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_932\"></a>A handler is a collection of statements that can be invoked by name. This section describes the syntax for handlers that use labeled parameters.\n\nLabeled parameters are identified by their labels and can be listed in any order.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` ( on \\| to ) handlerName ¬    [ [ of \\| in ] directParamName ] ¬    [ ASLabel userParamName ]... ¬    [ given userLabel : userParamName [, userLabel : userParamName ]...]       [ statement ]... end [ handlerName ]  ``` |\n\n##### Placeholders\n\n*handlerName*\n:   An identifier that names the handler.\n\n*directParamName*\n:   An identifier for the direct parameter variable. If it is included, *directParamName* must be listed immediately after the command name. The word `of` or `in` before *directParamName* is required in user-defined handlers, but is optional in terminology-defined handlers (for example, those defined by applications). If a user-defined handler includes a direct parameter, the handler must also include at least one variable parameter.\n\n*ASLabel*\n:   An AppleScript-defined label. The available labels are:<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_933\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_934\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_935\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_936\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_937\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_938\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_939\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_940\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_941\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_942\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_943\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_944\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_945\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_946\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_947\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_948\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_949\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_950\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_951\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_952\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_953\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_954\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_955\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_956\"></a> `about`, `above`, `against`, `apart from`, `around`, `aside from`, `at`, `below`, `beneath`, `beside`, `between`, `by`, `for`, `from`, `instead of`, `into`, `on`, `onto`, `out of`, `over`, `since`, `thru` (or `through`), `under`. These are the only labels that can be used without the special label `given`.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_957\"></a> Each label must be unique among the labels for the handler (that is, you cannot use the same label for more than one parameter).\n\n*userLabel*\n:   An identifier for a user-defined label, associated with a user-defined parameter. Each label must be unique. The first *userLabel*-*userParamName* pair must follow the word `given`; any additional pairs are separated by commas.\n\n*userParamName*\n:   An identifier for a parameter variable.\n\n*statement*\n:   Any AppleScript statement. These statements can include definitions of `script` objects, each of which, like any `script` object, can contain handlers and other `script` objects. However, you cannot declare another handler within a handler, except within a `script` object. Handlers often contain a [return](#//apple_ref/doc/uid/TP40000983-CH7g-163937) statement.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_211\"></a>\n\n##### Examples\n\nFor examples and related conceptual information, see [Handlers with Labeled Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW22).\n\n##### Discussion\n\nA handler written to respond to an application command (like those in [Handlers in Script Applications](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW14)) need not include all of the possible parameters defined for that command. For example, an application might define a command with up to five possible parameters, but you could define a handler for that command with only two of the parameters.\n\nIf a script calls a handler with more parameters than are specified in the handler definition, the extra parameters are ignored.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-165917\"></a>\n\nCalling a Handler with Labeled Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_958\"></a>This section describes the syntax for calling a handler with labeled parameters.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  handlerName ¬   [ [ of \\| in ] directParam ] ¬   [ [ ASLabel paramValue ...] ¬    \\| [ with labelForTrueParam [, labelForTrueParam ]... ¬     [ ( and \\| , ) labelForTrueParam ] ] ¬    \\| [ without labelForFalseParam [, labelForFalseParam ]...] ¬     [ ( and \\| , ) labelForFalseParam ] ] ¬    \\| [ given userLabel : paramValue [, userLabel : paramValue ]...]...   ``` |\n\n##### Placeholders\n\n*handlerName*\n:   An identifier that names the handler.\n\n*directParam*\n:   Any valid expression. The expression for the direct parameter must be listed first if it is included at all.\n\n*ASLabel*\n:   One of the following AppleScript-defined labels used in the definition of the handler: `about`, `above`, `against`, `apart from,` `around`, `aside from`, `at`, `below`, `beneath`, `beside`, `between`, `by`, `for`, `from`, `instead of`, `into`, `on`, `onto`, `out of`, `over`, `since`, `thru` (or `through`), `under`.\n\n*paramValue*\n:   The value of a parameter, which can be any valid expression.\n\n*labelForTrueParam*\n:   The label for a Boolean parameter whose value is `true`. You use this form in `with` clauses. Because the value `true` is implied by the word `with`, you provide only the label, not the value. For an example, see the `findNumbers` handler in [Handlers with Labeled Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW22). <a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_959\"></a>\n\n*labelForFalseParam*\n:   The label for a Boolean parameter whose value is `false`. You use this form in `without` clauses. Because the value `false` is implied by the word `without`, you provide only the label, not the value.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_960\"></a>\n\n*paramLabel*\n:   Any parameter label used in the definition of the handler that is not among the labels for *ASLabel*. You must use the special label `given` to specify these parameters. For an example, see the `findNumbers` handler below.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_212\"></a>\n\n##### Examples\n\nFor examples, see [Handlers with Labeled Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW22).\n\n##### Discussion\n\nWhen you call a handler with labeled parameters, you supply the following:\n\n1. The handler name.\n2. A value for the direct parameter, if the handler has one. It must directly follow the handler name.\n3. One label-value pair for each AppleScript-defined label and parameter defined for the handler.\n4. One label-value pair for each user-defined label and parameter defined for the handler that *is not* a boolean value.\n\n   The first pair is preceded by the word `given`; a comma precedes each additional pair. The order of the pairs does not have to match the order in the handler definition.\n5. For each user-defined label and parameter defined for the handler that *is* a boolean value, you can either:\n\n   1. Supply the label, followed by a boolean expression (as with non-boolean parameters); for example:\n\n      ```\n      given rounding:true\n      ```\n   2. Use a combination of `with` and `without` clauses, as shown in the following examples:\n\n      ```\n      with rounding, smoothing and curling\n      with rounding without smoothing, curling\n      ```\n\n      > <a id=\"//apple_ref/doc/uid/TP40000983-CH7g-SW3\"></a>\n      >\n      > **Note:** AppleScript automatically converts between some forms when you compile. For example, `given rounding:true` is converted to `with rounding`, and `with rounding, smoothing` is converted to `with rounding and smoothing`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-166812\"></a>\n\nHandler Syntax (Positional Parameters)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_961\"></a>A handler is a collection of statements that can be invoked by name. This section describes the syntax for handlers that use positional parameters.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_213\"></a>\n>\n> **Important:** The parentheses that surround the parameter list in the following definition are part of the syntax.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  on \\| to handlerName ( [ userParamName [, userParamName ]...] )     [ statement ]...  end [ handlerName ]   ``` |\n\n##### Placeholders\n\n*handlerName*\n:   An identifier that names the handler.\n\n*userParamName*\n:   An identifier for a user-defined parameter variable.\n\n*statement*\n:   Any AppleScript statement, including global or local variable declarations. For information about the scope of local and global variables, see [Scope of Variables and Properties](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_214\"></a>\n\n##### Examples\n\nFor examples and related conceptual information, see [Handlers with Positional Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW13).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-166906\"></a>\n\nCalling a Handler with Positional Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_962\"></a>A call for a handler with positional parameters must list the parameters in the same order as they are specified in the handler definition.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` handlerName ( [ paramValue [, paramValue ]...] )  ``` |\n\n##### Placeholders\n\n*handlerName*\n:   An identifier that names the handler.\n\n*paramValue*\n:   The value of a parameter, which can be any valid expression. If there are two or more parameters, they must be listed in the same order in which they were specified in the handler definition.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_215\"></a>\n\n##### Examples\n\nFor examples, see [Handlers with Positional Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW13)\n\n##### Discussion\n\nWhen you call a handler with positional parameters, you supply the following:\n\n1. The handler name.\n2. An opening and closing parenthesis.\n3. If the handler has any parameters, then you also list, within the parentheses, the following:\n\n   One value for each parameter defined for the handler. The value can be any valid expression.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_963\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-SW4\"></a>\n\nHandler Syntax (Interleaved Parameters)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_964\"></a>A handler is a collection of statements that can be invoked by name. This section describes the syntax for handlers that use interleaved parameters.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` on \\| to handlerNamePart : userParamName [ namePart : userParamName ]... )    [ statement ]... end [ handlerName ]   ``` |\n\n##### Placeholders\n\n*handlerNamePart* , *namePart*\n:   An identifier that, combined with the other parts, forms the handler name.\n\n*userParamName*\n:   An identifier for a user-defined parameter variable.\n\n*statement*\n:   Any AppleScript statement, including global or local variable declarations. For information about the scope of local and global variables, see [Scope of Variables and Properties](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_216\"></a>\n\n##### Examples\n\nFor examples and related conceptual information, see [Handlers with Interleaved Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW2).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-SW5\"></a>\n\nCalling a Handler with Interleaved Parameters\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_965\"></a>A call for a handler with interleaved parameters must list the parameters in the same order as they are specified in the handler definition.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` ( tell scriptObject to \\| scriptObject 's \\| my ) handlerNamePart : paramValue [ namePart : paramValue ]...]   ``` |\n\n##### Placeholders\n\nscriptObject\n:   A script object to direct the handler call to, which can be any valid expression.\n\n*handlerNamePart* , *namePart*\n:   An identifier that names the handler.\n\n*paramValue*\n:   The value of a parameter, which can be any valid expression. If there are two or more parameters, they must be listed in the same order in which they were specified in the handler definition.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_217\"></a>\n\n##### Examples\n\nFor examples, see [Handlers with Positional Parameters](../conceptual/ASLR_about_handlers.md#//apple_ref/doc/uid/TP40000983-CH206-SW13)\n\n##### Discussion\n\nWhen you call a handler with positional parameters, you supply the following:\n\n1. A script object to direct the handler call to, either using `tell` *script* `to`, *script*`'s`, or `my`, equivalent to `tell me to`.\n2. The first handler name part.\n3. A value for the first parameter.\n4. For each additional parameter, you also list the following:\n\n   The next name part, followed by a colon and a value for that parameter. The value can be any valid expression.<a id=\"//apple_ref/doc/uid/TP40000983-CH7g-DontLinkElementID_966\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_handlers.html", "sha256": "8dd8b8cca687a1175c675e2223bb8b842198b1c1a2bcefd131ea833f4b0fbb39", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_keywords.md", "title": "AppleScript Keywords", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH222-SW2\"></a>\n\n# AppleScript Keywords\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_967\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_968\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_969\"></a>This appendix lists AppleScript keywords (or *reserved words*), provides a brief description for each, and points to related information, where available. (See also [Keywords](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW7) in [AppleScript Lexical Conventions](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW1).)\n\nThe keywords in [Table A-1](#//apple_ref/doc/uid/TP40000983-CH222-SW1) are part of the AppleScript language. You should not attempt to reuse them in your scripts for variable names or other purposes. Developers should not re-define keywords in the terminology for their scriptable applications. You can view many additional scripting terms defined by Apple, but not part of the AppleScript language, in [AppleScript Terminology and Apple Event Codes](http://developer.apple.com/releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH222-SW1\"></a>\n\n**Table A-1**  AppleScript reserved words, with descriptions\n\n| `about` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `above` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `after` | used to describe position in the [Relative](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI) reference form; used as part of operator (`comes after`, `does not come after`) with classes such as `date`, `integer`, and `text` |\n| `against` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `and` | logical *and* operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `apart from` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `around` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `as` | coercion operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `aside from` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `at` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `back` | used with [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) and [Relative](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI) reference forms; `in back of` is synonymous with `after` and `behind` |\n| `before` | used to describe position in the [Relative](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI) reference form; used as an operator (`comes before`, `does not come before`) with classes such as `date`, `integer`, and `text`; synonymous with `in front of` |\n| `beginning` | specifies an insertion location at the beginning of a container—see the boundary specifier descriptions for the [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) reference form |\n| `behind` | synonymous with `after` and `in back of` |\n| `below` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `beneath` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `beside` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `between` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `but` | used in [considering and ignoring Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-130224) |\n| `by` | used with binary containment operator `contains, is contained by`; also used as handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `considering` | a control statement—see [considering and ignoring Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-130224) |\n| `contain, contains` | binary containment operator—see `contains, is contained by` |\n| `continue` | changes the flow of execution—see `continue` |\n| `copy` | an AppleScript command—see `copy` |\n| `div` | division operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `does` | used with operators such as `does not equal`, `does not come before`, and `does not contain`—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `eighth` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `else` | used with `if` control statement—see [if Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-158244) |\n| `end` | marks the end of a script or handler definition, or of a compound statement, such as a `tell` or `repeat` statement; also specifies an insertion location at the end of a container—see the boundary specifier descriptions for the [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) reference form |\n| `equal, equals` | binary comparison operator—see `equal, is not equal to` |\n| `error` | `error` control statement; also used with`try` statement |\n| `every` | specifies every object in a container—see [Every](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH) reference form |\n| `exit` | terminates a `repeat` loop—see `exit` |\n| `false` | a Boolean literal—see [Boolean](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW14) |\n| `fifth` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `first` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `for` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `fourth` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `from` | used in specifying a range of objects in a container—see [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) reference form; also used as handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `front` | `in front of` is used to describe position in the [Relative](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI) reference form; synonymous with `before` |\n| `get` | an AppleScript command—see `get` |\n| `given` | a special handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `global` | specifies the scope for a variable (see also `local`)—see [Global Variables](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW13) |\n| `if` | a control statement—see [if Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-158244) |\n| `ignoring` | a control statement—see [considering and ignoring Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-130224) |\n| `in` | used in construction object specifiers—see [Containers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW24); also used with the [Relative](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI) reference form—for example `in front of` and `in back of` |\n| `instead of` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `into` | `put into` is a deprecated synonym for the `copy` command; also used as handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `is` | used with various comparison operators—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `it` | refers to the current target (`of it`)—see [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) |\n| `its` | synonym for `of it`—see [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) |\n| `last` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `local` | specifies the scope for a variable (see also `global`)—see [Local Variables](../conceptual/ASLR_variables.md#//apple_ref/doc/uid/TP40000983-CH223-SW12) |\n| `me` | refers to the current script (`of me`)—see [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) |\n| `middle` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `mod` | remainder operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `my` | synonym for `of me`—see [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) |\n| `ninth` | specifies a position in a container—see [Middle](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCJFDBA) reference form |\n| `not` | logical negation operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `of` | used in construction object specifiers—see [Containers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW24); used with or as part of many other terms, including `of me` , `in front of` , and so on |\n| `on` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `onto` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `or` | logical *or* operator—see [Table 9-1](ASLR_operators.md#//apple_ref/doc/uid/TP40000983-CH5g-SW2) |\n| `out of` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `over` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `prop, property` | `prop` is an abbreviation for `property`—see [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4) |\n| `put`<a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_970\"></a> | `put into` is a deprecated synonym for the `copy` command |\n| `ref/reference` | `ref` is an abbreviation for `reference`—see `reference` |\n| `repeat` | a control statement—see [repeat Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-127362) |\n| `return` | exits from a handler—see `return` |\n| `returning`<a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_971\"></a> | deprecated |\n| `script` | used to declare a script object; also the class of a script object—see the `script` class and [Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA) |\n| `second` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `set` | an AppleScript command—see `set` |\n| `seventh` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `since` | handler parameter label—see [Handler Syntax (Labeled Parameters)](ASLR_handlers.md#//apple_ref/doc/uid/TP40000983-CH7g-SW2) |\n| `sixth` | specifies an index position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `some` | specifies an object in a container—see [Arbitrary](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE) reference form |\n| `tell` | a control statement—see [tell Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-158637) |\n| `tenth` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `that` | synonym for `whose` |\n| `the`<a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_972\"></a> | syntactic no-op, used to make script statements look more like natural language |\n| `then` | used with `if` control statement—see [if Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-158244) |\n| `third` | specifies a position in a container—see [Index](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF) reference form |\n| `through, thru` | used in specifying a range of objects in a container—see [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) reference form |\n| `timeout` | used with `with timeout` control statement—see `with timeout` |\n| `times` | used with `repeat` control statement—see `repeat (number) times` |\n| `to` | used in many places, including `copy` and `set` commands; in the [Range](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ) reference form; by operators such as `is equal to` and `a reference to`; with the control statement `repeat with loopVariable (from startValue to stopValue)`; with the partial result parameter in [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973) |\n| `transaction` | used with `with transaction` control statement—see `with transaction` |\n| `true` | a Boolean literal—see [Boolean](../conceptual/ASLR_lexical_conventions.md#//apple_ref/doc/uid/TP40000983-CH214-SW14) |\n| `try` | an error-handling statement—see [try Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-128973) |\n| `until` | used with `repeat` control statement—see `repeat until` |\n| `use` | a requirement statement—see [use Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-SW4) |\n| `where` | used with the [Filter](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BAJJHEFE) reference form to specify a Boolean test expression (synonymous with `whose`) |\n| `while` | used with `repeat` control statement—see `repeat while` |\n| `whose` | used with the [Filter](ASLR_reference_forms.md#//apple_ref/doc/uid/TP40000983-CH4g-BAJJHEFE) reference form to specify a Boolean test expression (synonymous with `where`) |\n| `with` | used in commands to specify various kinds of parameters, including `true` for some Boolean for parameters—see, for example, the `with prompt` and `multiple selections allowed` parameters to the `choose from list` command; also used with application `make` commands to specify properties (`with properties`) |\n| `without` | used in commands to specify `false` for a Boolean for a parameter—see, for example, the `multiple selections allowed` parameter to the `choose from list` command<a id=\"//apple_ref/doc/uid/TP40000983-CH222-DontLinkElementID_973\"></a> |\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_keywords.html", "sha256": "f6303fb5ac5951573d068fd3f4dc3f1b5c4b4e10c0bb81e09eb3f4013d060d2e", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_load_script.md", "title": "Libraries using Load Script", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH227-SW1\"></a>\n\n# Libraries using Load Script\n\nOS X Mavericks v10.9 (AppleScript 2.3) introduces built-in support for script libraries, which are scripts containing handlers that may be shared among many scripts. Scripts that must run on older versions of the OS can share handlers between scripts using `load script`, as described here.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH227-SW2\"></a>\n\n## Saving and Loading Libraries of Handlers\n\nIn addition to defining and calling handlers within a script, you can access handlers from other scripts. To make a handler available to another script, save it as a compiled script, then use the `load script` command to load it in any script that needs to call the handler. You can use this technique to create libraries containing many handlers.<a id=\"//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_974\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_975\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH227-DontLinkElementID_976\"></a>\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH227-SW3\"></a>\n>\n> **Note:** The `load script` command loads the compiled script as a `script` object; for more information, see [Script Objects](../conceptual/ASLR_script_objects.md#//apple_ref/doc/uid/TP40000983-CH207-BAJJCIAA).\n\nFor example, the following script contains two handlers: `areaOfCircle` and `factorial`:\n\n```\n-- This handler computes the area of a circle from its radius.\n-- (The area of a circle is equal to pi times its radius squared.)\non areaOfCircle from radius\n    -- Make sure the parameter is a real number or an integer.\n    if class of radius is contained by {integer, real}\n        return radius * radius * pi -- pi is predefined by AppleScript.\n    else\n        error \"The parameter must be a real number or an integer\"\n    end if\nend areaOfCircle\n \n \n-- This handler returns the factorial of a number.\non factorial(x)\n    set returnVal to 1\n    if x &gt; 1 then\n        repeat with n from 2 to x\n            set returnVal to returnVal * n\n        end repeat\n    end if\n    return returnVal\nend factorial\n```\n\nIn Script Editor, save the script as a compiled Script (which has extension `scpt`) or Script Bundle (extension `scptd`) and name it “NumberLib”.\n\nAfter saving the script as a compiled script, other scripts can use the `load script` command to load it. For example, the following script loads the compiled script `NumberLib.scpt`, storing the resulting `script` object in the variable `numberLib`. It then makes handler calls within a `tell` statement that targets the `script` object. The compiled script must exist in the specified location for this script to work.\n\n```\nset numberLibrary to (load script file \"NumberLib.scpt\")\n \ntell numberLibrary\n    factorial(10)             --result: 3628800\n    areaOfCircle from 12      --result: 452.38934211693\nend tell\n```\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_load_script.html", "sha256": "ddab2511a74911c5b79d65cf3d2323bf87605021c5b658ac89ce24f69f8c962b", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_operators.md", "title": "Operators Reference", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124070\"></a>\n\n# Operators Reference\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_977\"></a>This chapter describes AppleScript operators. An *operator* is a symbol, word, or phrase that derives a value from another value or pair of values. An *operation* is the evaluation of an expression that contains an operator. An *operand* is an expression from which an operator derives a value.\n\nAppleScript provides logical and mathematical operators, as well as operators for containment, concatenation, and obtaining a reference to an object. Operators that operate on two values are called *<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_978\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_979\"></a>binary operators*, while operators that operate on a single value are known as *<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_980\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_981\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_982\"></a>unary operators*.\n\nThe first part of this chapter contains two tables: Table 9-1 summarizes all of the operators that AppleScript uses, and [Table 9-2](#//apple_ref/doc/uid/TP40000983-CH5g-SW3) shows the order in which AppleScript evaluates operators within expressions. The rest of the chapter shows how AppleScript evaluates representative operators in script expressions.<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_983\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW2\"></a>\n\n**Table 9-1**  AppleScript operators\n\n| AppleScript operator | Description |\n| `and`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_984\"></a> | Logical conjunction.  A binary logical operator that combines two Boolean values. The result is `true` only if both operands evaluate to `true`.  AppleScript checks the left-hand operand first and, if its is `false`, ignores the right-hand operand. (This behavior is called <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_985\"></a>short-circuiting.)  Class of operands: `boolean`  Class of result: `boolean` |\n| `or`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_986\"></a> | Logical disjunction.  A binary logical operator that combines two Boolean values. The result is `true` if either operand evaluates to `true`.  AppleScript checks the left-hand operand first and, if its is `true`, ignores the right-hand operand. (This behavior is called short-circuiting.)  Class of operands: `boolean`  Class of result: `boolean` |\n| `&`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_987\"></a> | <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_988\"></a>Concatenation.  A binary operator that joins two values. If the left-hand operand is a `text` object, the result is a `text` object (and only in this case does AppleScript try to coerce the value of the right-hand operand to match that of the left).  If the operand to the left is a record, the result is a record. If the operand to the left belongs to any other class, the result is a list.  For more information, see `& (concatenation)`.  Class of operands: any  Class of result: `list`, `record`, `text` |\n| `=`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_989\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_990\"></a>  `is<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_991\"></a> equal`  `equals`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_992\"></a>  `[is] equal to` | Equality.  A binary comparison operator that results in `true` if both operands have the same value. The operands can be of any class.  For more information, see `equal, is not equal to`.  Class of operands: `boolean`  Class of result: `boolean` |\n| `≠` (Option-equal sign on U.S. keyboard)  `is not`  `isn't`  `isn't equal [to]`  `is not equal [to]`  `doesn't equal`  `does not equal`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_993\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_994\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_995\"></a> | Inequality.  A binary comparison operator that results in `true` if its two operands have different values. The operands can be of any class.  For more information, see `equal, is not equal to`.  Class of operands: `boolean`  Class of result: `boolean` |\n| `&gt;`  `[is] greater than`  `comes after`  `is not less than or equal [to]`  `isn't less than or equal [to]`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_996\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_997\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_998\"></a> | Greater than.  A binary comparison operator that results in `true` if the value of the left-hand operand is greater than the value of the right-hand operand.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the left-hand operand.  For more information, see `greater than, less than`.  Class of operands: `date`, `integer`, `real`, `text`  Class of result: `boolean` |\n| `&lt;`  `[is] less than`  `comes before`  `is not greater than or equal [to]`  `isn't greater than or equal [to]`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_999\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1000\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1001\"></a> | Less than.  A binary comparison operator that results in `true` if the value of the left-hand operand is less than the value of the right-hand operand.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  For more information, see `greater than, less than`.  Class of operands: `date`, `integer`, `real`, `text`  Class of result: `boolean` |\n| `≥` (Option-period on U.S. keyboard)  `&gt;=`  `[is] greater than or equal [to]`  `is not less than`  `isn't less than`  `does not come before`  `doesn't come before`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1002\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1003\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1004\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1005\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1006\"></a> | Greater than or equal to.  A binary comparison operator that results in `true` if the value of the left-hand operand is greater than or equal to the value of the right-hand operand.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  The method AppleScript uses to determine which value is greater depends on the class of the operands.  Class of operands: `date`, `integer`, `real`, `text`  Class of result: `boolean` |\n| `≤` (Option-comma on U.S. keyboard)  `&lt;=`  `[is] less than or equal [to]`  `is not greater than`  `isn't greater than`  `does not come after`  `doesn't come after`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1007\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1008\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1009\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1010\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1011\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1012\"></a> | Less than or equal to.  A binary comparison operator that results in `true` if the value of the left-hand operand is less than or equal to the value of the right-hand operand.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  The method AppleScript uses to determine which value is greater depends on the class of the operands.  Class of operands: `date`, `integer`, `real`, `text`  Class of result: `boolean` |\n| `start[s] with`  `begin[s] with`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1013\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1014\"></a> | Starts with.  A binary containment operator that results in `true` if the list or `text` object to its right matches the beginning of the list or `text` object to its left.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  For more information, see `starts with, ends with`.  Class of operands: `list`, `text`  Class of result: `boolean` |\n| `end[s] with`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1015\"></a> | Ends with.  A binary containment operator that results in `true` if the list or `text` object to its right matches the end of the list or `text` object to its left.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  For more information, see `starts with, ends with`.  Class of operands: `list`, `text`  Class of result: `boolean` |\n| `contain[s]`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1016\"></a> | Containment.  A binary containment operator that results in `true` if the list, record, or `text` object to its right matches any part of the list, record, or `text` object to its left.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the operand to the left.  For more information, see `contains, is contained by`.  Class of operands: `list`, `record`, `text`  Class of result: `boolean` |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1017\"></a>`does not contain`  `doesn't contain` | Non-containment.  A binary containment operator that results in `true` if the list, record, or `text` object to its right does not match any part of the list, record, or `text` object to its left.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the right-hand operand to the class of the left-hand operand.  For more information, see `contains, is contained by`.  Class of operands: `list`, `record`, `text`  Class of result: `boolean` |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1018\"></a>`is in`  `is contained by` | Containment.  A binary containment operator that results in `true` if the list, record, or `text` object to its left matches any part of the list, record, or `text` object to its right.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the left-hand operand to the class of the right-hand operand.  For more information, see `contains, is contained by`.  Class of operands: `list`, `record`, `text`  Class of result: `boolean` |\n| <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1019\"></a>`is not in`  `is not contained by`  `isn't contained by` | Non-containment.  A binary containment operator that results in `true` if the list, record, or `text` object to its left does not match any part of the list, record, or `text` object to its right.  Both operands must evaluate to values of the same class. If they don’t, AppleScript attempts to coerce the left-hand operand to the class of the right-hand operand.  For more information, see `contains, is contained by`.  Class of operands: `list`, `record`, `text`  Class of result: `boolean` |\n| `*`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1020\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1021\"></a> | Multiplication.  A binary arithmetic operator that multiplies the number to its left and the number to its right.  Class of operands: `integer`, `real`  Class of result: `integer`, `real` |\n| `+`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1022\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1023\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1024\"></a> | Addition.  A binary arithmetic operator that adds the number or date to its left and the number or date to its right. Only integers can be added to dates. AppleScript interprets such an integer as a number of seconds.  As a unary operator, `+` has no effect and is removed on compile.  Class of operands: `date`, `integer`, `real`  Class of result: `date`, `integer`, `real` |\n| `–` | Subtraction.  A binary or unary arithmetic operator.  The binary operator subtracts the number to its right from the number or date to its left.  The unary operator makes the number to its right negative.  Only integers can be subtracted from dates. AppleScript interprets such an integer as a number of seconds.  Class of operands: `date`, `integer`, `real`  Class of result: `date`, `integer`, `real`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1025\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1026\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1027\"></a> |\n| `/`  `÷` (Option-slash on U.S. keyboard) | Division.  A binary arithmetic operator that divides the number to its left by the number to its right.  Class of operands: `integer`, `real`  Class of result: `real`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1028\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1029\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1030\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1031\"></a> |\n| `div` | Integral division.  A binary arithmetic operator that divides the number to its left by the number to its right and returns the integral part of the answer as its result.  Class of operands: `integer`, `real`  Class of result: `integer`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1032\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1033\"></a> |\n| `mod` | Remainder.  A binary arithmetic operator that divides the number to its left by the number to its right and returns the remainder as its result.  Class of operands: `integer`, `real`  Class of result: `integer`, `real`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1034\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1035\"></a> |\n| `^` | Exponentiation.  A binary arithmetic operator that raises the number to its left to the power of the number to its right.  Class of operands: `integer`, `real`  Class of result: `real`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1036\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1037\"></a> |\n| `as` | Coercion (or *object conversion*).  A binary operator that converts the left-hand operand to the class listed to its right.  Not all values can be coerced to all classes. The coercions that AppleScript can perform are listed in [Coercion (Object Conversion)](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW21). The additional coercions, if any, that an application can perform is listed in its dictionary.  Class of operands: The right-hand operand must be a class identifier or list of class identifiers; the left-hand operand must be a value that can be converted to that class or one of the listed classes.  Class of result: The class specified by the class identifier to the right of the operator <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1038\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1039\"></a> |\n| `not` | Negation.  A unary logical operator that results in `true` if the operand to its right is `false`, and `false` if the operand is `true`.  Class of operand: `boolean`  Class of result: `boolean`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1040\"></a> |\n| `[a] (ref [to] \\| reference to)` | A reference to.  A unary operator that causes AppleScript to return a `reference` object that specifies the location of the operand to its right. A reference is evaluated at run time, not at compile time.  See `a reference to` for more information.  Class of operand: any class type  Class of result: `reference`<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1041\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1042\"></a> |\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1043\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1044\"></a>When evaluating expressions, AppleScript uses operator precedence to determine which operations are evaluated first. In the following expression, for example, AppleScript does not simply perform operations from left to right—it performs the multiplication operation `2 * 5` first, because multiplication has higher precedence than addition.\n\n```\n12 + 2 * 5 --result: 22\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1045\"></a>[Table 9-2](#//apple_ref/doc/uid/TP40000983-CH5g-SW3) shows the order in which AppleScript performs operations. The column labeled “Associativity” indicates the order in the case where there are two or more operands of the same precedence in an expression. The word “None” in the Associativity column indicates that you cannot have multiple consecutive occurrences of the operation in an expression. For example, the expression `3 = 3 = 3` is not legal because the associativity for the equal operator is “none.”\n\nTo evaluate expressions with multiple unary operators of the same order, AppleScript applies the operator closest to the operand first, then applies the next closest operator, and so on. For example, the expression `not not not true` is evaluated as `not (not (not true))`.\n\nYou can enforce the order in which AppleScript performs operations by grouping expressions in parentheses, which are evaluated first, starting with the innermost pair of parentheses.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW3\"></a>\n\n**Table 9-2**  Operator precedence\n\n| Order | Operators | Associativity | Type of operator |\n| 1 | `( )` | Innermost to outermost | Grouping |\n| 2 | `+`  `–` | Unary | Plus or minus sign for numbers |\n| 3 | `^` | Right to left | Exponentiation  (note that this is different from standard math, in which exponentiation takes precedence over unary plus or minus) |\n| 4 | `*`  `/`  `div`  `mod` | Left to right | Multiplication and division |\n| 5 | `+`  `–` | Left to right | Addition and subtraction |\n| 6 | `&` | Left to right | Concatenation |\n| 7 | `as` | Left to right | Coercion |\n| 8 | `&lt;`  `≤`  `&gt;`  `≥` | None | Comparison |\n| 9 | `=`  `≠` | None | Equality and inequality |\n| 10 | `not` | Unary | Logical negation |\n| 11 | `and` | Left to right | Logical and |\n| 12 | `or` | Left to right | Logical or |\n\nThe following sections provide additional detail about how AppleScript evaluates operators in expressions:\n\n* `& (concatenation)`\n* `a reference to`\n* Para\n* `contains, is contained by`\n* `equal, is not equal to`\n* `greater than, less than`\n* `starts with, ends with`\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-BAJEGEEC\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1046\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125281\"></a>& (concatenation)\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1047\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1048\"></a>The concatenation operator (`&`) concatenates `text` objects, joins `record` objects into a record, and joins other objects into a list.\n\n[Table 9-1](#//apple_ref/doc/uid/TP40000983-CH5g-SW2) summarizes the use of use of this operator.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125314\"></a>\n\n##### text\n\nThe concatenation of two `text` objects joins the characters from the left-hand `text` object to the characters from the right-hand `text` object, without intervening spaces. For example, `\"dump\" & \"truck\"` evaluates to the `text` object `\"dumptruck\"`.\n\nIf the left-hand operand is a `text` object, but the right-hand operand is not, AppleScript attempts to coerce the right-hand operand to a `text` object. For example, when AppleScript evaluates the expression `\"Route \" & 66` it coerces the integer `66` to the `text` object `\"66\"`, and the result is the `text` object `\"Route 66\"`.\n\nHowever, you get a different result if you reverse the order of the operands:\n\n```\n66 & \"Route \" --result: {66, \"Route \"} (a list)\n```\n\nIn the following example, the left-hand operand is a `text` object and the right-hand operand is a list, so concatenation results in a `text` object:\n\n```\nitem 1 of {\"This\"} & {\"and\", \"that\"} -- \"Thisandthat\"\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125417\"></a>\n\n##### record\n\nThe concatenation of two records joins the properties of the left-hand record to the properties of the right-hand record. If both records contain properties with the same name, the value of the property from the left-hand record appears in the result. For example, the result of the expression\n\n```\n{ name:\"Matt\", mileage:\"8000\" } & { name:\"Steve\", framesize:58 }\n```\n\nis\n\n```\n{ name:\"Matt\", mileage:\"8000\", frameSize:58 }\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125467\"></a>\n\n##### All Other Classes\n\nExcept for the cases described above for `text` objects and `record` objects, the concatenation operator (`&`) joins lists. A non-list operand is considered to be a list containing that operand. The following example shows concatenation of two integers, a list and a text string, and a list and a record, respectively:\n\n```\n1 & 2 --result: {1, 2}\n{\"this\"} & \"hello\" --result: {\"this\", \"hello\"}\n{\"this\"} & {a:1, b:2} --result: {\"this\", 1, 2}\n```\n\nIf both the operands to be concatenated are lists, then the result is a list containing all the items in the left-hand list, followed by all the items in the right-hand list. For example:\n\n```\n{\"This\"} & {\"and\", \"that\"} --result: {\"This\", \"and\", \"that\"}\n{\"This\"} & item 1 of {\"and\", \"that\"} --result: {\"This\", \"and\"}\n```\n\nTo join two lists and create a list of lists, rather than a single list, you can enclose each list in two sets of brackets:\n\n```\n{{1, 2}} & {{3, 4}} --result: {{1, 2}, {3, 4}}\n```\n\nFor information on working efficiently with large lists, see `list`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW1\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1049\"></a>\n\na reference to\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1050\"></a>The `a reference to` operator is a unary operator that returns a `reference` object. You can abbreviate this operator to `a ref to`, or `ref to`, or even just `ref`.\n\nFor related information, see the `reference` class and [Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW4\"></a>\n\n##### Examples\n\nThe following statement creates a `reference` object that contains an object specifier to the Finder startup disk:\n\n```\ntell app \"Finder\" to set diskRef to a ref to startup disk\n--result: startup disk of application \"Finder\"\n```\n\nThe following shows how to obtain a reference object that refers to an item in a list:\n\n```\nset itemRef to a reference to item 3 of {1, \"hello\", 755, 99}\n    --result: item 3 of {1, \"hello\", 755, 99}\nset newTotal to itemRef + 45 --result: 800\n```\n\nIn the final line, AppleScript automatically resolves the object specifier contained in the reference `itemRef` and obtains its value to use in the addition operation. To cause AppleScript to explicitly resolve a `reference` object, you can use its `contents` property:\n\n```\ncontents of itemRef --result: 755\n```\n\nThe next examples demonstrate how using a reference object can result in a different outcome than accessing an object directly. The first example obtains a current track object from iTunes, gets the name, changes the track, then gets the name again:\n\n```\ntell application \"iTunes\"\n    set curTrack to current track\n    --result: file track id 2703 of user playlist id 2425\n    --        of source id 46 of application \"iTunes\"\n    display dialog (name of curTrack as string)  -- \"Shattered\"\n    next track -- play next song\n    display dialog (name of curTrack as string) -- \"Shattered\"\nend tell\n```\n\nBecause `curTrack` is a specific `track` object, its name doesn’t change when the current track changes. But observe the result when using a reference to the current track:\n\n```\ntell application \"iTunes\"\n    set trackRef to a reference to current track\n    --result: current track of application \"iTunes\"\n    display dialog (name of trackRef as string) -- \"Shattered\"\n    next track -- play next song\n    display dialog (name of trackRef as string) -- \"Strange Days\"\nend tell\n```\n\nBecause `trackRef` is a `reference` object containing an object specifier, the specifier identifies the new track when the current track changes.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW5\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1051\"></a>\n\nas (coercion)\n\nThe `as` operator converts, or *coerces*, a value of one class to a value of another class. Not all values are coercible to all classes; see [Coercion (Object Conversion)](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW21) for a list of allowed coercions.\n\nThe right-hand operand of `as` may be a single class, such as `text`, or a list of classes, such as `{integer, text}.` When given a list, the `as` operator processes the list from the first type to the last, checking if the value is an instance of that type; if one matches, the result is the original value. If none match, then it again processes the list from the first type to the last, attempting to coerce the value to that type; the result is the result of the first successful coercion. If none succeed, it throws an error.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW6\"></a>\n>\n> **Note:** Coercing to a list of classes is supported in OS X Yosemite v10.10 and later.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-SW7\"></a>\n\n##### Examples\n\nThis expression returns `x` as a number, suitable for use with a math operator. For example, if `x` was the text `\"1.5\"`, it would return the `real` value `1.5`.\n\n```\nx as number\n```\n\nThis expression returns `x` as either an integer or text, whichever succeeds first. For example, consider if `x` was `date \"Wednesday, May 27, 2015 at 12:03:15 PM\"`: `date` objects cannot be coerced to integers, but they can be coerced to text, so the result is the date as text: `\"Wednesday, May 27, 2015 at 12:03:15 PM\"`.\n\n```\nx as {integer, text}\n```\n\nThe way lists of classes are processed means that the result of `as` can depend on the order of the classes. For example, the result of `1.5 as {integer, text}` is `2`, but `1.5 as {text, integer}` is `\"1.5\"`. It is also possible to have types that will never be reached. For example, in the expression `x as {number, integer}`, the `integer` coercion will never trigger, because `number` will always succeed first.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125019\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1052\"></a>\n\ncontains, is contained by\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1053\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1054\"></a>The `contains` and `is contained by` operators work with lists, records, and `text` objects.\n\n[Table 9-1](#//apple_ref/doc/uid/TP40000983-CH5g-SW2) summarizes the use of these operators and their synonyms.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125052\"></a>\n\n##### list\n\nA list `contains` another list if the right-hand list is a sublist of the left-hand list. A sublist is a list whose items appear in the same order and have the same values as any series of items in the other list. For example, the following statement is `true` because `1 + 1` evaluates to `2`, so that all the items in the right-hand list appear, in the same order, in the left-hand list:\n\n```\n{ \"this\", \"is\", 1 + 1, \"cool\" } contains { \"is\", 2 }\n```\n\nThe following statement is `false` because the items in the right-hand list are not in the same order as the matching items in the left-hand list:\n\n```\n{ \"this\", \"is\", 2, \"cool\" } contains { 2, \"is\" }\n```\n\nA list `is contained by` another list if the left-hand list is a sublist of the right-hand list. For example, the following expression is `true`:\n\n```\n{ \"is\", 2} is contained by { \"this\", \"is\", 2, \"cool\" }\n```\n\nBoth `contains` and `is contained by` work if the sublist is a single value—as with the concatenation operator (`&`), single values are coerced to one-item lists. For example, both of the following expressions evaluate to `true`:\n\n```\n{ \"this\", \"is\", 2, \"cool\" } contains 2\n2 is contained by { \"this\", \"is\", 2, \"cool\" }\n```\n\nHowever, the following expressions, containing nested lists, both evaluate to false:\n\n```\n{\"this\", \"is\", {2}, \"cool\"} contains 2 -- false\n{\"this\", \"is\", {2}, \"cool\"} contains {2} -- false\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125159\"></a>\n\n##### record\n\nA record contains another record if all the properties in the right-hand record are included in the left-hand record, and the values of properties in the right-hand record are equal to the values of the corresponding properties in the left-hand record. A record is contained by another record if all the properties in the left-hand record are included in the right-hand record, and the values of the properties in the left-hand record are equal to the values of the corresponding properties in the right-hand record. The order in which the properties appear does not matter. For example, the following is `true`:\n\n```\n{ name:\"Matt\", mileage:\"8000\", description:\"fast\"} ¬\n    contains { description:\"fast\", name:\"Matt\" }\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-125200\"></a>\n\n##### text\n\nA `text` object contains another `text` object if the characters in the right-hand `text` object are equal to any contiguous series of characters in the left-hand `text` object. For example,\n\n```\n\"operand\" contains \"era\"\n```\n\nis `true`, but\n\n```\n\"operand\" contains \"dna\"\n```\n\nis `false`.\n\nA `text` object is contained by another `text` object if the characters in the left-hand `text` object are equal to any series of characters in the right-hand `text` object. For example, this statement is `true`:\n\n```\n\"era\" is contained by \"operand\"\n```\n\nText comparisons can be affected by `considering` and `ignoring` statements, as described in the Text section of `equal, is not equal to`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124095\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1055\"></a>\n\nequal, is not equal to\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1056\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1057\"></a>The `equal` and `is not equal to` operators can handle operands of any class. Two expressions of different classes are generally not equal, although for scalar operands, such as booleans, integers, and reals, two operands are the same if they have the same value.\n\n[Table 9-1](#//apple_ref/doc/uid/TP40000983-CH5g-SW2) summarizes the use of these operators and their synonyms.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124286\"></a>\n\n##### list\n\nTwo lists are equal if they both contain the same number of items and if the value of an item in one list is identical to the value of the item at the corresponding position in the other list:\n\n```\n{ 7, 23, \"Hello\" } = {7, 23, \"Goodbye\"} --result: false\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124374\"></a>\n\n##### record\n\nTwo records are equal if they both contain the same collection of properties and if the values of properties with the same label are equal. They are not equal if the records contain different collections of properties, or if the values of properties with the same label are not equal. The order in which properties are listed does not affect equality. For example, the following expression is `true`:\n\n```\n{ name:\"Matt\", mileage:\"8000\" } = { mileage:\"8000\", name:\"Matt\"}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124567\"></a>\n\n##### text\n\nTwo `text` objects are equal if they are both the same series of characters. They are not equal if they are different series of characters. For related information, see the `text` class.\n\nText comparisons can be affected by `considering` and `ignoring` statements, which instruct AppleScript to selectively consider or ignore attributes of characters or types of characters. For example, unless you use an `ignoring` statement, AppleScript compares `text` objects by considering all characters and punctuation.\n\nAppleScript does not distinguish uppercase from lowercase letters unless you use a `considering` statement to consider the `case` attribute. For example:\n\n```\n\"DUMPtruck\" is equal to \"dumptruck\" --result: true\nconsidering case\n    \"DUMPtruck\" is equal to \"dumptruck\" --result: false\nend considering\n```\n\nWhen comparing two `text` objects, if the test is not enclosed in a `considering` or `ignoring` statement, then the comparison uses default values for considering and ignoring attributes (described in `considering / ignoring (text comparison)`).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124619\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1058\"></a>\n\ngreater than, less than\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1059\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1060\"></a>The `greater than` and `less than` operators work with dates, integers, real numbers, and `text` objects.\n\n[Table 9-1](#//apple_ref/doc/uid/TP40000983-CH5g-SW2) summarizes the use of these operators and their synonyms.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124652\"></a>\n\n##### date\n\nA date is greater than another date if it represents a later time. A date is less than another date if it represents an earlier time.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124666\"></a>\n\n##### integer, real\n\nAn integer or a real number is greater than another integer or real number if it represents a larger number. It is less than another integer or real number if it represents a smaller number.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124694\"></a>\n\n##### text\n\nTo determine the ordering of two `text` objects, AppleScript uses the collation order set in the Language pane of International preferences. A `text` object is greater than (comes after) another `text` object based on the lexicographic ordering of the user’s language preference. With the preference set to English, the following two statements both evaluate to `true`:\n\n```\n\"zebra\" comes after \"aardvark\"\n\"zebra\" &gt; \"aardvark\"\n```\n\nThe following two statements also evaluate to `true`:\n\n```\n\"aardvark\" comes before \"zebra\"\n\"aardvark\" &lt; \"zebra\"\n```\n\nText comparisons can be affected by `considering` and `ignoring` statements, as described in the Text section of `equal, is not equal to`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124884\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1061\"></a>\n\nstarts with, ends with\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1062\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1063\"></a>The `starts with` and `ends with` operators work with lists and `text` objects.\n\n[Table 9-1](#//apple_ref/doc/uid/TP40000983-CH5g-SW2) summarizes the use of these operators and their synonyms.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124917\"></a>\n\n##### list\n\nA list `starts with` the items in a second list if all the items in the second list are found at the beginning of the first list. A list `ends with` the items in a second list if all the items in the second list are found at the end of the first list. For example, the following three expressions are all `true`:\n\n```\n{ \"this\", \"is\", 2, \"cool\" } ends with \"cool\"\n{ \"this\", \"is\", 2, \"cool\" } starts with \"this\"\n{ \"this\", \"is\", 2, \"cool\" } starts with { \"this\", \"is\" }\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-124958\"></a>\n\n##### text\n\nA `text` object `starts with` the text in a second `text` object if all the characters in the second object are found at the beginning of the first object. A `text` object `ends with` the text in a second `text` object if all the characters in the second object are found at the end of the first object. For example, the following expression is `true`:\n\n```\n\"operand\" starts with \"opera\"\n```\n\nA `text` object ends with another `text` object if the characters in the right-hand `text` object are the same as the characters at the end of the left-hand `text` object. For example, the following expression is `true`:\n\n```\n\"operand\" ends with \"and\"\n```\n\nText comparisons can be affected by `considering` and `ignoring` statements, as described in the Text section of `equal, is not equal to`.<a id=\"//apple_ref/doc/uid/TP40000983-CH5g-DontLinkElementID_1064\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_operators.html", "sha256": "abb5c094f99671ba4c4b19f3352713e73685f6ea2e79227f7c0e27cc78a89f15", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_reference_forms.md", "title": "Reference Forms", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-120522\"></a>\n\n# Reference Forms\n\nThis chapter describes AppleScript reference forms. <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1065\"></a>A *reference form* specifies the syntax for identifying an object or group of objects in an application or other container—that is, the syntax for constructing an object specifier (described in [Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW7)).\n\nFor example, the following object specifier (from a script targeting the Finder) uses several index reference forms, which identify an object by its number within a container:<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1066\"></a>\n\n```\nitem 1 of second folder of disk 1\n```\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_218\"></a>\n>\n> **Important:** When you use a reference form, you specify the container in which the referenced object or objects reside. This takes the form *referenceForm* `of` *containerObject*. You can also enclose a reference form in a `tell` statement, which then serves to specify the outer container. For more information, see [Absolute and Relative Object Specifiers](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW25).\n>\n> Some of the examples of reference forms shown in this chapter will not compile as shown. To compile them, you may need to add an enclosing `tell` statement, targeting the Finder or the word processing application TextEdit.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BCIJEEHE\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-120700\"></a>Arbitrary\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1067\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1068\"></a>Specifies an arbitrary object in a container. This form is useful whenever randomness is desired.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1069\"></a>\n\nBecause an arbitrary item is, by its nature, random, this form is not useful for operations such as processing each item in a group of files, words, or other objects.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` some  class  ``` |\n\n##### Placeholders\n\n*class*\n:   The class for an arbitrary object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_219\"></a>\n\n##### Examples\n\nThe following creates a new Mail message with a random signature (and depends on the user having at least one signature):\n\n```\ntell application \"Mail\"\n    activate\n    set randomSignature to some signature\n    set newMessage to make new outgoing message ¬\n        at end of outgoing messages with properties ¬\n        {subject:\"Guess who?\", content:\"Welcome aboard.\", visible:true}\n    set message signature of newMessage to randomSignature\nend tell\n```\n\nThe following simply gets a random word from a TextEdit document:\n\n```\ntell application \"TextEdit\"\n    some word of document 1 -- any word from the first document\nend tell\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCJFIIH\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-120825\"></a>Every\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1070\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1071\"></a>Specifies every object of a particular class in a container.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  every  class   pluralClass  ``` |\n\n##### Placeholders\n\n*class*\n:   A singular class (such as `word` or `paragraph`).\n\n*pluralClass*\n:   The plural form for a class (such as `words` or `paragraphs`).<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1073\"></a>\n\n##### Value\n\nThe value of an `every` object specifier is a list of the objects from the container. If the container does not contain any objects of the specified class, the list is an empty list: {}. For example, the value of the expression `every word of {1, 2, 3}` is the empty list `{}`.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_220\"></a>\n\n##### Examples\n\nThe following example uses an `every` object specifier to specify every word contained in a text string:\n\n```\nset myText to \"That's all, folks\"\nevery word of myText --result: {\"That's\", \"all\", \"folks\"} (a list of three words)\n```\n\nThe following object specifier specifies the same list:\n\n```\nwords of myText\n```\n\nThe following example specifies a list of all the items in the Users folder of the startup disk (boot partition):\n\n```\ntell application \"Finder\"\n    every item of folder \"Users\" of startup disk\nend tell\n```\n\nThe following specifies the same list as the previous example:\n\n```\ntell application \"Finder\"\n    items of folder \"Users\" of startup disk\nend tell\n```\n\n##### Discussion\n\nUse of the `every` reference form implies the existence of an `index` property for the specified objects.\n\nIf you specify an `every` object specifier as the container from which to obtain a property or object, the result is a list containing the specified property or object for each object of the container. The number of items in the list is the same as the number of objects in the container.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BAJJHEFE\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-121170\"></a>Filter\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1074\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1075\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1076\"></a>Specifies all objects in a container that match a condition, or test, specified by a Boolean expression.\n\nThe filter form specifies application objects only. It cannot be used to filter the AppleScript objects `list`, `record`, or `text`. A term that uses the filter form is also known as a `whose` clause.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-SW3\"></a>\n>\n> **Note:** You can use the words `where`<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1077\"></a> or `that`<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1078\"></a> as <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1079\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1080\"></a>synonyms for `whose`.\n\nA filter reference form can often be replaced by a `repeat` statement, or vice versa. For example, the following script closes every TextEdit window that isn’t named `\"Old Report.rtf\"`:\n\n```\ntell application \"TextEdit\"\n    close every window whose name is not \"Old Report.rtf\"\nend tell\n```\n\nYou could instead obtain a list of open windows and set up a `repeat` statement that checks the name of each window and closes the window if it isn’t named `\"Old Report.rtf\"`. However, a `whose` clause is often the fastest way to obtain the desired information.\n\nThe following is an abbreviated form of the previous script:\n\n```\nwindows of application \"TextEdit\" whose name is not \"Old Report.rtf\"\n```\n\nFor related information, see [repeat Statements](ASLR_control_statements.md#//apple_ref/doc/uid/TP40000983-CH6g-127362).\n\n##### Syntax\n\n|  |\n| --- |\n| ```  objectSpecifier  ( whose \\| where )  booleanTest    ``` |\n\n##### Placeholders\n\n*objectSpecifier*\n:   Specifies the container in which to look for objects that match the Boolean test.\n\n`whose` | `where`\n:   These words have the same meaning, and refer to all of the objects in the specified container that match the conditions in the specified Boolean expression.\n\n*booleanTest*\n:   Any Boolean expression (see the `boolean` class definition).\n\n##### Value\n\nThe value of a filter reference form is a list of the objects that pass the test. If no objects pass the test, the list is an empty list: {}.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_221\"></a>\n\n##### Examples\n\nThe following example shows an object specifier for all open Finder windows that do not have the name `\"AppleScript Language Guide\"`.\n\n```\ntell application \"Finder\"\n    every window whose name is not \"AppleScript Language Guide\"\nend tell\n```\n\n##### Discussion\n\nIn effect, a filter reduces the number of objects in a container. Instead of specifying `every` Finder window, the following object specifier specifies just the windows that are currently zoomed:\n\n```\nevery window whose zoomed is true\n```\n\nTo specify a container after a filter, you must enclose the filter and the object specifier it applies to in parentheses, as in this example:\n\n```\ntell application \"Finder\"\n    (files whose file type is not \"APPL\") in folder \"HD:SomeFolder:\"\nend tell\n```\n\nWithin a test in a filter reference, the direct object is the object being tested. Though it isn’t generally needed, this implicit target can be specified explicitly using the keyword `it`, which is described in [The it and me Keywords](../conceptual/ASLR_fundamentals.md#//apple_ref/doc/uid/TP40000983-CH218-SW4).\n\nThe following example shows several equivalent ways of constructing a filter reference to find all the files in a folder that whose name contains the word “AppleScript”. While the term `it` refers to the Finder application outside of the filter statements, within them `of it` refers to the current file being tested. The result of each filter test is the same and is not changed by including or omitting the term `of it`:\n\n```\ntell application \"Finder\"\n    it --result: application \"Finder\" (target of tell statement)\n    set myFolder to path to home folder\n        --result: alias \"Leopard:Users:myUser:\"\n    files in myFolder --result: a list of Finder document files\n    files in myFolder where name of it contains \"AppleScript\"\n    (* result: document file \"AppleScriptLG.pdf\" of folder \"myUser\"\n        of folder \"Users\" of startup disk of application \"Finder\"}*)\n    files in myFolder where name contains \"AppleScript\" -- same result\n    every file in myFolder whose name contains \"AppleScript\" -- same result\n    every file in myFolder where name of it contains \"AppleScript\"\n        -- same result\nend tell\n```\n\nA filter reference form includes one or more tests. Each test is a Boolean expression that compares a property or element of each object being tested, or the objects themselves, with another object or value. [Table 8-1](#//apple_ref/doc/uid/TP40000983-CH4g-SW1) shows some filter references, the Boolean expressions they contain, and what is being tested in each reference.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-SW1\"></a>\n\n**Table 8-1**  Boolean expressions and tests in filter references\n\n| Filter reference form | Boolean expression | What is being tested |\n| `windows whose zoomed is true` | `zoomed is true` | The `zoomed` property of each window |\n| `windows whose name isn’t \"Hard Disk\"` | `name isn’t \"Hard Disk\"` | The `name` property of each window |\n| `files whose creator type is \"OMGR\"` | `creator type is \"OMGR\"` | The `creator type` property of each file |\n\nA test can be any Boolean expression. You can link multiple tests, as in the following statement:\n\n```\nwindows whose zoomed is true and floating is false\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCJDFIE\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-121447\"></a>ID\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1083\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1084\"></a>Specifies an object by the value of its `id` property.\n\nYou can use the ID reference form only with application objects that have an ID property.\n\n##### Syntax\n\n|  |\n| --- |\n| ``` class id  expression   ``` |\n\n##### Placeholders\n\n*expression*\n:   The id value.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_222\"></a>\n\n##### Examples\n\nThe following examples use the ID reference form to specify an `application` by ID and a `disk` object by ID.\n\n```\ntell application id \"com.apple.finder\"\n-- specifies an application (Finder) by its ID\ndisk id -100 -- specifies a Finder disk object by ID\nname of disk id -100 --result: \"Leopard_GM\" (gets name from ID specifier)\nend tell\n```\n\n##### Discussion\n\nUse of the `id` reference form implies the existence of a `id` property for the specified objects.\n\nAlthough `id` properties are most often integers, an `id` property can belong to any class. An application that supports `id` properties for its scriptable objects must guarantee that the IDs are unique within a container. Some applications may also provide additional guarantees, such as ensuring the uniqueness of an ID among all objects.\n\nThe value of an `id` property is not typically modifiable. It does not change even if the object is moved within the container. This allows you to save an object’s ID and use it to refer to the object for as long as the object exists. In some scripts you may wish to refer to an object by its ID, rather than by a property such as its name, which may change. Similarly, you could keep track of an item by its index, but indexes can change when items in a container are added, deleted, or even renamed.\n\n> <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-SW2\"></a>\n>\n> **Note:** A good way to keep track of files and folders is to use an `alias`.\n\nStarting in AppleScript 2.0, objects of class `application` have an `id` property, which represents the application’s bundle identifier (the default) or its four-character signature code.\n\nAlso starting in AppleScript 2.0, objects of class `text` have an `id` property, representing the Unicode code point or points for the character or characters in the object. Because a `text` object’s ID is based on the characters it contains, these IDs are not guaranteed to be unique, and in fact will be identical for two `text` objects that store the same characters. And in fact, there is no way to tell two such objects apart by inspection.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCGHGAF\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-121798\"></a>Index\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1086\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1087\"></a>Specifies an object by describing its position with respect to the beginning or end of a container.\n\nFor related information, see [Relative](#//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI).\n\n##### Syntax\n\n|  |\n| --- |\n| ```  class [ index ] integer   integer ( st \\| nd \\| rd \\| th ) class  ( first \\| second \\| third \\| fourth \\| fifth \\| sixth \\| seventh \\| eighth \\| ninth \\| tenth ) class            ( last \\| front \\| back ) class     ``` |\n\n##### Placeholders\n\n*class*\n:   The class of the indexed object to obtain.\n\n*integer*\n:   An integer that describes the position of the object in relation to the beginning of the container (if integer is a positive integer) or the end of the container (if integer is a negative integer).\n\n`st` | `nd` | `rd` | `th`\n:   Appended to the appropriate integer to form an index. For example, `1st`, `2nd`, `3rd`.\n\n`first` | `second` | `third` | `fourth` | `fifth` | `sixth` | `seventh` | `eighth` | `ninth` | `tenth`\n:   Specify one of the ordinal indexes. The forms `first`, `second`, and so on are equivalent to the corresponding integer forms (for example, `second word` is equivalent to `2nd word`). For objects whose index is greater than 10, you can use the forms `12th`, `23rd`, `101st`, and so on. (Note that any integer followed by any of the suffixes listed is valid; for example, you can use `11rd` to refer to the eleventh object.)\n\n`last` | `front` | `back`\n:   The `front` form (for example, `front window`) is equivalent to *class 1* (`window 1`) or *first class* (`first window`). The `last` and `back` forms (for example, `last word` and `back window`) refer to the last object in a container. They are equivalent to *class -1* (for example, `window -1`).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_223\"></a>\n\n##### Examples\n\nEach of the following object specifiers specifies the first item on the startup disk:\n\n```\nitem 1 of the startup disk\nitem index 1 of the startup disk -- \"index\" is usually omitted\nthe first item of the startup disk\n```\n\nThe following object specifiers specify the second word from the beginning of the third paragraph:\n\n```\nword 2 of paragraph 3\n2nd word of paragraph 3\nsecond word of paragraph 3\n```\n\nThe following object specifiers specify the last word in the third paragraph:\n\n```\nword –1 of paragraph 3\nlast word of paragraph 3\n```\n\nThe following object specifiers specify the next-to-last word in the third paragraph.\n\n```\nword –2 of paragraph 3\n-2th word of paragraph 3\n```\n\n##### Discussion\n\nIndexes are volatile. Changing some other property of the object may change its index, as well as the index of other like objects. For example, after deleting `word 4` from a paragraph, the word no longer exists. But there may still be a `word 4`—the word that was formerly `word 5`. After `word 4` is deleted, any words with an index higher than 4 will also have a new index. So the object an index specifies can change.\n\nFor a unique, persistent object specifier, you can use the `id` reference form (see [ID](#//apple_ref/doc/uid/TP40000983-CH4g-BBCJDFIE)), if the application supports it for the class of object you are working with. And for keeping track of a file, you can use an `alias` object.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCJFDBA\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-122258\"></a>Middle\n\nSpecifies the middle object of a particular class in a container. This form is rarely used.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1102\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1103\"></a>\n\n##### Syntax\n\n|  |\n| --- |\n| ```  middle  class   ``` |\n\n##### Placeholders\n\n*class*\n:   The class of the middle object to obtain.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_224\"></a>\n\n##### Examples\n\n```\ntell application \"TextEdit\"\n    middle paragraph of front document\nend tell\nmiddle item of {1, \"doughnut\", 33} --result: \"doughnut\"\nmiddle item of {1, \"doughnut\", 22, 33} --result: \"doughnut\"\nmiddle item of {1, \"doughnut\", 11, 22, 33} --result: 11\n```\n\n##### Discussion\n\nThe `middle` reference form generally works only when the `index` form also works.\n\nAppleScript calculates the middle object by taking half the count, then rounding up. For example, the middle word of a paragraph containing ten words is the fifth word; the middle of eleven words is the sixth.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCIBAAJ\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-122409\"></a>Name\n\nSpecifies an object by name.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1105\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1106\"></a>\n\n##### Syntax\n\n|  |\n| --- |\n| ```  class  [ named ]  nameText   ``` |\n\n##### Placeholders\n\n*class*\n:   The class for the specified object.\n\n*nameText*\n:   The value of the object’s name property.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_225\"></a>\n\n##### Examples\n\nThe following statements identify objects by name:\n\n```\ndocument \"Report.rtf\"\nwindow named \"logs\"\n```\n\n##### Discussion\n\nUse of the `name` reference form implies the existence of a `name` property for the specified objects.\n\nIn some applications, it is possible to have multiple objects of the same class in the same container with the same name. For example, if there are two drives named “Hard Disk”, the following statement is ambiguous (at least to the reader):\n\n```\ntell application \"Finder\"\n    item 1 of disk \"Hard Disk\"\nend tell\n```\n\nIn such cases, it is up to the application to determine which object is specified by a `name` reference.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCJCGDB\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-122724\"></a>Property\n\nSpecifies a property of an object.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1108\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1109\"></a>\n\n##### Syntax\n\n|  |\n| --- |\n| ```  propertyLabel  ``` |\n\n##### Placeholders\n\n*propertyLabel*\n:   The label for the property.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_226\"></a>\n\n##### Examples\n\nThe following example is an object specifier to a property of a Finder window. It lists the label for the window’s property (`zoomed`) and its container (`front window`). `zoomed` is a Boolean property.\n\n```\nzoomed of front window -- e.g., false, if the window isn't zoomed\n```\n\nFor many objects, you can obtain a list of properties:\n\n```\ntell app \"Finder\"\n     properties of window 1 --result: a list of properties and their values\nend tell\n```\n\nThe following example is an object specifier to the `UnitPrice` property of a `record` object. The label of the property is `UnitPrice` and the container is the `record` object.\n\n```\nUnitPrice of {Product:\"Super Snack\", UnitPrice:0.85, Quantity:10} --result: 0.85\n```\n\n##### Discussion\n\nProperty labels are listed in class definitions in application dictionaries. Because a property’s label is unique among the properties of an object, the label is all you need to specify the property—there is no need to specify the class of the property.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCHDJJJ\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-122867\"></a>Range\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1110\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1111\"></a>Specifies a series of objects of the same class in the same container. You can specify the objects with a pair of indexes (such as `words 12 thru 24`) or with a pair of boundary objects (`integers from integer 1 to integer 3`).\n\n##### Syntax\n\n|  |\n| --- |\n| ```  every  class  from  boundarySpecifier1  to  boundarySpecifier2   pluralClass  from  boundarySpecifier1  to  boundarySpecifier2  class  startIndex  ( thru \\| through )  stopIndex    pluralClass  startIndex  ( thru \\| through )  stopIndex  ``` |\n\n##### Placeholders\n\n*class*\n:   A singular class (such as `window` or `word`).\n\n*pluralClass*\n:   A plural class (such as `windows` or `words`).\n\n*boundarySpecifier1* and *boundarySpecifier2*\n:   Specifiers to objects that bound the range. The range includes the boundary objects. You can use the reserved word `beginning` in place of *boundarySpecifier1* to indicate the position before the first object of the container. Similarly, you can use the reserved word `end` in place of *boundarySpecifier2* to indicate the position after the last object in the container.\n\n*startIndex* and *stopIndex*\n:   The indexes of the first and last object of the range (such as `1` and `10` in `words 1 thru 10`). Though integer indexes are the most common class, the start and stop indexes can be of any class. An application determines which index classes are meaningful to it.\n\n##### Value\n\nThe value of a range reference form is a list of the objects in the range. If the specified container does not contain objects of the specified class, or if the range is out of bounds, an error is returned. For example, the following range specifier results in an error because there are no words in the list:\n\n```\nwords 1 thru 3 of {1, 2, 3} --result: an error\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_227\"></a>\n\n##### Examples\n\nThe following example shows the boundary object form of a range specifier. When you compile this statement, Script Editor converts `from integer 1 to integer 2` to the form `integers 1 thru 2`.\n\n```\nset intList to integers from integer 1 to integer 2 of {17, 33, 24}\n     --result: {17, 33}\n```\n\nIn the next example, the phrase `folders 3 thru 4` is a range specifier that specifies a list of two folders in the container `startup disk`:\n\n```\ntell application \"Finder\"\n    folders 3 thru 4 of startup disk\nend tell\n--result: a list of folders (depends on contents of startup disk)\n```\n\n##### Discussion\n\nIf you specify a range specifier as the container for a property or object, as in\n\n```\nname of folders 2 thru 3 of startup disk\n```\n\nthe result is a list containing the specified property or object for each object of the container. The number of items in the list is the same as the number of objects in the container.\n\nTo obtain a contiguous series of characters—instead of a list—from a `text` object, use the `text` class:\n\n```\ntext from word 1 to word 4 of \"We're all in this together\"\n--result: \"We're all in this\"\nwords 1 thru 4 of \"We're all in this together\"\n--result: {\"We're\", \"all\", \"in\", \"this\"}\n```\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-BBCHGEDI\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-123374\"></a>Relative\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1115\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1116\"></a>\n\nSpecifies an object or an insertion point in a container by describing a position in relation to another object, known as the base, in the same container.\n\n##### Syntax\n\n|  |\n| --- |\n| ```  [ class ] ( before \\| [in] front of ) baseSpecifier  [ class ] ( after \\| [in] back of \\| behind ) baseSpecifier         ``` |\n\n##### Placeholders\n\n*class*\n:   The class identifier of the specified object. If you omit this parameter, the specifier refers to an insertion point.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1124\"></a>\n\n*baseSpecifier*\n:   A specifier for the object.\n\n`before` | `[in] front of`\n:   These forms are equivalent, and refer to the object immediately preceding the base object.\n\n`after` | `[in] back of` | `behind`\n:   These forms are equivalent, and refer to the object immediately after the base.\n\n`beginning | front`\n:   These forms are equivalent, and refer to the first insertion point of the container (`insertion point 1`). <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1125\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1126\"></a>\n\n`end | back`\n:   These forms are equivalent, and refer to the last insertion point of the container (`insertion point -1`). <a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1127\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1128\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1129\"></a> Although terms such as `beginning` and `end` sound like absolute positions, they are relative to the existing contents of a container (that is, before or after the existing contents).\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_228\"></a>\n\n##### Examples\n\nThe two relative specifiers in the following `tell` block specify the same file by identifying its position relative to another file on a disk:\n\n```\ntell application \"Finder\"\n    item before item 3 of startup disk --result: e.g., a specifier\n    item after item 1 of startup disk --result: e.g., a specifier\nend tell\n```\n\nThe following example shows how to use various relative specifiers in a word processing document:\n\n```\ntell first document of application \"TextEdit\"\n    copy word 1 to before paragraph 3\n    copy word 3 to in back of paragraph 4\n    copy word 1 of the last paragraph to behind the third paragraph\nend tell\n```\n\n##### Discussion\n\nThe `relative` reference form generally works only when the `index` form also works.\n\nYou can specify only a single object with a relative specifier—an object that is either before or after the base object.<a id=\"//apple_ref/doc/uid/TP40000983-CH4g-DontLinkElementID_1130\"></a>\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_reference_forms.html", "sha256": "acfd577d4cd99a9585c46cd6719287de403b21aa9c9faa434f4972d64437e009", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "reference/ASLR_unsupported_terms.md", "title": "Unsupported Terms", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH224-SW1\"></a>\n\n# Unsupported Terms\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1131\"></a><a id=\"//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1132\"></a>This appendix lists scripting terms that are not supported by AppleScript. Though you may see these terms in a dictionary, script, or scripting addition, you should not count on their behavior.\n\n<a id=\"//apple_ref/doc/uid/TP40000983-CH224-SW2\"></a>\n\n## List of Unsupported Terms\n\n`handle CGI request`\n:   <a id=\"//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1133\"></a>This command is not supported.\n\n`internet address`\n:   <a id=\"//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1134\"></a>An Internet or intranet address for the TCP/IP protocol. Only used for compatibility with WebSTAR AppleScript CGI scripts, this term is not supported by AppleScript itself.\n\n`web page`\n:   <a id=\"//apple_ref/doc/uid/TP40000983-CH224-DontLinkElementID_1135\"></a>An HTML page. This class is not supported.\n\n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_unsupported_terms.html", "sha256": "b773c14784a9c32568f1990276f741204786331663df08b4c786ba1e35f33cf0", "etag": null, "last_modified": null}
{"collection": "applescript-language-guide", "path": "revision_history/ASLR_rev_history.md", "title": "Document Revision History", "body": "<a id=\"//apple_ref/doc/uid/TP40000983-CH212-BCIHHGJH\"></a>\n\n# Document Revision History\n\nThis table describes the changes to *AppleScript Language Guide*.\n\n| **Date** | **Notes** |\n| 2016-01-25 | Expanded scripting errors chapter and repeat command discussion. |\n| 2015-09-16 | Updated for OS X Yosemite v10.10 and OS X v10.11 features. |\n| 2013-10-22 | Updated for OS X Mavericks features. |\n| 2008-03-11 | Updated to describe AppleScript features through OS X v10.5 and AppleScript 2.0. |\n|  | The previous release of *AppleScript Language Guide* was on May 5, 1999. |\n\n  \n  \n\n---\n\nCopyright © 2016 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2016-01-25\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/revision_history/ASLR_rev_history.html", "sha256": "7da2a53bdac84b1b317b74532f3a9531f113ea6312d115d79c8a6254554aade0", "etag": null, "last_modified": null}
