{"collection": "applescript-overview", "path": "AppleScriptX.md", "title": "Introduction to AppleScript Overview", "body": "<a id=\"//apple_ref/doc/uid/10000156i\"></a><a id=\"//apple_ref/doc/uid/10000156-BCICHGIE\"></a>\n\n# Introduction to AppleScript Overview\n\n> **Important:** This document is no longer being updated. For the latest information about Apple SDKs, visit the [documentation website](https://developer.apple.com/documentation).\n\n<a id=\"//apple_ref/doc/uid/10000156-DontLinkElementID_1\"></a>\n\n*AppleScript Overview* provides a high-level overview of AppleScript and its related technologies to help you determine where you can use them in your work.\n\n> <a id=\"//apple_ref/doc/uid/10000156-SW1\"></a>\n>\n> **Note:** For information on the universe of scripting technologies available on OS X, see *Getting Started With Scripting & Automation*.\n\nAppleScript is a scripting language that makes possible direct control of scriptable applications and of many parts of the Mac OS. A scriptable application is one that makes its operations and data available in response to AppleScript messages, called Apple events.\n\nWith scriptable applications, users can write scripts to automate operations, while developers can use AppleScript as an aid to rapid prototyping and automated testing. Developers can also use technologies including Apple events, AppleScript, Automator, and Scripting Bridge, to take advantage of services provided by other applications and by the Mac OS.\n\nAppleScript and Apple events are based on the Open Scripting Architecture, which is implemented by several OS X frameworks. Apple provides a number of additional applications and technologies that enhance AppleScript or take advantage of its features.\n\n<a id=\"//apple_ref/doc/uid/10000156-1140846\"></a>\n\n## Who Should Read This Document\n\nYou should read *AppleScript Overview* to get a broad understanding of AppleScript and related automation technologies, and to determine where they fit into your development process.\n\nThis document may also be of interest if you write AppleScript scripts and would like to know more about the technology behind them.\n\n*AppleScript Overview* is intended for a general developer audience, but experience with some kind of scripting language is helpful. If you are starting from scratch, see *Getting Started with AppleScript*.\n\n<a id=\"//apple_ref/doc/uid/10000156-DontLinkElementID_2\"></a>\n\n## Organization of This Document\n\nThis document contains the following:\n\n* [About AppleScript](https://developer.apple.com/library/archive/applescript-overview/Concepts/ScriptingOnOSX.md#//apple_ref/doc/uid/20000032-BABEBGCF) introduces AppleScript, describes when you might use it, and notes some limitations.\n* [Open Scripting Architecture](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-BABEBGCF) describes the underlying technology used to implement AppleScript and Apple events. It also describes how to extend AppleScript.\n* [Scripting with AppleScript](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-BABEBGCF) provides a brief description of how you work with AppleScript scripts. It also describes options for combining AppleScript scripting with other kinds of scripting.\n* [Scriptable Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-BABEBGCF) explains how scriptable applications work, including how they specify their scripting terminology, and describes the programming resources available for creating scriptable applications.\n* [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1) describes a technology available starting in OS X version 10.5 that generates Objective-C API for accessing scriptable applications.\n* [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1) describes Apple’s graphical automation program and how developers can take advantage of it.\n* [AppleScript Utilities and Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-BABEBGCF) describes utilities and applications that work with AppleScript or provide additional features you can use in AppleScript scripts.\n\n<a id=\"//apple_ref/doc/uid/10000156-1119515\"></a>\n\n## See Also\n\nYou can find additional introductory information on AppleScript and related technologies in *Getting Started with AppleScript*.\n\nThere are also links to related documentation throughout *AppleScript Overview*.\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html", "sha256": "a687ed8c3425e9e7731b4a77de81025f9cd4d13365c52a0ac66357ebf89b0e1b", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/ScriptingOnOSX.md", "title": "About AppleScript", "body": "<a id=\"//apple_ref/doc/uid/20000032-BABEBGCF\"></a>\n\n# About AppleScript\n\n*AppleScript* is a scripting language that provides direct control of scriptable applications and scriptable parts of the Mac OS. A *scriptable application* is one that can respond to a variety of Apple events by performing operations or supplying data. An *Apple event* is a type of interprocess message that can encapsulate commands and data of arbitrary complexity. By providing an API that supports these mechanisms, the [Open Scripting Architecture](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-BABEBGCF) makes possible one of the most powerful features in OS X—the ability to write scripts that automate operations with multiple applications.\n\nYou can use AppleScript scripts to perform repetitive tasks, automate complex workflows, control applications on local or remote computers, and access web services. Because script writers (or scripters) can access features in any scriptable application, they can combine features from many applications. For example, a script might make remote procedure calls to a web service to get stock quotes, add the current stock prices to a database, then graph information from the database in a spreadsheet application. From controlling an image-processing workflow to performing quality assurance testing for a suite of applications, AppleScript makes automation possible.\n\nWhile the AppleScript scripting language (described in [AppleScript Language Guide](http://developer.apple.com/documentation/AppleScript/Conceptual/AppleScriptLangGuide/index.html), and in a number of detailed third-party books) uses an English-like terminology which may appear simple, it is a rich, object-oriented language, capable of performing complicated programming tasks. However, its real strength comes from providing access to the features available in scriptable applications. If you make your application scriptable, it will help scripters get their work done, and quite likely become indispensable to their work process.\n\nThe [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1) application, available starting in OS X version 10.4, lets users work in a graphical interface to put together complex, automated workflows. Workflows consist of one or more actions, which are provided by Apple, by developers, and by scripters, and can be written in AppleScript and in other languages, including Objective-C. Starting in OS X v10.5, developers can incorporate workflows directly in their applications, providing another mechanism for accessing features of other applications and the Mac OS.\n\n[Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1), available starting in OS X version 10.5, provides an automated process for creating an Objective-C interface to scriptable applications. This allows Cocoa applications and other Objective-C code to efficiently access features of scriptable applications, using native Objective-C syntax. Some other scripting languages, such as Ruby and Python, can use Scripting Bridge, but also have their own software bridges to access features of scriptable applications—for more information, see *Getting Started With Scripting & Automation*.\n\nAppleScript has several other new or improved features in OS X v10.5, including full support for Unicode text, additional support for identifying and working with application objects in scripts, 64-bit support, more accurate and useful error messages, and additional scriptability in Apple technologies such as iChat and the Dock. For more information, see [AppleScript Features](http://www.macosxautomation.com/applescript/features/unicode.html).\n\n<a id=\"//apple_ref/doc/uid/20000032-1173352\"></a><a id=\"//apple_ref/doc/uid/20000032-1173352-BABIFHCE\"></a>\n\n## When to Use AppleScript\n\nThe following are common scenarios in which you might use AppleScript or related technologies in your development work.\n\n* You’re creating or updating an application for OS X and you want it to be scriptable. As a scriptable application, users can invoke it in their AppleScript scripts and you can write scripts to perform automated testing during development. You can also make the application accessible to Automator users, or access it through Apple’s Scripting Bridge, or through open source bridge technologies, using languages such as Objective-C, Ruby, and Python.\n\n  For information on these technologies, see [Scriptable Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-BABEBGCF), [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1), and [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1) in this document and the related learning paths in *Getting Started With Scripting & Automation* and *Getting Started with AppleScript*.\n\n  “Framework and Language Support,” in [About Apple Events](https://developer.apple.com/library/archive/AppleEvents/about_aes_aepg/about_aes_aepg.html#//apple_ref/doc/uid/TP40001449-CH202) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*, describes trade-offs involved in developing scriptable applications in procedural and object-oriented languages, and in using support provided by the Carbon APIs or the Cocoa application framework.\n* You’re interested in automating repetitive operations, whether in development or in other work, using scripts or [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1) workflows.\n\n  For information on working with scripts, see [Scripting with AppleScript](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-BABEBGCF) in this document, as well the learning paths in *Getting Started with AppleScript*.\n\n  To learn about applications and technologies that extend AppleScript and help it work with graphic images, XML, property lists, databases, and other technologies, see [AppleScript Utilities and Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-BABEBGCF).\n\n<a id=\"//apple_ref/doc/uid/20000032-1151403\"></a>\n\n## Limitations of AppleScript\n\nThe AppleScript scripting language excels in its ability to call on multiple applications, but was not designed to perform task-specific functions itself. So, for example, you cannot use AppleScript to efficiently perform intensive math operations or lengthy text processing. However, you can use AppleScript in combination with shell scripts, Perl scripts, and other scripting languages. This allows you to work with the most efficient language for the task at hand. For related information, see [Using AppleScript with Other Scripting Systems](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1152618).\n\nAppleScript relies on developers to build scriptability into their applications. However, a mechanism called GUI scripting, introduced with OS X version 10.3, does allow some scripting of applications that do not contain code for responding to Apple events. For more information, see [System Events and GUI Scripting](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-1149074).\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/ScriptingOnOSX.html", "sha256": "5fca43d70aeb2dc7aa176f4460b98a5cdbdafc01034b06111fca964a55a6b92b", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/as_related_apps.md", "title": "AppleScript Utilities and Applications", "body": "<a id=\"//apple_ref/doc/uid/TP40001570-BABEBGCF\"></a>\n\n# AppleScript Utilities and Applications\n\nApple provides a number of utilities and applications in OS X to enhance the features of AppleScript and your scripts. You can get additional information on some items described in this section by searching in Mac Help in the Finder or by going to the [AppleScript](http://www.macosxautomation.com/applescript/index.html) website.\n\n<a id=\"//apple_ref/doc/uid/TP40001570-1148318\"></a>\n\n## AppleScript Utility\n\nAppleScript Utility, located in `/Applications/AppleScript`, is an application that first became available in OS X version 10.4. Starting in OS X version 10.5, this utility is itself scriptable.\n\nAppleScript Utility helps you manage several AppleScript-related features in OS X that were formerly available separately. For example, AppleScript Utility provides an interface to:\n\n* Select a default script editor (to be launched when you double-click a script file.\n* Enable or disable GUI scripting (described in [System Events and GUI Scripting](#//apple_ref/doc/uid/TP40001570-1149074)).\n\n  Prior to OS X v10.4, GUI scripting was enabled through the “Enable access for assistive devices” checkbox in the Universal Access preference pane in System Preferences.\n* Launch the Folder Actions Setup application (described in [Folder Actions Setup](#//apple_ref/doc/uid/TP40001570-1148133)).\n* Specify settings for the Script menu.\n\n  The Script menu provides access to scripts for performing tasks such as the following:\n\n  * Opening AppleScript related folders.\n  * Working with Apple applications such as Address Book, Mail, and Script Editor.\n  * Working with parts of the OS, such as ColorSync, Finder, and Folder Actions.\n  * Working with features such as internet services, printing, and URLs.\n\n  In OS X version 10.3, you install and remove the Script menu with utility applications located in `/Applications/AppleScript`.\n\n<a id=\"//apple_ref/doc/uid/TP40001570-1148133\"></a><a id=\"//apple_ref/doc/uid/TP40001570-1148133-BAJJGIBG\"></a>\n\n## Folder Actions Setup\n\nFolder Actions is a feature that lets you associate scripts with folders. A script is executed when the folder to which it is attached is opened or closed, moved or resized, or has items added or removed.\n\nFolder Actions Setup, located in `/Applications/AppleScript`, is an application that first became available in OS X version 10.3. Starting in OS X version 10.5, Folder Actions Setup is itself scriptable.\n\nThis utility helps you perform tasks related to Folder Actions, including the following:\n\n* Enable or disable Folder Actions.\n* View the folders that currently have scripts attached and view the attached scripts.\n* Add folders to or remove folders from the list of folders.\n* Attach one or more scripts to a folder.\n* Remove attached scripts from a folder.\n* Enable or disable scripts attached to a folder.\n\n<a id=\"//apple_ref/doc/uid/TP40001570-1149074\"></a><a id=\"//apple_ref/doc/uid/TP40001570-1149074-BAJEIHJA\"></a>\n\n## System Events and GUI Scripting\n\nSystem Events is an agent (or faceless background application) that supplies the terminology for using a number of features in AppleScript scripts. Among these features is GUI scripting, which allows your scripts to perform some actions in applications that have no built-in scripting support. System Events, which is located in `/System/Library/CoreServices`, has been part of OS X since version 10.1 (Puma), though its features have evolved since that release.\n\nThe following are some of the terminology suites supplied by System Events in OS X version 10.4 (and where noted, in version 10.5). For more information, display the application dictionary, as described in [Displaying Scripting Dictionaries](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153006). You can also get information on many of the features supported by System Events in Mac Help (from the Help menu in OS X) and at the AppleScript [GUI Scripting](http://www.macosxautomation.com/applescript/uiscripting/index.html) web page at the [AppleScript in OS X](http://www.macosxautomation.com/applescript/index.html) website.\n\n* Accounts suite and Login Items suite\n\n  System Events supports scripting of the System Preferences Accounts pane through the terminology in these two suites.\n* Audio File suite and Movie File suite\n\n  Available starting in OS X version 10.5, these suites provide terminology for accessing audio files and movie files, and the data they contain.\n* Desktop suite\n\n  Available starting in OS X version 10.5, this suite provides access to Desktop preferences, such as the current desktop picture or pictures folder, and the interval for changing the desktop picture.\n* Disk-Folder-File suite\n\n  Provides terminology to access disks, files, and folders without targeting the Finder. This can be more efficient than using the Finder, and can prevent certain kinds of conflicts.\n* Dock Preferences suite and Expose Preferences suite\n\n  Available starting in OS X version 10.5, these suites provide terminology for accessing Dock preferences, as well as Exposé (including Spaces) and Dashboard mouse and key preferences.\n* Folder Actions suite\n\n  Starting with AppleScript 1.9.0 in Mac OS version 10.2, System Events supports the Folder Actions feature, described in [Folder Actions Setup](#//apple_ref/doc/uid/TP40001570-1148133).\n* Network Preferences suite\n\n  Available starting in OS X version 10.5, this suite provides terminology for working with items such as connections and disconnections, network locations, and network services.\n* Power suite\n\n  Provides commands for sleeping, logging out, shutting down, or restarting your computer.\n* Property List suite\n\n  Provides terminology for reading and writing the information in property list files.\n* Processes suite\n\n  Provides classes and commands for GUI Scripting, a feature available starting in OS X version 10.3 that allows scripters to control applications that are either not scriptable or only partially scriptable. With GUI Scripting, AppleScript scripts can select menu items, push buttons, and perform other tasks to control the interfaces of most non-Classic applications. However, as the name implies, GUI scripting works by scripting the user interface, and so tends to result in fragile scripts. For example, items in an application’s user interface may change in various ways between releases, or even between launches of the application, depending on preference settings and other factors.\n\n  This suite is called the Processes suite because in GUI scripting, the root for any script must be a process (represented by an instance of the `application process class`). The GUI Scripting architecture is based on the accessibility support in OS X, which must be enabled, in OS X v10.4, through the AppleScript Utility. Prior to OS X v10.4, GUI scripting was enabled through the “Enable access for assistive devices” checkbox in the Universal Access preference pane in System Preferences.\n\n  For more information, see the [GUI Scripting](http://www.macosxautomation.com/applescript/uiscripting/index.html) web page.\n* QuickTime File suite\n\n  Available starting in OS X version 10.5, this suite provides terminology for working with QuickTime files, including data, annotations, and tracks.\n* Security suite\n\n  Available starting in OS X version 10.5, this suite provides access to Security preferences, such as automatic login and password requirements.\n* System Events suite\n\n  This suite provides a great deal of terminology for working with parts of the OS. That includes properties for accessing certain folders (preferences folder, favorites folder, desktop pictures folder, and so on), the startup disk, and other useful items.\n* XML suite\n\n  Provides terminology for working with information in XML files.\n\n<a id=\"//apple_ref/doc/uid/TP40001570-1147921\"></a>\n\n## Image Events\n\nLike System Events, Image Events is an agent (or faceless background application) that is located in `/System/Library/CoreServices`. Image Events supports the manipulation, from scripts, of images and image-related data through operations such as cropping, embedding, matching, padding, profiling, rotating, and scaling. These operations are typically used in print, web, and media publishing.\n\nImage Events has been part of OS X since version 10.4 and provides access to the built-in service called SIPS (Scriptable Image Processing Server) that became available in that OS release.\n\nYou can find more information on Image Events in Mac Help (from the OS X Help menu) or at the [Image Events](http://www.macosxautomation.com/applescript/imageevents/index.html) web page. You can also examine the Image Events dictionary with Script Editor, as described in [Displaying Scripting Dictionaries](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153006). SIPS is described in [Technical Note TN2035 ColorSync on OS X](http://developer.apple.com/technotes/tn/tn2035.html#TNTAG58). You can also get some information about SIPS by typing `sips --help` in a Terminal window.\n\n<a id=\"//apple_ref/doc/uid/TP40001570-SW1\"></a>\n\n## Database Events\n\nDatabase Events is a simple, scratchpad database implementation for use in AppleScript scripts. It allows any script applet to create and edit its own database.\n\nYou can use Database Events to create a new database with a file associated with it or to open a database file to access its database. Databases contain records, records contain fields, and fields contain a name and a value. The assignment of names and values is free form, as the scripter defines it. Databases persist in the file system, across executions of Database Events.\n\nDatabase Events has been part of OS X since version 10.4. Like System Events, Database Events is an agent (or faceless background application) that is located in `/System/Library/CoreServices`.\n\nYou can examine the Database Events dictionary with Script Editor, as described in [Displaying Scripting Dictionaries](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153006).\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/as_related_apps.html", "sha256": "6bf18f84fcc153e1e0dde63e5b8c3a2bf5cb56db9913d4da9f38b4c62c0a2c98", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/automator.md", "title": "Automator", "body": "<a id=\"//apple_ref/doc/uid/TP40006469-SW1\"></a>\n\n# Automator\n\nAutomator is a workflow automation application, first available in OS X version 10.4. Automator, which is located in `/Applications`, lets you create complex workflows using a graphical interface that does not require any knowledge of scripting languages. A workflow consists of one or more actions, executed sequentially, with each action typically taking the output of the previous action as its input. An action performs a distinct operation, such as copying a file, cropping a photo, or sending an email message. You can run a workflow in Automator or save it as a standalone application.\n\nStarting in OS X version 10.5, you can also embed and execute Automator workflows in your application.\n\nAutomator includes actions for many Apple applications, including Finder, Mail, Safari, Xcode, iPhoto, iTunes, and QuickTime Player, and you can write actions that make features of your applications available in Automator. You use Xcode and Interface Builder to put together actions, using the Action project template (also available starting in OS X v10.4). Actions are implemented as plug-ins and you can write them using AppleScript (for scriptable applications) or Objective-C.\n\n> <a id=\"//apple_ref/doc/uid/TP40006469-SW2\"></a>\n>\n> **Note:** If your application is scriptable, other developers and users can write actions for it. However, by supplying actions yourself, you can be sure to make your application look its best in Automator.\n\nFor information on using the Automator application, choose Help in Automator or Help &gt; Mac Help in the Finder and search for “Automator”. For information on creating actions, see *[Automator Programming Guide](https://developer.apple.com/library/archive/../../AppleApplications/Conceptual/AutomatorConcepts/Automator.html#//apple_ref/doc/uid/TP40001450)* and *[Automator Framework Reference](https://developer.apple.com/documentation/automator)*. For information on using workflows in your application, see *[Automation Release Notes for OS X v10.7](https://developer.apple.com/library/archive/../../../releasenotes/AppleApplications/RN-Automator/index.html#//apple_ref/doc/uid/TP40001840)*, as well as the class descriptions for `AMWorkflow`, `AMWorkflowView`, and `AMWorkflowController` in *[Automator Framework Reference](https://developer.apple.com/documentation/automator)*\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/automator.html", "sha256": "fa2ea7078fcb1ef98cdfd4d5671824f33f71731ab3a9acdc17a216a53a3aea15", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/osa.md", "title": "Open Scripting Architecture", "body": "<a id=\"//apple_ref/doc/uid/TP40001571-BABEBGCF\"></a>\n\n# Open Scripting Architecture\n\nThe *Open Scripting Architecture (OSA)* provides a standard and extensible mechanism for interapplication communication in OS X. Communication takes place through the exchange of Apple events, a type of message designed to encapsulate commands and data of any complexity.\n\nApple events provide an event dispatching and data transport mechanism that can be used within a single application, between applications on the same computer, and between applications on different computers. The OSA defines data structures, a set of common terms, and a library of functions, so that applications can more easily create and send Apple events, as well as receive them and extract data from them.\n\n> <a id=\"//apple_ref/doc/uid/TP40001571-SW2\"></a>\n>\n> **Note:** Apple events are not always the most efficient or appropriate mechanism for communicating between processes. OS X offers other mechanisms, including distributed objects, notifications, sockets, ports, streams, shared memory, and Mach messaging. These mechanisms are described in “IPC and Notification Mechanisms” in [Kernel and Device Drivers Layer](https://developer.apple.com/library/archive/../../MacOSX/Conceptual/OSX_Technology_Overview/SystemTechnology/SystemTechnology.html#//apple_ref/doc/uid/TP40001067-CH207) in *[Mac Technology Overview](https://developer.apple.com/library/archive/../../MacOSX/Conceptual/OSX_Technology_Overview/About/About.html#//apple_ref/doc/uid/TP40001067)*.\n\nThe OSA supports several powerful features in OS X:\n\n* the ability to create scriptable applications (described in [Scriptable Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-BABEBGCF))\n* the ability for users to write scripts that combine operations from multiple scriptable applications\n* the ability to communicate between applications with Apple events\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1147859\"></a><a id=\"//apple_ref/doc/uid/TP40001571-1147859-BCIBHFFA\"></a>\n\n## The Parts of the Open Scripting Architecture\n\nApplications that need full access to the Open Scripting Architecture can get it by linking with the Carbon framework. Some applications that work with Apple events (especially those with minimal user interface requirements) may be able to obtain all the services they need by linking to the Core Services framework.\n\n> <a id=\"//apple_ref/doc/uid/TP40001571-SW3\"></a>\n>\n> **Note:** A *framework* is a type of bundle (or directory in the file system) that packages software with the resources that software requires, including the headers that define its interface. Frameworks are typically located in `/System/Library/Frameworks`, though they may be nested inside other frameworks.\n\nThe Open Scripting Architecture is made up of the following parts:\n\n* The *Apple Event Manager* provides an API for sending and receiving Apple events and working with the information they contain. It supplies the underlying support for creating scriptable applications. It is implemented in `AE.framework`, a subframework of `CoreServices.framework`. (Prior to OS X version 10.5, the `AE.framework` was a subframework of `ApplicationServices.framework`.)\n\n  This framework also defines constants that developers can use to support a standard vocabulary for Apple events among different applications.\n\n  For API documentation, see *[Apple Event Manager Reference](https://developer.apple.com/documentation/applicationservices/apple_event_manager)*. For conceptual documentation and code samples, see *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n* The *Carbon umbrella framework* includes the HIToolbox framework, which in turn defines certain functions used in processing and sending Apple events (for example, in the header file `Interaction.h`).\n* The *Open Scripting framework* defines standard data structures, routines, and resources for creating scripting components, which support scripting languages. Because of its standard interface, applications can interact with any scripting component, regardless of its language. This framework provides API for compiling, executing, loading, and storing scripts. It is implemented in `OpenScripting.framework`, a subframework of `Carbon.framework`.\n\n  For documentation, see *Open Scripting Architecture Reference*.\n* The AppleScript component (in `System/Library/Components`) implements the AppleScript language, which provides a way for scripts to control scriptable applications.\n\n  The AppleScript language is described in *[AppleScript Language Guide](https://developer.apple.com/library/archive/applescript-language-guide/introduction/ASLR_intro.md#//apple_ref/doc/uid/TP40000983)*, as well as in a number of third-party books.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1155023\"></a>\n\n## Apple Events\n\nThe Apple event is the basic message for interprocess communication in the Open Scripting Architecture. With Apple events, you can gather all the data necessary to accomplish a high level task into a single package that can be passed across process boundaries, evaluated, and returned with results.\n\nAn Apple event consists of a series of nested data structures, each identified by one or more four-character codes (also referred to as Apple event codes). These data structures, as well as the codes and the header files in which they are defined, are described in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*. That document also provides conceptual information about Apple events and programming examples that work with them. For a list of four-character codes and their related terminology used by Apple, see *[AppleScript Terminology and Apple Event Codes Reference](https://developer.apple.com/library/archive/../../../releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html#//apple_ref/doc/uid/TP40004532)*. Your application can reuse these terms and codes whenever it performs an equivalent function.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1152144\"></a><a id=\"//apple_ref/doc/uid/TP40001571-1152144-BAJFBDEI\"></a>\n\n## Apple Events Sent by the Mac OS\n\nThe Mac OS takes advantage of Apple events to communicate with applications, such as to notify an application that it has been launched or should open or print a list of documents. Applications that present a graphical user interface must be able to respond to whichever of these events make sense for the application. For example, all such applications can be launched and quit, but some may not be able to open or print documents.\n\nFor detailed information on the events sent by the Mac OS and how to respond to them, see:\n\n* For Carbon applications: “Handling Events Sent by the Mac OS” in [Responding to Apple Events](https://developer.apple.com/library/archive/AppleEvents/responding_aepg/responding_aepg.html#//apple_ref/doc/uid/TP40001449-CH206) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n* For Cocoa applications: [How Cocoa Applications Handle Apple Events](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_handle_AEs/SAppsHandleAEs.html#//apple_ref/doc/uid/20001239) in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1151905\"></a>\n\n## Script Execution in the Open Scripting Architecture\n\nThe Open Scripting Architecture allows users to control multiple applications with scripts written in a variety of scripting languages. Each scripting language has a corresponding scripting component. The AppleScript component supports the AppleScript language. When a scripting component executes a script, statements in the script may result in Apple events being sent to applications.\n\nAlthough AppleScript is the most widely used language (and the only one provided by Apple), developers are free to use the Open Scripting Architecture to create scripting components for other scripting languages. Depending on the implementation, scripts written in these languages may be able to communicate with scriptable applications.\n\nFigure 1 shows what happens when the [Script Editor](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1152365) application executes an AppleScript script that targets the Mail application. Script Editor calls functions in the Open Scripting framework. The Open Scripting framework communicates through the AppleScript component, which in turn uses the Apple Event Manager to send any required Apple events to the Mail application. If a reply is requested, the Mail application returns information in a reply Apple event.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1152867-BAJECDEI\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1152867\"></a>**Figure 1**  How parts of the OSA work together in executing scripts\n\n![How parts of the OSA work together in executing scripts.](https://developer.apple.com/library/archive/applescript-overview/art/execute_script_2x.png)![How parts of the OSA work together in executing scripts.](https://developer.apple.com/library/archive/applescript-overview/art/execute_script_2x.png)\n\nApplications can also call Apple Event Manager functions directly to send Apple events to other applications and get replies from them (not shown in Figure 1).\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1164068\"></a><a id=\"//apple_ref/doc/uid/TP40001571-1164068-BCIJDFCE\"></a>\n\n## Extending AppleScript with Coercions, Scripting Additions, and Faceless Background Applications\n\nDevelopers can extend AppleScript by creating bundles that provide command handlers and coercion handlers. The bundles can be applications or scripting additions. However, in many cases the best solution for extending AppleScript is to provide features through a faceless background application—that is, a sort of invisible server application.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1164081\"></a>\n\n### Coercions\n\n*Coercion* is the process of converting the information in an Apple event from one type to another. A *coercion handler* is a function that provides coercion between two (or possibly more) data types. OS X provides default coercion between many standard types. For a complete listing, see [Default Coercion Handlers](https://developer.apple.com/library/archive/AppleEvents/appendix3_aepg/appendix3_aepg.html#//apple_ref/doc/uid/TP40001449-CH213) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\nCoercion is available to both scripts and applications. In a script, for example, the following statement coerces the numeric value 1234 to the string value “1234”.\n\n```\nset myString to 1234 as text\n```\n\nA scriptable application can specify a type when it uses an Apple Event Manager function to extract data from an Apple event. If the data is not already in the specified type, the Apple Event Manager will attempt to coerce it to that type. An application can provide coercion handlers for its own data types, as described in [Writing and Installing Coercion Handlers](https://developer.apple.com/library/archive/AppleEvents/coercions_aepg/coercions_aepg.html#//apple_ref/doc/uid/TP40001449-CH208) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1164142\"></a>\n\n### Scripting Additions\n\nA *scripting addition* is a file or bundle that provides AppleScript commands or coercions. A single scripting addition can contain multiple handlers. For example, the Standard Additions scripting addition in OS X (filename `StandardAdditions.osax`), includes commands for using the Clipboard, obtaining the path to a file, speaking text, executing shell scripts, and more. The commands provided by the Standard Additions are available to all scripts. To see what terminology a scripting addition provides, you can examine its dictionary, as described in [Displaying Scripting Dictionaries](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153006).\n\nTerms introduced by scripting additions exist in the same name space as AppleScript terms and application-defined terms. While this has the advantage of making a service globally available, it also means that terms from scripting additions can conflict with other terms, polluting the global name space. Debugging scripting additions can also be difficult. Because you can not simply set breakpoints in your own code, you may need to use sampling, profiling, and various other tools to determine where a problem lies. (See [Faceless Background Applications](#//apple_ref/doc/uid/TP40001571-SW1) for an approach that avoids these problems.)\n\nA scripting addition provides its services by installing event handlers (for commands) or coercion handlers (for coercions) in an application’s system dispatch tables. The handlers for the Standard Additions (and for any other scripting additions installed by the Mac OS in `/System/Library/ScriptingAdditions`) get installed if the application calls API in the Open Scripting framework, or if the application specifically loads a scripting addition. An application can also specifically load other scripting additions from other locations.\n\nFor information on writing scripting additions, see Technical Note TN1164, [Native Scripting Additions](http://developer.apple.com/technotes/tn/tn1164.html). For information on loading scripting additions, see Technical Q&A QA1070, [Loading Scripting Additions Without Initializing Apple Script in OS X](http://developer.apple.com/qa/qa2001/qa1070.html).\n\n<a id=\"//apple_ref/doc/uid/TP40001571-SW1\"></a>\n\n### Faceless Background Applications\n\nA faceless background application (now more commonly referred to as an agent), is one that, as its name implies, runs in the background and has no visible user interface. By creating a scriptable agent, you can provide services without some of the disadvantages of scripting additions. For example, you can develop and debug in a standard application environment, and any terminology you provide does not pollute the global name space—it is available only within a script’s `tell` statement that targets the agent.\n\nYou can install your agent directly, but if it is intended for use with another application, you can put it in the `Resources` folder of the application it supports. That promotes ease of use by allowing a drag-and-drop installation process, and will minimize users stumbling across the agent and asking “What is this for?“ The agent will be launched whenever it is referenced in a `tell` statement. It can be told to quit, and you can also set it up to time out, so it can get unloaded when it is no longer in use.\n\nApple provides a number of scriptable services through agents, as described in [System Events and GUI Scripting](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-1149074), [Image Events](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-1147921), and [Database Events](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-SW1). For example, scripts can use the System Events application to perform operations on property list files.\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/osa.html", "sha256": "a4f9f92c4e48fb36d8af301da4069db571fba098741e211db431787d1133b0e7", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/scriptable_apps.md", "title": "Scriptable Applications", "body": "<a id=\"//apple_ref/doc/uid/TP40001569-BABEBGCF\"></a>\n\n# Scriptable Applications\n\nA *scriptable application* is one that goes beyond the basics of responding to Apple events sent by the Mac OS to make its most important data and operations available to AppleScript scripts or to other applications. To do this, the application must provide both a terminology for scripters to use and the underlying Apple event code to support it. Both Carbon and Cocoa applications can be scriptable, and the Cocoa framework contains built-in support that minimizes the amount of code you have to write.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1156165\"></a>\n\n## Specifying Scripting Terminology\n\nScriptable applications describe the scripting terminology they support by supplying a scripting dictionary. A dictionary specifies the commands and objects an application supports, as well as other information that is used by AppleScript or the application itself, and possibly by other applications or scripts that want to take advantage of the application’s scriptability. For information on designing a scripting terminology, see Technical Note TN2106, [Scripting Interface Guidelines](http://developer.apple.com/technotes/tn2002/tn2106.html).\n\nUsers typically examine a dictionary for information on how to control an application in their scripts. You can display the dictionary for a scriptable application or scripting addition with Script Editor, as described in [Displaying Scripting Dictionaries](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153006).\n\nThere are currently three dictionary formats:\n\n* *sdef:* “sdef” is short for “scripting definition.” This XML-based format is a superset of the two formats described next and supports new and improved features. Although prior to OS X version 10.4, you could not use an sdef directly in your application, you could convert an sdef into either of the other formats with the `sdp` tool. Starting in OS X v10.4, Cocoa applications can work natively with the sdef format, as described in [Preparing a Scripting Definition File](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_creating_sdef/SAppsCreateSdef.html#//apple_ref/doc/uid/TP40001979) and other chapters in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*.\n\n  In OS X v10.5 (Leopard), it’s possible to create applications that provide dictionary information solely in sdef format, both for Carbon and Cocoa applications. You can read about additional refinements to sdef usage in Cocoa applications for Leopard in the Scripting section of *[Foundation Release Notes for macOS 10.13 and iOS 11](https://developer.apple.com/library/archive/../../../releasenotes/Foundation/RN-Foundation/index.html)*.\n\n  For documentation on the sdef format, including a change history, see the `sdef`(5) man page. [Scripting Interface Guidelines](http://developer.apple.com/technotes/tn2002/tn2106.html) also includes information on working with sdefs. For documentation on the `sdp` tool, see the man page for `sdp`(1), as well as [Evolution of Cocoa Scriptability Information](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_evolution/SAppsEvolution.html#//apple_ref/doc/uid/TP40002164-CH19) in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*. For an example of how to use an sdef file, see the Sketch sample application. For other examples, see the sample code projects listed in [Support for Cocoa Applications](#//apple_ref/doc/uid/TP40001569-1151567).\n* *script suite:* This is the original format used by Cocoa applications and it is still supported for backward compatibility. A script suite contains a pair of information property list (plist) files that provide both AppleScript information and information used by the application. An application can contain multiple script suites.\n\n  For documentation, see [Script Suite and Script Terminology Files](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_suites/SAppsSuites.html#//apple_ref/doc/uid/20001241) in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*.\n* *aete:* This is the original dictionary format, and is still used in Carbon applications. The name comes from the Resource Manager resource type in which the information is stored (`'aete'`). An aete is useful in 10.4 and earlier, in both Carbon and Cocoa applications, to provide a dictionary that scripting languages can use without launching the application.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1155730\"></a><a id=\"//apple_ref/doc/uid/TP40001569-1155730-BAJEGIED\"></a>\n\n## Determining What to Make Scriptable\n\nIn designing a scriptable application, it’s a good idea to provide access to all of the application’s main features, though it may make sense to start with just a key subset. You don’t typically make your application’s user interface directly scriptable. A good design allows users to script your application’s model objects (which represent data and basic behaviors) rather than its user interface (which presents information to the user).\n\nFor example, the scripting support for a drawing application might allow a script to rotate an image, but not to perform the user interface operation of clicking a Rotate button. Some applications provide additional capabilities through their scripting interface that aren’t otherwise available.\n\nFor design information, see “Learning How to Make an Application Scriptable” in *Getting Started with AppleScript* and Technical Note TN2106, [Scripting Interface Guidelines](http://developer.apple.com/technotes/tn2002/tn2106.html).\n\nFor information on how to support printing in a scriptable application, see *[The Enhanced Print Apple Event](https://developer.apple.com/library/archive/../../../technotes/tn2002/tn2082.html#//apple_ref/doc/uid/DTS10003113)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-SW2\"></a>\n\n## Registering to Receive Apple Events\n\nA scriptable application typically responds to a set of common commands, such as `get data`, `set data`, `delete`, and `save`, as well as to other commands that support operations specific to the application. Commands are represented in Apple events by constants defined in framework or application headers. To support a command, an application registers an event handler routine with the Apple Event Manager to handle Apple events it receives that specify that command. The Apple Event Manager dispatches received events to the handlers registered for them.\n\n> <a id=\"//apple_ref/doc/uid/TP40001569-SW3\"></a>\n>\n> **Note:** For Cocoa applications, commands are registered automatically, so that developers rarely need to register apple event handlers directly.\n\nFor more information on creating and registering event handlers, see [Apple Event Dispatching](https://developer.apple.com/library/archive/AppleEvents/dispatch_aes_aepg/dispatch_aes_aepg.html#//apple_ref/doc/uid/TP40001449-CH204) and [Responding to Apple Events](https://developer.apple.com/library/archive/AppleEvents/responding_aepg/responding_aepg.html#//apple_ref/doc/uid/TP40001449-CH206) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1153769\"></a>\n\n## Resolving Objects in the Application\n\nApple events often specify items in the application. For example, a `get data` event might ask for the text of a paragraph in an open document. A distinct item in an application that can be specified in an Apple event is known as an *Apple event object*. (The term object does not imply that the items must be represented internally as objects in an object-oriented programming language.) All such objects are considered to be contained in other objects, with the application itself serving as the ultimate container. For a given application, the *AppleScript object model* (also called the Apple event object model) specifies the classes of objects a scripter can work with in scripts, the accessible properties of those objects, and the inheritance and containment relationships for those objects.\n\nThe structures within an Apple event that identify objects are referred to as *object specifiers*. Finding the Apple event objects they specify is known as resolving the object specifiers. To resolve object specifiers, an application must include functions that are able to find objects within their containers. The application registers these functions with the Apple Event Manager, and works with the Apple Event Manager to call them at the appropriate time to obtain the objects they specify.\n\nFor Cocoa applications, Cocoa scripting support does much of the work of resolving object specifiers, but a scriptable application must still supply methods that can locate an object within its object model containment hierarchy.\n\nFor an example of an AppleScript object model, see [Overview of Cocoa Support for Scriptable Applications](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_about_apps/SAppsAboutApps.html#//apple_ref/doc/uid/TP40001976); for information on how Cocoa applications resolve objects, see [Object Specifiers](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_object_specifiers/SAppsObjectSpecifiers.html#//apple_ref/doc/uid/TP40002164-CH3); both are in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1153888\"></a><a id=\"//apple_ref/doc/uid/TP40001569-1153888-BAJICJEG\"></a>\n\n## Recording\n\nA recordable application is one that sends Apple events to itself when a user performs actions with the application. If the user has turned on recording in the Script Editor application (with Script &gt; Record), actions that generate Apple events are recorded into an AppleScript script.\n\nApplications that support recording typically:\n\n* Factor code that implements the user interface from code that actually performs operations (a standard approach for applications that follow the model-view-controller design paradigm).\n* Send Apple events within the application to connect those two parts of the application. The Apple Event Manager provides a mechanism for doing this with a minimum of overhead, described in “Addressing an Apple Event for Direct Dispatching” in [Creating and Sending Apple Events](https://developer.apple.com/library/archive/AppleEvents/create_send_aepg/create_send_aepg.html#//apple_ref/doc/uid/TP40001449-CH209) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n* Make sure that any significant action or series of related actions within the application generates an Apple event.\n\nThe Finder application in OS X is recordable. Starting in OS X version 10.5, the [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1) application has a separate Record mechanism that lets users record actions into an Automator workflow.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1153953\"></a>\n\n## Creating and Sending Apple Events\n\nAn application can create and send Apple events directly. This is usually done either to send internal Apple events, as described in [Recording](#//apple_ref/doc/uid/TP40001571-1153888), to obtain services from a scriptable application, or to communicate directly with another application. The Open Scripting Architecture provides various mechanisms for creating and sending Apple events.\n\nStarting in OS X version 10.5, applications can use [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1) to obtain services from scriptable applications. Scripting Bridge lets you work efficiently in a high-level language (Objective-C) without having to handle the details of sending and receiving Apple events. (See also [Support for Cocoa Applications](#//apple_ref/doc/uid/TP40001569-1151567) for related information.)\n\nWhen you really do need to send an Apple event directly, see [Building an Apple Event](https://developer.apple.com/library/archive/AppleEvents/building_aes_aepg/building_aes_aepg.html#//apple_ref/doc/uid/TP40001449-CH203) and [Creating and Sending Apple Events](https://developer.apple.com/library/archive/AppleEvents/create_send_aepg/create_send_aepg.html#//apple_ref/doc/uid/TP40001449-CH209) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001571-1153983\"></a><a id=\"//apple_ref/doc/uid/TP40001569-1153983-BAJCGEBB\"></a>\n\n## Executing Scripts\n\nTo execute scripts, an application establishes a connection with the AppleScript scripting component. It can then:\n\n* Use the standard scripting component routines to manipulate scripts associated with any part of the application or its documents.\n* Let users record and edit scripts.\n* Compile and execute scripts.\n\n> <a id=\"//apple_ref/doc/uid/TP40001569-SW4\"></a>\n>\n> **Note:** Starting in OS X version 10.5, applications can use [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1) to obtain services from scriptable applications. This can be much more efficient than manipulating scripts.\n\nAn application can store and execute scripts regardless of whether it is scriptable or recordable. If an application is scriptable, however, it can execute scripts that control its own behavior, thus acting as both the client application and the server application for the corresponding Apple events. For more information, see *Open Scripting Architecture Reference*.\n\nIn Cocoa, the `NSAppleScript` class, described in *[NSAppleScript Class Reference](https://developer.apple.com/documentation/foundation/nsapplescript)*, provides a high-level wrapper for executing AppleScript scripts from applications. For more information, see [Support for Cocoa Applications](#//apple_ref/doc/uid/TP40001569-1151567).\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1155176\"></a>\n\n## Summary of Operations in a Scriptable Application\n\nThe following list summarizes how scriptable applications interact with the Open Scripting Architecture to make their features available to scripters.\n\n* The Apple Event Manager defines data structures that are used to construct Apple events.\n* The Open Scripting Architecture (OSA) provides a data transport and event dispatching mechanism for Apple events, built on top of lower level protocols.\n* AppleScript defines a scripting language, described in [AppleScript Language Guide](http://developer.apple.com/documentation/AppleScript/Conceptual/AppleScriptLangGuide/index.html) (and third-party books) and implemented by the AppleScript component in OS X.\n* There is a small set of Apple events sent by the Mac OS, such as `open application`, `quit`, and `open documents` that all applications should be able to respond to. A scriptable application responds to additional common events, such as `get data` and `set data`, as well as to its own specific commands.\n* A scriptable application provides a scripting terminology (or dictionary) for the operations it supports. The application can reuse some event constants defined by the OSA or use its own for custom events. (Constants defined by Apple, many of which you can reuse in your applications, are described in *[AppleScript Terminology and Apple Event Codes Reference](https://developer.apple.com/library/archive/../../../releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html#//apple_ref/doc/uid/TP40004532)*.)\n\n  The sdef file format provides a mechanism for creating one terminology definition that can be converted for use in different environments.\n* Developers design their applications so that key operations can be invoked in response to received Apple events.\n* A scriptable application works with the Apple Event Manager to:\n\n  * Register handlers for Apple events it can process.\n  * Extract information from received Apple events, then perform requested operations or return requested data.\n  * Construct Apple events for replies or other purposes.\n\n  Scriptable Carbon applications work with the Apple Event Manager directly, but for scriptable Cocoa applications, much of this work is handled automatically.\n* Scripters write AppleScript scripts that specify scriptable applications and the operations to perform.\n* When a script is executed, script statements that target applications are translated by the AppleScript component into Apple events that are sent to those applications.\n\n  Applications can also send Apple events directly to other applications.\n* An application responds to the Apple events it receives by performing operations, returning data, or both.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-SW1\"></a>\n\n## OS X Support for Creating Scriptable Applications\n\nOS X supplies a number of resources that applications can use to work with Apple events and to support scriptability, including the API provided in the following frameworks:\n\n* The underlying support in OS X for creating scriptable applications and working with Apple events is provided by the Open Scripting Architecture, and is described in [The Parts of the Open Scripting Architecture](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-1147859).\n* The *Cocoa framework* (`Cocoa.framework`) includes the Application Kit and Foundation frameworks, which together provide the building blocks for sophisticated Mac apps. The Cocoa framework includes a great deal of support for creating scriptable applications.\n\n  For specific Cocoa scripting documentation, see *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*.\n* Java applications are not typically scriptable, though they can be made AppleScript-aware using the mechanisms described in [OS X Integration for Java](https://developer.apple.com/library/archive/../../Java/Conceptual/Java14Development/07-NativePlatformIntegration/NativePlatformIntegration.html#//apple_ref/doc/uid/TP40001909) in *[Java Development Guide for Mac](https://developer.apple.com/library/archive/../../Java/Conceptual/Java14Development/00-Intro/JavaDevelopment.html#//apple_ref/doc/uid/TP30001142)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1150941\"></a><a id=\"//apple_ref/doc/uid/TP40001569-1150941-BCIBAEAI\"></a>\n\n### Support for Carbon Applications\n\nCarbon applications have traditionally worked directly with the Apple Event Manager to create, send, receive, and interpret Apple events. These topics are described in detail in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\nFor information on making your Carbon application scriptable, see previous sections in this chapter, as well as the learning paths in *Getting Started with AppleScript*.\n\nCarbon applications can use functions such as `OSACompile` and `OSAExecute` from `OpenScripting.framework` to compile and execute scripts. Keep in mind, however, that if you are executing a script merely to send a simple command to another application, it is more efficient to create and send an Apple event directly.\n\nIf the purpose for executing a script is just to perform a `do shell script` command, Carbon applications can do so more efficiently using one of the BSD calls `system(3)`, `popen(3)`, or `exec(3)`, which you can read about at their respective man pages.\n\n<a id=\"//apple_ref/doc/uid/TP40001569-1151567\"></a><a id=\"//apple_ref/doc/uid/TP40001569-1151567-BCIIEGJD\"></a>\n\n### Support for Cocoa Applications\n\nThe Foundation and Application Kit frameworks provide Cocoa applications with automated handling for certain Apple events. This includes events that may be sent by the Mac OS, such as the `open application`, `open documents`, `print documents`, and `quit` Apple events.\n\nIn addition, Cocoa provides substantial support for creating scriptable applications. To take advantage of it, applications provide scriptability information in one of the formats described in [Specifying Scripting Terminology](#//apple_ref/doc/uid/TP40001569-1156165). They also create KVC-compliant accessors for scriptable properties in their scriptable classes. (Key-value coding, or KVC, is described in *[Key-Value Coding Programming Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i)*.) Though creating a fully scriptable application is a non-trivial task, an application can support many standard AppleScript commands, such as those for getting and setting properties of application objects, with a relatively small number of additional steps.\n\nCocoa applications can also use any of the Open Scripting Architecture APIs available to Carbon applications, and in fact, Cocoa links with the Carbon framework. For example, a Cocoa Application might call an Apple Event Manager function to send an Apple event directly (there currently is no Cocoa API to do that).\n\nStarting in OS X version 10.5, the [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1) technology provides an efficient way for Cocoa applications to interact with scriptable applications at a high level—that is, without having to construct or parse individual Apple events.\n\nCocoa provides the `NSAppleScript` class for tasks such as compiling and executing scripts. This gives applications another mechanism to control scriptable applications and take advantage of services they provide. However, you should not use `NSAppleScript` to execute a script merely to result in sending an Apple event, because it is far more expensive than using Scripting Bridge or creating and sending an Apple event directly. And if the purpose for executing a script is to perform a `do shell script` command, Cocoa applications can execute shell commands more efficiently using `NSTask`.\n\nThe Cocoa framework also includes classes such as `NSAppleEventDescriptor`, for working with underlying Apple event data structures, and `NSAppleEventManager`, for accessing certain Apple Event Manager functions.\n\nCocoa support for handling Apple events and creating scriptable applications is documented in *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*. For related information, see “Framework and Language Support” in [About Apple Events](https://developer.apple.com/library/archive/AppleEvents/about_aes_aepg/about_aes_aepg.html#//apple_ref/doc/uid/TP40001449-CH202) in *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*. For introductory sample code, see *[SimpleScripting](https://developer.apple.com/library/archive/../../../samplecode/SimpleScripting/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004238)*, *[SimpleScriptingProperties](https://developer.apple.com/library/archive/../../../samplecode/SimpleScriptingProperties/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004240)*, *[SimpleScriptingObjects](https://developer.apple.com/library/archive/../../../samplecode/SimpleScriptingObjects/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004244)*, and *[SimpleScriptingVerbs](https://developer.apple.com/library/archive/../../../samplecode/SimpleScriptingVerbs/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004239)*. For a more complex example, see the Sketch sample application.\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/scriptable_apps.html", "sha256": "3c28701cf48bd096c25a2a4ab4a9c4d58a567053c1c0b3b5f5bb8ce9ac1ca543", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/scripting_bridge.md", "title": "Scripting Bridge", "body": "<a id=\"//apple_ref/doc/uid/TP40006467-SW1\"></a>\n\n# Scripting Bridge\n\nScripting Bridge, introduced in OS X version 10.5, provides an automated process for creating an Objective-C interface to scriptable applications. This allows Cocoa applications and other Objective-C code to efficiently access features of scriptable applications, using native Objective-C syntax. Some other scripting languages, such as Ruby and Python, can use also Scripting Bridge (they also have open-source software bridges to scriptable applications—RubyOSA and py-appscript). For more information, see *[Ruby and Python Programming Topics for Mac](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/RubyPythonCocoa/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004936)*.\n\nTo use Scripting Bridge, you add the Scripting Bridge framework to your application project and use command-line tools to generate the interface files for the scriptable application you want to target. Then in your application code, you obtain a reference to an application object for the targeted scriptable application and send Objective-C messages to it.\n\nFor details, see *[Scripting Bridge Programming Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptingBridgeConcepts/Introduction/Introduction.html#//apple_ref/doc/uid/TP40006104)* and *[Scripting Bridge Framework Reference](https://developer.apple.com/documentation/scriptingbridge)*. For related sample code, see *[ScriptingBridgeFinder](https://developer.apple.com/library/archive/../../../samplecode/ScriptingBridgeFinder/Introduction/Intro.html#//apple_ref/doc/uid/DTS10004283)*.\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/scripting_bridge.html", "sha256": "60c2e42733ee7f6dee99ed606ea5f2eb4c62d7aed7a1f6c49a89bdc16254d2cc", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "Concepts/work_with_as.md", "title": "Scripting with AppleScript", "body": "<a id=\"//apple_ref/doc/uid/TP40001568-BABEBGCF\"></a>\n\n# Scripting with AppleScript\n\nThe following is a brief introduction to AppleScript scripts, tools for working with them, and information on using AppleScript scripts together with other scripting systems. For related documents, see the learning paths in *Getting Started with AppleScript*.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1150347\"></a><a id=\"//apple_ref/doc/uid/TP40001568-1150347-BCIJGDFA\"></a>\n\n## Script Editor and AppleScript Scripts\n\nAn AppleScript script consists of one or more statements, written in a syntax described in [AppleScript Language Guide](http://developer.apple.com/documentation/AppleScript/Conceptual/AppleScriptLangGuide/index.html) (and in a number of third-party books). AppleScript defines some scripting terms, while scriptable applications and parts of the Mac OS specify additional terms for scriptable features they support. Scripting terminologies generally use common English words, resulting in scripts that are easier to read. For example, the following is a valid script statement:\n\n```\ndisplay dialog \"Welcome to AppleScript.\"\n```\n\nUsers can compile and execute scripts with the [Script Editor](#//apple_ref/doc/uid/TP40001568-1152365) application and can save them in various executable formats, including as stand-alone applications.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1150894\"></a>\n\n### A Simple AppleScript Script\n\nListing 1 shows an AppleScript script that simply returns the number of files in the `Applications` folder on the current system disk (denoted by `startup disk`, a term understood by the Finder). If the folder cannot be found, the script returns a count of zero. This script counts just files in the specified folder, not folders or the files they might contain.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152309-BBCHJADC\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152309\"></a>**Listing 1**  A script that counts the files in the Applications folder\n\n```\ntell application \"Finder\"\n    if folder \"Applications\" of startup disk exists then\n        return count files in folder \"Applications\" of startup disk\n    else\n        return 0\n    end if\nend tell\n```\n\nWhen a script is compiled and executed, some statements perform basic operations, such as assigning a variable or returning a value. A statement that targets a scriptable application results in an Apple event being sent to that application. The application can return information to the script in a reply Apple event.\n\nThe script in Listing 1 causes an Apple event to be sent to the Finder, which locates the Applications folder on the startup disk, counts the files in it, and returns that value. The `if...then...else` structure is one of several standard programming language features that AppleScript supports.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152365\"></a><a id=\"//apple_ref/doc/uid/TP40001568-1152365-BGBEHBHI\"></a>\n\n### Script Editor\n\nThe Script Editor application is located in `/Applications/AppleScript`. It provides the ability to edit, compile, and execute scripts, display application scripting terminologies, and save scripts in a variety of formats, such as compiled scripts, applications, bundled applications, and plain text.\n\nScript Editor can display the result of executing an AppleScript script and can display a log of the Apple events that are sent during execution of a script. In the Script Editor Preferences, you can also choose to keep a history of recent results or event logs.\n\nScript Editor has text formatting preferences for various types of script text, such as language keywords, comments, and so on. You can also turn on or off the Script Assistant, a code completion tool that can suggest and fill in scripting terms as you type. In addition, Script Editor provides a contextual menu to insert many types of boilerplate script statements, such as conditionals, comments, and error handlers.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1153006\"></a><a id=\"//apple_ref/doc/uid/TP40001568-1153006-BBCEEIFG\"></a>\n\n#### Displaying Scripting Dictionaries\n\nYou can choose File &gt; Open Dictionary in Script Editor to examine the scripting dictionary of a scriptable application or scripting addition on your computer. Or you can drag an application icon to the Script Editor icon to display its dictionary (if it has one). You can also open scripting dictionaries in Xcode.\n\nTo display a list that includes just the scriptable applications and scripting additions provided by the Mac OS, choose Window &gt; Library. Double-click an item in the list to display its dictionary. Figure 1 shows the dictionary for the Finder application in OS X version 10.5. The dictionary is labeled as “Finder.sdef”. The sdef format, along with other terminology formats, is described in [Specifying Scripting Terminology](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1156165).\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1153023-BBCCDDAF\"></a>\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1153023\"></a>**Figure 1**  The Finder dictionary in Script Editor (in OS X v10.5)\n\n![The Finder dictionary in Script Editor (in OS X v10.5)](https://developer.apple.com/library/archive/applescript-overview/art/finder_dictionary_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152927\"></a>\n\n#### Debugging and Third Party Products\n\nScript Editor supports only simple debugging strategies, such as logging event output and inserting `speak` or `display dialog` statements within scripts. However, there are a number of third-party products for working with AppleScript, some of them quite powerful. For example, there are script editors and tools for monitoring and debugging scripts, Apple events, and scriptable applications. Some of these third-party products are listed at the [AppleScript Resources](http://www.macosxautomation.com/applescript/resources.html) web page.\n\nFor information on debugging scriptable applications and Apple events, see the documents *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)* and *[Apple Events Programming Guide](https://developer.apple.com/library/archive/AppleEvents/intro_aepg/intro_aepg.html#//apple_ref/doc/uid/TP40001449)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152119\"></a>\n\n### Interacting with the User in Scripts\n\nAppleScript provides little direct support for interacting with the user in scripts. However, the Standard Additions scripting addition provides terminology for obtaining various choices from the user. For example, it includes commands for letting the user choose an application, a color, a file, a filename, and so on. It also provides the `display dialog` command, which allows you to display a dialog with various options for text labels, buttons, and text input. Scripting Additions are described in [Extending AppleScript with Coercions, Scripting Additions, and Faceless Background Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-1164068).\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1174450\"></a>\n\n## What You Can Control with Scripts\n\nMany applications from Apple are scriptable and you can also script some parts of the Mac OS. For example, the Finder, iTunes, QuickTime Player, and Mail are highly scriptable. For a complete list, see the [Scriptable Applications](http://www.macosxautomation.com/applescript/resources.html) web page at the [AppleScript](http://www.macosxautomation.com/applescript/index.html) website. For more information on scriptability provided by Apple, see [AppleScript Utilities and Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-BABEBGCF).\n\n> <a id=\"//apple_ref/doc/uid/TP40001568-SW1\"></a>\n>\n> **Note:** You can also control many Apple technologies and applications with [Automator](https://developer.apple.com/library/archive/applescript-overview/Concepts/automator.md#//apple_ref/doc/uid/TP40006469-SW1), which is available starting in OS X version 10.4.\n\nMany third-party applications are scriptable—their advertising and packaging usually mention if they are scriptable. The documentation for a scriptable application typically lists the AppleScript terminology that the application understands. You can also determine if an application is scriptable by attempting to examine its dictionary with the Script Editor application, as described in [Displaying Scripting Dictionaries](#//apple_ref/doc/uid/TP40001568-1153006).\n\n> <a id=\"//apple_ref/doc/uid/TP40001568-SW2\"></a>\n>\n> **Note:** For a list of scriptable applications from all parties, see “Scriptable Applications” at the [MacScripter](http://macscripter.net/) website.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1174475\"></a>\n\n## Using AppleScript with Web Services\n\nXML-RPC and SOAP are remote procedure call protocols that support exchanging commands and information over the Internet. Starting with OS X version 10.1, AppleScript and the Apple Event Manager provide XML-RPC and SOAP support such that:\n\n* Scripters can make XML-RPC calls and SOAP requests from scripts.\n* Developers can make XML-RPC calls and SOAP requests from applications or other code by sending Apple events.\n\nFor documentation on using AppleScript with web services, see *[XML-RPC and SOAP Programming Guide](https://developer.apple.com/library/archive/soapXMLRPC/chapter1/soapXMLRPC_intro.html#//apple_ref/doc/uid/TP30001126)* (some examples may be out of date). For additional sources and examples, see [Web Services](http://www.macosxautomation.com/applescript/resources.html). For information on developing web content and applications for the web in OS X, see *[Getting Started with Internet and Web](https://developer.apple.com/library/archive/../../../referencelibrary/GettingStarted/GS_WebInternet/_index.html#//apple_ref/doc/uid/TP30001123)*.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1152618\"></a><a id=\"//apple_ref/doc/uid/TP40001568-1152618-BGBEFCAH\"></a>\n\n## Using AppleScript with Other Scripting Systems\n\nOS X supports a UNIX-like shell environment that is familiar to many developers. That support includes the Terminal application, located in `/Applications/Utilities`, which you can use to open shell windows and execute shell scripts. AppleScript provides two convenient mechanisms to interact with a shell environment: you can execute shell commands from within AppleScript scripts and you can execute AppleScript scripts as shell commands.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1148121\"></a>\n\n### Executing Shell Commands From AppleScript Scripts\n\nAppleScript provides the `do shell script` command to support executing a shell command as part of an AppleScript script. For example, the following script statement uses a `do shell script` command to change the directory to the current user’s home directory and obtain a list of the files found there. The list information is stored in the AppleScript variable `fileInfo`:\n\n```\nset fileInfo to do shell script \"cd ~; ls\"\n```\n\nThe `do shell script` command is primarily of use to scripters. Although applications can execute AppleScript scripts that use the `do shell script` command, they have more efficient options for executing shell commands, as described in [Support for Carbon Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1150941) and [Support for Cocoa Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1151567). For more information on the `do shell script` command, see Technical Note TN2065, [do shell script in AppleScript](http://developer.apple.com/technotes/tn2002/tn2065.html).\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1148189\"></a>\n\n### Executing AppleScript Scripts as Shell Commands\n\nTo execute AppleScript scripts as shell commands in a Terminal window or shell script file, you can use the `osacompile` command and the `osascript` command (located in `/usr/bin`). The former compiles an AppleScript script, while the latter executes a plain text or a compiled AppleScript script. Man pages provide documentation for these commands. For example, type `man osascript` in a Terminal window to get information on the `osascript` command.\n\nStarting in OS X version 10.5, there is a command-line tool to display compiled scripts as text, `osadecompile`. Again, see the man page for details.\n\nAlso starting in Mac OX X v10.5, AppleScript allows use of the # symbol as a comment-to-end-of-line token (the traditional double hyphen (--) is also still supported). This means that you can make a plain AppleScript script into a Unix executable by beginning it with the following line and giving it execute permission.\n\n```\n#!/usr/bin/osascript\n```\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1148219\"></a>\n\n### Scripting the Terminal Application\n\nThe Terminal application is itself scriptable. For example, you can use the `do script` command to execute text as a shell script or command. To see the operations Terminal supports, you can examine its scripting dictionary with Script Editor.\n\n<a id=\"//apple_ref/doc/uid/TP40001568-1149917\"></a>\n\n### Using Other Scripting Languages\n\nFor those who have experience with various scripting languages and environments, the previous sections have probably already provided an urge to start experimenting. And you do have a lot of options for combining features from the scripting tools, languages, and environments that are most appropriate for specific kinds of tasks. For example, the following one-line shell script statement combines Perl, AppleScript, and various tools to find duplicate entries in the Address Book application.\n\n```\nosascript -e 'tell app \"Address Book\" to get the name of every person' | perl -pe 's/, /\\\\n/g' | sort | uniq -d\n```\n\nThis statement uses `osascript` to execute an inline AppleScript script (`'tell app \"Address Book\" to get the name of every person'`) that returns the names of every address entry from the Address Book application. It pipes the output of this script through the `perl` tool, and with a series of other commands and pipes, obtains and formats a (possibly empty) list of duplicate names.\n\nFor additional information about working with AppleScript from languages such as Ruby and Python, see [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1).\n\n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/work_with_as.html", "sha256": "0ecddf7bb2f139c8987a10539c2ed19c9be0e638fe5fb4dddb1b78535b58414b", "etag": null, "last_modified": null}
{"collection": "applescript-overview", "path": "RevisionHistory.md", "title": "Document Revision History", "body": "<a id=\"//apple_ref/doc/uid/20001726-CJBGIAGF\"></a>\n\n# Document Revision History\n\nThis table describes the changes to *AppleScript Overview*.\n\n| **Date** | **Notes** |\n| 2007-10-31 | Updated to reflect AppleScript changes for OS X version 10.5. |\n|  | Added a chapter to describe the [Scripting Bridge](https://developer.apple.com/library/archive/applescript-overview/Concepts/scripting_bridge.md#//apple_ref/doc/uid/TP40006467-SW1) technology that was introduced in OS X v10.5. In several places, noted that using Scripting Bridge can be easier and more efficient than using native Apple events to use the services of scriptable applications. |\n|  | In [Open Scripting Architecture](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-BABEBGCF), added a section [Faceless Background Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-SW1) that describes this mechanism for extending AppleScript. |\n|  | In the renamed chapter [AppleScript Utilities and Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-BABEBGCF), added a section to describe the AppleScript helper application [Database Events](https://developer.apple.com/library/archive/applescript-overview/Concepts/as_related_apps.md#//apple_ref/doc/uid/TP40001570-SW1), which is available beginning in OS X v10.4. In the same chapter, noted that the AppleScript Utility and Folder Actions Setup applications are themselves scriptable. Also added information on new terminology supported by the System Events application, including the Desktop, Dock Preferences, Network Preferences, Security, and other new suites. |\n|  | Combined information that was previously in several places into the renamed chapter [Scriptable Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-BABEBGCF). The section [Support for Cocoa Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1151567) now provides links to sample code projects. |\n|  | Added various information to the section [Specifying Scripting Terminology](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1156165), including a note that changes to sdef usage in Cocoa applications for OS X v10.5 are described in the Scripting section of *[Foundation Release Notes for macOS 10.13 and iOS 11](https://developer.apple.com/library/archive/../../../releasenotes/Foundation/RN-Foundation/index.html)*. |\n|  | In the section [Executing AppleScript Scripts as Shell Commands](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1148189), noted that in OS X v10.5, you can use the # symbol as a comment-to-end-of-line token, providing a way to make a plain AppleScript script into a Unix executable. Also noted that in OS X v10.5 there is a command-line tool to display compiled scripts as text, `osadecompile`. |\n|  | In the section [The Parts of the Open Scripting Architecture](https://developer.apple.com/library/archive/applescript-overview/Concepts/osa.md#//apple_ref/doc/uid/TP40001571-1147859), noted that in OS X v10.5, the Apple event framework, `AE.framework`, is now part of `CoreServices.framework`. |\n|  | Updated [Figure 1](https://developer.apple.com/library/archive/applescript-overview/Concepts/work_with_as.md#//apple_ref/doc/uid/TP40001568-1153023-BBCCDDAF) showing a Finder dictionary. |\n| 2006-03-08 | Made minor editorial corrections and updated links. |\n|  | In several places that refer to how AppleScript works with Cocoa applications, added or revised links to *[Cocoa Scripting Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptableCocoaApplications/SApps_intro/SAppsIntro.html#//apple_ref/doc/uid/TP40002164)*. |\n|  | In the section [Resolving Objects in the Application](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-1153769), added information about the AppleScript object model and about resolving objects in Cocoa applications. |\n| 2005-04-29 | Added information on Open Scripting Architecture (OSA) and the Automator, Script Utility, System Events, and Image Events applications. Changed title from \"AppleScript for OS X.\" |\n| 2004-05-27 | Added section [Determining What to Make Scriptable](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001571-1155730). |\n|  | Moved some existing material into a new section, [Scriptable Applications](https://developer.apple.com/library/archive/applescript-overview/Concepts/scriptable_apps.md#//apple_ref/doc/uid/TP40001569-BABEBGCF). |\n|  | Made minor text revisions to avoid duplication with *Getting Started with AppleScript*. |\n|  | Made some document references into links. |\n| 2003-09-17 | Updated some links to other documentation. |\n| 2003-05-15 | Moved this material into a separate document. |\n|  | Reorganized some sections, added documentation links, and made minor corrections. |\n\n  \n  \n\n---\n\nCopyright © 2002, 2007 Apple Inc. All Rights Reserved. [Terms of Use](http://www.apple.com/legal/internet-services/terms/site.html) | [Privacy Policy](http://www.apple.com/privacy/) | Updated: 2007-10-31\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/RevisionHistory.html", "sha256": "fc44cdfb4fc1151a284a26f9dc913c8a2f2c6c005b25dd0ac7557c5bd8f5648b", "etag": null, "last_modified": null}
