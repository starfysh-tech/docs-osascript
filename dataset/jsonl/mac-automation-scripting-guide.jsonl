{"collection": "mac-automation-scripting-guide", "path": "AboutScriptingTerminology.md", "title": "About Scripting Terminology", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH75\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH75-SW2\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH9\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH9-SW1\"></a>\n\n## About Scripting Terminology\n\nAppleScript and JavaScript possess core language commands, classes, and properties that make scripting possible. For AppleScript, core terminology is documented in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*. For JavaScript, see *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)* and [Mozilla’s official JavaScript documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript).\n\nEach scriptable app introduces additional terminology that extends the core language. For example, Mail introduces terminology for creating and sending email messages. iTunes introduces terminology for working with music and playlists. In order to write a script that controls an app, you need to familiarize yourself with that app’s terminology.\n\nThe terminology for an app is found in its *scripting dictionary*, an `.sdef` file stored in the app bundle. The dictionary describes the commands, classes, and properties an app supports. This information is used by the scripting components of the operating system, the app itself, and any other apps or scripts that interact with the app through scripting. It also serves as a reference, which you can consult in Script Editor for guidance as you write a script. See Figure 10-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH75-SW1\"></a>\n**Figure 10-1**Example of a scripting dictionary in Script Editor\n![image: ../Art/script-editor_dictionary_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_dictionary_2x.png)\n\nNot every OS X app supports scripting, but many apps do, including Mail, Address Book, Calendar, iTunes, and Messages. To determine if a particular app is scriptable, see if it has a scripting dictionary. See [Opening a Scripting Dictionary](https://developer.apple.com/library/archive/mac-automation-scripting-guide/OpenaScriptingDictionary.md#//apple_ref/doc/uid/TP40016239-CH76-SW1).\n\nScripting terminology can vary extensively from app to app. While some apps may have extensive scripting support, others may have very limited scripting support. If an app doesn’t meet your scripting needs, reach out to the app developer and request improved support in a future version. To request scripting enhancements for Apple apps, submit a [bug report](http://bugreport.apple.com) that specifies the app and communicates your specific needs.\n\nAlso, keep in mind that scripting terminology can change from one version of an app or OS X to the next. Always test essential scripts when upgrading to a new app or system version.\n\n> **Note**\n>\n>\n> OS X also supports scripting additions, packages of terminology that extend the core AppleScript language. In fact, OS X comes with Standard Additions, a scripting addition that implements a range of commonly performed functions, such as displaying alerts and dialogs, speaking text, and reading and writing files. Scripting additions are installed in `/System/ScriptingAdditions/`, `/Library/ScriptingAdditions/`, or `~/Library/ScriptingAdditions/`, and have dictionaries just like scriptable apps.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/AboutScriptingTerminology.html", "sha256": "0382b9e3df03a7c98a9b4ec731013c4ca738a6b96fb7fe37b4004d0396fa14ca", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "AboutthisGuide.md", "title": "About this Guide", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH71\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH71-SW1\"></a>\n\n## About this Guide\n\nThis guide provides high-level information about scripting on the Mac and isn’t designed to serve as a language guide. Primarily, it introduces core concepts, highlights resources, and provides examples that demonstrate common scripting tasks.\n\nThis guide does not provide examples for every possible task that can be scripted in a given situation or app. For example, it doesn’t cover automating every single scriptable text manipulation function. Instead, it covers automating a range of commonly encountered scenarios, such as changing the case of text, splitting text, and adding a prefix to text. These examples can be used for guidance when attempting to automate other scriptable tasks.\n\nMany of the examples in this guide have been written modularly, allowing them to be copied and pasted into your own scripts, where they may be used as is or modified to meet your unique needs. Most examples are commented and relatively easy to follow, even with little or no prior scripting experience.\n\nThe majority of examples in this guide are provided in both AppleScript and JavaScript format. A language label precedes each example, making its language easily distinguishable at a glance. Some examples demonstrate using the scripting bridges, AppleScriptObjC and JavaScriptObjC, to interact with Objective-C classes. Additional examples are occasionally provided in notes to show alternative solutions.\n\n> **Note**\n>\n>\n> Some examples in this guide require OS X 10.11 or later.\n>\n> Some JavaScript examples in this guide use template strings—string literals which may include embedded expressions, such as the one shown in Listing 4-1.\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=numberOfPeople%20%3D%2012%0Aconsole.log%28%60There%20are%20%24%7BnumberOfPeople%7D%20people.%60%29)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH71-SW3\"></a>\n> **Listing 4-1**JavaScript: Example of a Template String with an embedded expression\n>\n> 1. `numberOfPeople = 12`\n> 2. `` console.log(`There are ${numberOfPeople} people.`) ``\n>\n> Template strings were introduced as a JavaScript standard in 2015, and are supported in OS X 10.11 and later.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH71-SW4\"></a>\n\n### Opening Examples in Script Editor\n\nLinks have been provided throughout this guide to open example code directly in Script Editor. To open an example, click the “Open in Script Editor” link above a code listing. Depending on the security settings on your Mac, you may be prompted to confirm you want to open the script in Script Editor. If you receive this prompt, click the New Script button to create a new document. See Figure 4-1 and Figure 4-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH71-SW5\"></a>\n**Figure 4-1**The dialog that opens when you click the “Open in Script Editor” link\n![image: ../Art/scripteditor_openscript_alert_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_openscript_alert_2x.png)\n<a id=\"//apple_ref/doc/uid/TP40016239-CH71-SW6\"></a>\n**Figure 4-2**Example of a script that opens after you click the New Script button\n![image: ../Art/scripteditor_openedscript_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_openedscript_2x.png)\n> **Note**\n>\n>\n> New Script Editor documents are set to use your default scripting language, as configured in the General pane of Script Editor preferences. See [Targeting a Scripting Language](https://developer.apple.com/library/archive/mac-automation-scripting-guide/GettoKnowScriptEditor.md#//apple_ref/doc/uid/TP40016239-CH5-SW4) to learn how to configure an example script to target a different scripting language.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/AboutthisGuide.html", "sha256": "68b0f3aa2cc46b5ff5fe0c6fe502d79ebc074ad54105f1d4cdfc74ac4f5566bf", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "AppendixA-AppleScriptObjCQuickTranslationGuide.md", "title": "Objective-C to AppleScript Quick Translation Guide", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH79\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH78\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH78-SW1\"></a>\n\n## Objective-C to AppleScript Quick Translation Guide\n\nThis appendix provides AppleScript equivalents for typical Objective-C features of a class. Below the table is a list of notes that correspond to the numbers in column 1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW2\"></a>\n\n| Note | Objective-C | AppleScript |\n| --- | --- | --- |\n| image: ../Art/1_2x.png | `@interface MyClass : NSObject {` | `script MyClass`  `   property parent: class \"NSObject\"` |\n| image: ../Art/2_2x.png | `   int myProperty;`  `   IBOutlet NSTextField *myField;`  `}`  `IBOutlet @property (retain) NSButton *myButton;` | ` property myProperty: 0`  ` property myField: missing value`  ` property myButton: missing value` |\n| image: ../Art/3_2x.png | `@end`    `@implementation MyClass` |  |\n| image: ../Art/4_2x.png | `- (IBAction) myAction:(id) object {` | ` -- Handler with interleaved parameters`  `   on myAction:object`    ` -- or`    ` -- Handler with positional parameters`  `   on myAction_(object)` |\n| image: ../Art/5_2x.png | ` // No Arguments`  `   [object method];`    ` // One Argument`  `   [object method:parameterName];`    ` // Multiple Argument`  `   [object methodWithArgument1:parameter1 Argument2:parameter2];` | ` -- No Arguments`  `      object's methodName()`  ` -- or`  ` methodName() of object`  ` -- or`  ` tell object to methodName()`    ` -- One Argument`  ` object's methodName:parameterName`  ` -- or`  ` methodName_(parameterName) of object`  ` -- or`  ` tell object to methodName:parameterName`    ` -- Multiple Arguments`  ` object's methodWithArgument1:parameter1 Argument2:parameter2`  ` -- or`  ` methodWithArgument1_Argument2_(parameter1, parameter2) of object`  ` -- or`  ` tell object to methodWithArgument1:parameter1 Argument2:parameter2` |\n| image: ../Art/6_2x.png | `   [object propertyName];`  `   object.propertyName;` | `      object's propertyName()`  ` -- or`  ` propertyName() of object`    `      object's propertyName`  ` -- or`  ` propertyName of object` |\n| image: ../Art/7_2x.png | `}`  `@end` | `   end myAction_`  `end script` |\n\n1. An Objective-C class corresponds to an AppleScript `script` object. In AppleScript, inheritance is denoted using the `parent` property.\n2. An instance variable or `@property` in Objective-C corresponds to a `property` in AppleScript.\n\n   AppleScript doesn’t require explicit tagging of Interface Builder outlet properties (`IBOutlet`). Interface Builder sees any property with a value of `missing value` as a potential outlet.\n3. Objective-C divides class definitions into an `@interface` section containing properties and an `@implementation` section containing method definitions. AppleScript has no such division. Properties and methods are all contained within the same `script` object.\n4. An Objective-C method definition corresponds to an AppleScript handler that uses either an interleaved- or positional-style for parameter placement.\n\n   Interleaved parameters are preceded by colons and separated by spaces, similar to Objective-C syntax. See [Handlers with Interleaved Parameters](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW2) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n   A positional parameter hander name is the Objective-C selector name, with colons changed to underscores. This handler name is followed by parentheses enclosing comma-separated parameters. See [Handlers with Positional Parameters](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW13) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n   AppleScript doesn’t require explicit tagging of Interface Builder action methods (`IBAction`). Interface Builder sees any method with a single parameter as a potential action method.\n5. A method call in Objective-C corresponds to an AppleScript handler call that uses either interleaved- or positional-style parameters. Regardless of style, parameters must always be provided in the order the method definition specifies.\n\n   AppleScript has three equivalent syntaxes for addressing object handlers and properties: `object's method`, `method of object`, and `tell object to method`.\n6. An Objective-C method with no parameters, such as a property or constant, can be called using an explicit accessor method call or more concise dot syntax. Similarly in AppleScript, a method with no parameters can be called using a handler call with empty parentheses, or as a property without the parentheses.\n7. In AppleScript, handlers and `script` objects are closed using the `end` syntax.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW7\"></a>\n\n### Resolving Terminology Conflicts in AppleScriptObjC\n\nAppleScript distinguishes between *reserved words*, *application identifiers*, and *user identifiers*. Reserved words are terms defined by AppleScript itself. Application identifiers, also known as *application keywords*, are terms defined by an app’s scripting dictionary. User identifiers are variable or subroutine names defined by the script writer.\n\nIdentifiers passed to AppleScriptObjC, in particular, Cocoa method names, must be user identifiers. If an identifier conflicts with a reserved word or an application identifier, you can force it to be considered a user identifier by escaping it—enclosing it in vertical bars. For example, the `NSColor` class has a `set` method for setting the current drawing color. However, `set` is a reserved AppleScript term for assigning variables. Calling the `set` method without escaping it would produce a syntax error. Listing 43-1 shows the correct usage.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=myColor%27s%20%7Cset%7C%28%29%0A--%20OR%0A%7Cset%7C%28%29%20of%20myColor%0A--%20OR%0Atell%20myColor%20to%20%7Cset%7C%28%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW3\"></a>\n**Listing 43-1**AppleScriptObjC: Escaping a method name that conflicts with a reserved word\n\n1. `myColor's |set|()`\n2. `-- OR`\n3. `|set|() of myColor`\n4. `-- OR`\n5. `tell myColor to |set|()`\n\nSimilarly, `NSWindow` has a `bounds` property, but `bounds` is an application-defined term. Therefore, any references to this property must also be escaped. See Listing 43-2.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=get%20myWindow%27s%20%7Cbounds%7C%0A--%20OR%0Aget%20%7Cbounds%7C%20of%20myWindow%0A--%20OR%0Atell%20myColor%20to%20get%20%7Cbounds%7C)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW4\"></a>\n**Listing 43-2**AppleScriptObjC: Escaping a property name that conflicts with an application identifier\n\n1. `get myWindow's |bounds|`\n2. `-- OR`\n3. `get |bounds| of myWindow`\n4. `-- OR`\n5. `tell myColor to get |bounds|`\n\nWhen in doubt, add the vertical bars. If they’re unnecessary, they are merely redundant and harmless.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW8\"></a>\n\n### Importing Frameworks\n\nTo import a framework in AppleScript, use the `use` command, followed by the framework name. See Listing 43-3.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aset%20theString%20to%20%22Hello%20World%22%0Aset%20theString%20to%20stringWithString_%28theString%29%20of%20NSString%20of%20current%20application%0Aset%20theString%20to%20%28uppercaseString%28%29%20of%20theString%29%20as%20string)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW5\"></a>\n**Listing 43-3**AppleScriptObjC: Importing Foundation framework\n\n1. `use framework \"Foundation\"`\n3. `set theString to \"Hello World\"`\n4. `set theString to stringWithString_(theString) of NSString of current application`\n5. `set theString to (uppercaseString() of theString) as string`\n6. `--&gt; Result: \"HELLO WORLD\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW9\"></a>\n\n### Accessing Scripting Additions\n\nA normal AppleScript automatically loads and has access to terminology from scripting additions that are installed on the system. In AppleScriptObjC scripts, you must explicitly state that you want to use scripting addition terminology. Listing 43-4 shows how to do this.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20scripting%20additions%0Adisplay%20dialog%20%22Hello%20World%22%20as%20string)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW6\"></a>\n**Listing 43-4**AppleScriptObjC: Using scripting additions\n\n1. `use scripting additions`\n2. `display dialog \"Hello World\" as string`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW10\"></a>\n\n### Classes and Constants\n\nIn AppleScriptObjC, Objective-C classes and constants are referred to in the context of the `current application` constant—a reference to the app that’s running the script.\n\nIn this context, classes are referenced using the `class` specifier, followed by the class name, as shown in Listing 43-5.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0Aclass%20%22NSView%22%20of%20current%20application)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW11\"></a>\n**Listing 43-5**AppleScriptObjC: Referencing a class\n\n1. `use framework \"Foundation\"`\n2. `class \"NSView\" of current application`\n\nConstants are referenced without a preceding identifier. See Listing 43-6.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Acurrent%20application%27s%20NSCalibratedRGBColorSpace%0A--%20OR%0ANSCalibratedRGBColorSpace%20of%20current%20application)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW12\"></a>\n**Listing 43-6**AppleScriptObjC: Referencing a constant\n\n1. `use framework \"Foundation\"`\n3. `current application's NSCalibratedRGBColorSpace`\n4. `-- OR`\n5. `NSCalibratedRGBColorSpace of current application`\n\nListing 43-7 demonstrates how to reference both Objective-C classes and constants.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=script%20MyView%0A%20%20%20%20property%20parent%20%3A%20class%20%22NSView%22%0A%0A%20%20%20%20on%20drawRect%3Arect%0A%20%20%20%20%20%20%20%20set%20theWhiteColor%20to%20current%20application%27s%20class%20%22NSColor%22%27s%20whiteColor%28%29%0A%20%20%20%20%20%20%20%20--%20OR%0A%20%20%20%20%20%20%20%20set%20theWhiteColor%20to%20whiteColor%28%29%20of%20class%20%22NSColor%22%20of%20current%20application%0A%20%20%20%20%20%20%20%20--%20OR%0A%20%20%20%20%20%20%20%20tell%20class%20%22NSColor%22%20of%20current%20application%20to%20set%20theWhiteColor%20to%20whiteColor%28%29%0A%0A%20%20%20%20%20%20%20%20theWhiteColor%27s%20colorUsingColorSpaceName%3A%28current%20application%27s%20NSCalibratedRGBColorSpace%29%0A%20%20%20%20%20%20%20%20--%20OR%0A%20%20%20%20%20%20%20%20colorUsingColorSpaceName_%28NSCalibratedRGBColorSpace%20of%20current%20application%29%20of%20theWhiteColor%0A%20%20%20%20end%20drawRect%3A%0Aend%20script)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW14\"></a>\n**Listing 43-7**AppleScriptObjC: Example of a script that references both classes and constants\n\n1. `script MyView`\n2. ` property parent : class \"NSView\"`\n4. ` on drawRect:rect`\n5. ` set theWhiteColor to current application's class \"NSColor\"'s whiteColor()`\n6. ` -- OR`\n7. ` set theWhiteColor to whiteColor() of class \"NSColor\" of current application`\n8. ` -- OR`\n9. ` tell class \"NSColor\" of current application to set theWhiteColor to whiteColor()`\n11. ` theWhiteColor's colorUsingColorSpaceName:(current application's NSCalibratedRGBColorSpace)`\n12. ` -- OR`\n13. ` colorUsingColorSpaceName_(NSCalibratedRGBColorSpace of current application) of theWhiteColor`\n14. ` end drawRect:`\n15. `end script`\n\nIn places where `current application` is the current context, such as the top level of a script, `current application` may be shortened to `my` or `me`. In the case of class specifiers, it may be omitted entirely. See Listing 43-8.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aclass%20%22NSView%22%0A%0Amy%20NSCalibratedRGBColorSpace%0A--%20OR%0ANSCalibratedRGBColorSpace%20of%20me)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW13\"></a>\n**Listing 43-8**AppleScriptObjC: Referencing a classes and constants in the context of the current application\n\n1. `use framework \"Foundation\"`\n3. `class \"NSView\"`\n5. `my NSCalibratedRGBColorSpace`\n6. `-- OR`\n7. `NSCalibratedRGBColorSpace of me`\n\nAs a convenience technique to save typing, it’s good practice to define properties for classes at the top of your script. This way, you can refer to them by property name throughout your script.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=script%20MyView%0A%20%20%20%20property%20parent%20%3A%20class%20%22NSView%22%0A%20%20%20%20property%20NSColor%20%3A%20class%20%22NSColor%22%0A%0A%20%20%20%20on%20drawRect%3Arect%0A%20%20%20%20%20%20%20%20set%20theWhiteColor%20to%20NSColor%27s%20whiteColor%28%29%0A%20%20%20%20%20%20%20%20theWhiteColor%27s%20colorUsingColorSpaceName%3ANSCalibratedRGBColorSpace%0A%20%20%20%20end%20drawRect%3A%0Aend%20script)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW15\"></a>\n**Listing 43-9**AppleScriptObjC: Defining classes as properties\n\n1. `script MyView`\n2. ` property parent : class \"NSView\"`\n3. ` property NSColor : class \"NSColor\"`\n5. ` on drawRect:rect`\n6. ` set theWhiteColor to NSColor's whiteColor()`\n7. ` theWhiteColor's colorUsingColorSpaceName:NSCalibratedRGBColorSpace`\n8. ` end drawRect:`\n9. `end script`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH79-SW16\"></a>\n\n### Resources\n\nFor additional information about AppleScriptObjC, see *[AppleScriptObjC Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/ScriptingAutomation/RN-AppleScriptObjC/index.html#//apple_ref/doc/uid/TP40008853)* and the third-party book [EveryDay AppleScriptObjC](http://macosxautomation.com/applescript/apps/everyday_book.html).\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/AppendixA-AppleScriptObjCQuickTranslationGuide.html", "sha256": "8863194851867d0ae17c4e576065c67a50f41ff0f96a81dc3ded91c1557b1999", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "AutomatetheUserInterface.md", "title": "Automating the User Interface", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH69\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH35\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH35-SW1\"></a>\n\n## Automating the User Interface\n\nUnfortunately, not every Mac app has scripting support, and those that do may not always have scripting support for every task you want to automate. You can often work around such limitations, however, by writing a user interface script, commonly called a UI or GUI script. A user interface script simulates user interaction, such as mouse clicks and keystrokes, allowing the script to select menu items, push buttons, enter text into text fields, and more.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW12\"></a>\n\n### Enabling User Interface Scripting\n\nUser interface scripting relies upon the OS X accessibility frameworks that provide alternative methods of querying and controlling the interfaces of apps and the system. By default, accessibility control of apps is disabled. For security and privacy reasons, the user must manually enable it on an app-by-app (including script apps) basis.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW13\"></a>\n\n**To enable accessibility control for an app**\n\n1. Launch System Preferences and click Security & Privacy.\n2. Click the Privacy tab.\n3. Click Accessibility.\n4. Click the Add button (+).\n5. Choose an app and click Open.\n6. Select the checkbox to the left of the app.\n\n   ![image: ../Art/systempreferences_security_accessibility_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/systempreferences_security_accessibility_2x.png)\n\nWhen running an app that requires accessibility control for the first time, the system prompts you to enable it. See Figure 37-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW2\"></a>\n**Figure 37-1**An accessibility control prompt\n![image: ../Art/accessibility_alert1_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/accessibility_alert1_2x.png)\n\nAttempting to run an app that has not been given permission to use accessibility features results in an error. See Figure 37-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW3\"></a>\n**Figure 37-2**An accessibility control error\n![image: ../Art/accessibility_alert2_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/accessibility_alert2_2x.png)\n> **Note**\n>\n>\n> To run a user interface script in Script Editor, you must enable accessibility for Script Editor.\n>\n> Admin credentials are required to perform enable user interface scripting.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW15\"></a>\n\n### Targeting an App\n\nUser interface scripting terminology is found in the Processes Suite of the System Events scripting dictionary. This suite includes terminology for interacting with most types of user interface elements, including windows, buttons, checkboxes, menus, radio buttons, text fields, and more. In System Events, the `process` class represents a running app. Listing 37-1 shows how to target an app using this class.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20process%20%22Safari%22%0A%20%20%20%20%20%20%20%20--%20Perform%20user%20interface%20scripting%20tasks%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW4\"></a>\n**Listing 37-1**AppleScript: Targeting an app for user interface scripting\n\n1. `tell application \"System Events\"`\n2. ` tell process \"Safari\"`\n3. ` -- Perform user interface scripting tasks`\n4. ` end tell`\n5. `end tell`\n\nTo control the user interface of an app, you must first inspect the app and determine its element hierarchy. This can be done by querying the app. For example, Listing 37-2 asks Safari for a list of menus in the menu bar.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20process%20%22Safari%22%0A%20%20%20%20%20%20%20%20name%20of%20every%20menu%20of%20menu%20bar%201%0A%20%20%20%20end%20tell%0Aend%20tell%0A--%3E%20Result%3A%20%7B%22Apple%22%2C%20%22Safari%22%2C%20%22File%22%2C%20%22Edit%22%2C%20%22View%22%2C%20%22History%22%2C%20%22Bookmarks%22%2C%20%22Develop%22%2C%20%22Window%22%2C%20%22Help%22%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW5\"></a>\n**Listing 37-2**AppleScript: Querying an app for user interface element information\n\n1. `tell application \"System Events\"`\n2. ` tell process \"Safari\"`\n3. ` name of every menu of menu bar 1`\n4. ` end tell`\n5. `end tell`\n6. `--&gt; Result: {\"Apple\", \"Safari\", \"File\", \"Edit\", \"View\", \"History\", \"Bookmarks\", \"Develop\", \"Window\", \"Help\"}`\n\nAccessibility Inspector (Figure 37-3) makes it even easier to identify user interface element information. This app is included with Xcode. To use it, open Xcode and select Xcode &gt; Open Developer Tool &gt; Accessibility Inspector.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW6\"></a>\n**Figure 37-3**Accessibility Inspector\n![image: ../Art/accessibilityinspector_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/accessibilityinspector_2x.png)\n\nOnce you know how an element fits into an interface, you target it within that hierarchy. For example, `button X of window Y of process Z`.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW16\"></a>\n\n### Clicking a Button\n\nUse the `click` command to click a button. Listing 37-3 clicks a button in the Safari toolbar to toggle the sidebar between open and closed.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20process%20%22Safari%22%0A%20%20%20%20%20%20%20%20tell%20toolbar%20of%20window%201%0A%20%20%20%20%20%20%20%20%20%20%20%20click%20%28first%20button%20where%20its%20accessibility%20description%20%3D%20%22Sidebar%22%29%0A%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20end%20tell%0Aend%20tell%0A--%3E%20Result%3A%20%7Bbutton%201%20of%20toolbar%201%20of%20window%20%22AppleScript%3A%20Graphic%20User%20Interface%20%28GUI%29%20Scripting%22%20of%20application%20process%20%22Safari%22%20of%20application%20%22System%20Events%22%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW7\"></a>\n**Listing 37-3**AppleScript: Clicking a button\n\n1. `tell application \"System Events\"`\n2. ` tell process \"Safari\"`\n3. ` tell toolbar of window 1`\n4. ` click (first button where its accessibility description = \"Sidebar\")`\n5. ` end tell`\n6. ` end tell`\n7. `end tell`\n8. `--&gt; Result: {button 1 of toolbar 1 of window \"AppleScript: Graphic User Interface (GUI) Scripting\" of application process \"Safari\" of application \"System Events\"}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW17\"></a>\n\n### Choosing a Menu Item\n\nMenu items can have a fairly deep hierarchy within the interface of an app. A menu item generally resides within a menu, which resides within a menu bar. In scripting, they must be addressed as such. Listing 37-4 selects the Pin Tab menu item in the Window menu of Safari.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20process%20%22Safari%22%0A%20%20%20%20%20%20%20%20set%20frontmost%20to%20true%0A%20%20%20%20%20%20%20%20click%20menu%20item%20%22Pin%20Tab%22%20of%20menu%20%22Window%22%20of%20menu%20bar%201%0A%20%20%20%20end%20tell%0Aend%20tell%0A--%3E%20Result%3A%20menu%20item%20%22Pin%20Tab%22%20of%20menu%20%22Window%22%20of%20menu%20bar%20item%20%22Window%22%20of%20menu%20bar%201%20of%20application%20process%20%22Safari%22%20of%20application%20%22System%20Events%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW8\"></a>\n**Listing 37-4**AppleScript: Choosing a menu item\n\n1. `tell application \"System Events\"`\n2. ` tell process \"Safari\"`\n3. ` set frontmost to true`\n4. ` click menu item \"Pin Tab\" of menu \"Window\" of menu bar 1`\n5. ` end tell`\n6. `end tell`\n7. `--&gt; Result: menu item \"Pin Tab\" of menu \"Window\" of menu bar item \"Window\" of menu bar 1 of application process \"Safari\" of application \"System Events\"`\n\n> **Note**\n>\n>\n> Scripting the user interface of an app can be tedious and repetitious. To streamline the process, consider creating handlers to perform common functions. For example, Listing 37-5 shows a handler that can be used to choose any menu item of any menu in any running app.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20chooseMenuItem%28theAppName%2C%20theMenuName%2C%20theMenuItemName%29%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20--%20Bring%20the%20target%20app%20to%20the%20front%0A%20%20%20%20%20%20%20%20tell%20application%20theAppName%0A%20%20%20%20%20%20%20%20%20%20%20%20activate%0A%20%20%20%20%20%20%20%20end%20tell%0A%0A%20%20%20%20%20%20%20%20--%20Target%20the%20app%0A%20%20%20%20%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tell%20process%20theAppName%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Target%20the%20menu%20bar%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tell%20menu%20bar%201%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Target%20the%20menu%20by%20name%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tell%20menu%20bar%20item%20theMenuName%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tell%20menu%20theMenuName%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Click%20the%20menu%20item%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20click%20menu%20item%20theMenuItemName%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20try%0Aend%20chooseMenuItem)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW9\"></a>\n> **Listing 37-5**AppleScript: A handler that chooses a menu item\n>\n> 1. `on chooseMenuItem(theAppName, theMenuName, theMenuItemName)`\n> 2. ` try`\n> 3. ` -- Bring the target app to the front`\n> 4. ` tell application theAppName`\n> 5. ` activate`\n> 6. ` end tell`\n> 8. ` -- Target the app`\n> 9. ` tell application \"System Events\"`\n> 10. ` tell process theAppName`\n> 12. ` -- Target the menu bar`\n> 13. ` tell menu bar 1`\n> 15. ` -- Target the menu by name`\n> 16. ` tell menu bar item theMenuName`\n> 17. ` tell menu theMenuName`\n> 19. ` -- Click the menu item`\n> 20. ` click menu item theMenuItemName`\n> 21. ` end tell`\n> 22. ` end tell`\n> 23. ` end tell`\n> 24. ` end tell`\n> 25. ` end tell`\n> 26. ` return true`\n> 27. ` on error`\n> 28. ` return false`\n> 29. ` end try`\n> 30. `end chooseMenuItem`\n>\n> Listing 37-6 calls the handler in Listing 37-5 to select the Pin Tab menu item in the Window menu of Safari.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=chooseMenuItem%28%22Safari%22%2C%20%22Window%22%2C%20%22Pin%20Tab%22%29)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW10\"></a>\n> **Listing 37-6**AppleScript: Calling a handler to choose a menu item\n>\n> 1. `chooseMenuItem(\"Safari\", \"Window\", \"Pin Tab\")`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW19\"></a>\n\n### Choosing a Submenu Item\n\nSome menus contain other menus. In these cases, it may be necessary to select a menu item in a submenu of a menu. Listing 37-7 demonstrates how this would be done by selecting a submenu item in Safari.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20process%20%22Safari%22%0A%20%20%20%20%20%20%20%20set%20frontmost%20to%20true%0A%20%20%20%20%20%20%20%20click%20menu%20item%20%22Email%20This%20Page%22%20of%20menu%20of%20menu%20item%20%22Share%22%20of%20menu%20%22File%22%20of%20menu%20bar%201%0A%20%20%20%20end%20tell%0Aend%20tell%0A--%3E%20Result%3A%20%7Bmenu%20item%20%22Email%20This%20Page%22%20of%20menu%20%22Share%22%20of%20menu%20item%20%22Share%22%20of%20menu%20%22File%22%20of%20menu%20bar%20item%20%22File%22%20of%20menu%20bar%201%20of%20application%20process%20%22Safari%22%20of%20application%20%22System%20Events%22%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH69-SW11\"></a>\n**Listing 37-7**AppleScript: Selecting a submenu item\n\n1. `tell application \"System Events\"`\n2. ` tell process \"Safari\"`\n3. ` set frontmost to true`\n4. ` click menu item \"Email This Page\" of menu of menu item \"Share\" of menu \"File\" of menu bar 1`\n5. ` end tell`\n6. `end tell`\n7. `--&gt; Result: {menu item \"Email This Page\" of menu \"Share\" of menu item \"Share\" of menu \"File\" of menu bar item \"File\" of menu bar 1 of application process \"Safari\" of application \"System Events\"}`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/AutomatetheUserInterface.html", "sha256": "c68c529e6292522be24951207bc6af1725d2417f7da4be30c292faef8732b15e", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "CallCommandLineUtilities.md", "title": "Calling Command-Line Tools", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH43\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW1\"></a>\n\n## Calling Command-Line Tools\n\nIn AppleScript, the `do shell script` command is used to execute command-line tools. This command is implemented by the Standard Additions scripting addition included with OS X.\n\n> **Note**\n>\n>\n> The Terminal app in `/Applications/Utilities/` is scriptable and provides another way to execute command-line tools from scripts.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW7\"></a>\n\n### Executing Commands\n\nThe direct parameter of the `do shell script` command is a string containing the shell code you want to execute, as demonstrated in Listing 39-1, which simply lists a directory.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=do%20shell%20script%20%22ls%20%2FApplications%2F%22%0A%28*%0A--%3E%20Result%3A%20%0A%22App%20Store.app%0AAutomator.app%0ACalculator.app%0ACalendar.app%0A...%22%0A*%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW3\"></a>\n**Listing 39-1**AppleScript: Executing a simple shell command that lists the contents of a directory\n\n1. `do shell script \"ls /Applications/\"`\n2. `(*`\n3. `--&gt; Result:`\n4. `\"App Store.app`\n5. `Automator.app`\n6. `Calculator.app`\n7. `Calendar.app`\n8. `...\"`\n9. `*)`\n\nSince the direct parameter of `do shell script` is a string, you can concatenate it with other strings at run time. Listing 39-2, for example, concatenates a shell command to a previously defined parameter value.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theHostName%20to%20%22www.apple.com%22%0Ado%20shell%20script%20%22ping%20-c1%20%22%20%26%20theHostName)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW4\"></a>\n**Listing 39-2**AppleScript: Concatenating a command with a value\n\n1. `set theHostName to \"www.apple.com\"`\n2. `do shell script \"ping -c1 \" & theHostName`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW8\"></a>\n\n### Quoting Strings\n\nThe shell uses space characters to separate parameters and gives special meaning to certain punctuation marks, such as `$`, `(`, `)`, and `*`. To ensure that strings are treated as expected—for example, spaces aren’t seen as delimiters—it’s best to wrap strings in quotes. This process is known as *quoting*. If your string contains quotes, they must also be *escaped* (preceded by a `/` character) so they are interpreted as part of the string. Listing 39-3 shows an example of an error occurring as a result of a parameter that contains a space.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20%22%2FLibrary%2FApplication%20Support%2F%22%0Ado%20shell%20script%20%22ls%20%22%20%26%20thePath%0A--%3E%20Result%3A%20error%20%22ls%3A%20%2FLibrary%2FApplication%3A%20No%20such%20file%20or%20directory%5Crls%3A%20Support%3A%20No%20such%20file%20or%20directory%22%20number%201)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW5\"></a>\n**Listing 39-3**AppleScript: An error resulting from a string containing a space\n\n1. `set thePath to \"/Library/Application Support/\"`\n2. `do shell script \"ls \" & thePath`\n3. `--&gt; Result: error \"ls: /Library/Application: No such file or directory\\\\rls: Support: No such file or directory\" number 1`\n\nThe easiest way to quote a string is to use the `quoted form` property of the text class, as demonstrated in Listing 39-4. This property returns the string in a form that’s safe from further interpretation by the shell, regardless of its contents.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20quoted%20form%20of%20%22%2FLibrary%2FApplication%20Support%2F%22%0A--%3E%20Result%3A%20%22%27%2FLibrary%2FApplication%20Support%2F%27%22%0Ado%20shell%20script%20%22ls%20%22%20%26%20thePath%0A%28*%0A--%3E%20Result%3A%0A%22App%20Store%0AApple%0A...%0A%22%0A*%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW6\"></a>\n**Listing 39-4**AppleScript: Quoting a string to prevent errors\n\n1. `set thePath to quoted form of \"/Library/Application Support/\"`\n2. `--&gt; Result: \"'/Library/Application Support/'\"`\n3. `do shell script \"ls \" & thePath`\n4. `(*`\n5. `--&gt; Result:`\n6. `\"App Store`\n7. `Apple`\n8. `...`\n9. `\"`\n10. `*)`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH43-SW9\"></a>\n\n### More Information\n\nFor more information about the `do shell script` command, see [Commands Reference](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_cmds.html#//apple_ref/doc/uid/TP40000983-CH216) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)* and [Technical Note TN2065](http://developer.apple.com/technotes/tn2002/tn2065.html).\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/CallCommandLineUtilities.html", "sha256": "5889d75c235fc53f951384f761cddfa3fe4d17d751648531e554c9e0e52afd7c", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ConfigureScriptingPreferences.md", "title": "Configuring Scripting Preferences", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH70\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW1\"></a>\n\n## Configuring Scripting Preferences\n\nScript Editor preferences allows you to configure a variety of aspects of scripting behavior.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW10\"></a>\n\n### General Preferences\n\nIn the General pane of Script Editor preferences (Figure 9-1), you can configure settings such as the following.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW22\"></a>\n**Figure 9-1**General pane of Script Editor preferences\n![image: ../Art/script-editor_preferences_window_general_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_general_pane_2x.png)\n\n**Default Language**—The default scripting language when you create new Script Editor documents.\n\n**Show “tell” application menu**—This setting can be enabled to add a tell application menu to the navigation bar. Selecting an app in this menu allows you to direct script execution to the chosen app. In Figure 9-2, the tell application menu is set to the Finder. As a result, the script itself doesn’t need to include a `tell application \"Finder\"` statement. It automatically understands the Finder’s terminology and sends events to the Finder.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW23\"></a>\n**Figure 9-2**The tell application menu in a Script Editor document\n![image: ../Art/scripteditor_tellappmenu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_tellappmenu_2x.png)\n\nIn addition, the current application object—which refers to the application currently executing the script—reflects the selected application, rather than Script Editor. See Listing 9-1 and Listing 9-2.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=name%20of%20current%20application)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW15\"></a>\n**Listing 9-1**AppleScript: Targeting the current application object after setting the tell application menu in Script Editor to Finder\n\n1. `name of current application`\n2. `--&gt; Result: \"Finder\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=Application.currentApplication%28%29.name%28%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW16\"></a>\n**Listing 9-2**JavaScript: Targeting the current application object after setting the tell application menu in Script Editor to Finder\n\n1. `Application.currentApplication().name()`\n2. `// Result: \"Finder\"`\n\n**Show inherited items**—This setting can be enabled to display inherited object properties in the dictionary viewer. For example, in the Finder, a `file` object inherits the attributes of an `item` object. Without this setting enabled, the dictionary entry for `file` simply provide a a pointer to the `item` entry to view the `item` attributes. See Figure 9-3. With this option enabled, the `file` entry in the Finder’s scripting dictionary includes the attributes of an `item`. See Figure 9-4.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW25\"></a>\n**Figure 9-3**Dictionary entry without inherited items\n![image: ../Art/scripteditor_dictionary_entrywithoutinheriteditems_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_dictionary_entrywithoutinheriteditems_2x.png)\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW24\"></a>\n**Figure 9-4**Dictionary entry with inherited items\n![image: ../Art/scripteditor_dictionary_entrywithinheriteditems_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_dictionary_entrywithinheriteditems_2x.png)\n\n**Script Menu**—These settings allow you to enable and configure a systemwide script menu (Figure 9-5). This menu can be used to organize your scripts and provide access to them in any app.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW26\"></a>\n**Figure 9-5**The systemwide script menu\n![image: ../Art/scriptmenu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scriptmenu_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW12\"></a>\n\n### Editing Preferences\n\nIn the Editing pane of Script Editor preferences, shown in Figure 9-6, you can configure settings such as the following.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW6\"></a>\n**Figure 9-6**Editing pane of Script Editor preferences\n![image: ../Art/script-editor_preferences_window_editing_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_editing_pane_2x.png)\n\n**Code completion**—When this option is enabled, Script Editor suggest code completions as you type a script (Figure 9-7).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW2\"></a>\n**Figure 9-7**Code completion in Script Editor\n![image: ../Art/scripteditor_codecompletion1_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_codecompletion1_2x.png)\n\nTo accept and insert a code completion suggestion, press the F5 key or the Esc (Escape) key. If multiple code completion choices are available, a code completion dialog appears, allowing you to select a suggestion (see Figure 9-8).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW3\"></a>\n**Figure 9-8**The code completion dialog in Script Editor\n![image: ../Art/scripteditor_codecompletion2_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_codecompletion2_2x.png)\n\n**Tab width and line wrapping**—Adjust how indentation and line wrapping occurs in the editor pane of Script Editor documents.\n\n**Escape tabs and line breaks in strings**—This setting only affects AppleScripts. When this option is disabled, tabs and line breaks appear normally in a text string, as shown in Figure 9-9.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW4\"></a>\n**Figure 9-9**A string containing normal tabs and line breaks\n![image: ../Art/scripteditor_nonescapedtabsandlinebreaks_example_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_nonescapedtabsandlinebreaks_example_2x.png)\n\nWhen this option is enabled, tabs and line breaks are replaced with escaped character equivalents—`/t` for a tab, and `/r` for a line break. See Figure 9-10.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW5\"></a>\n**Figure 9-10**A string containing escaped tabs and line breaks\n![image: ../Art/scripteditor_escapedtabsandlinebreaks_example_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_escapedtabsandlinebreaks_example_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW11\"></a>\n\n### Formatting Preferences\n\nIn the Formatting pane of Script Editor window (Figure 9-11), you can configure the style—font, point size, and color—of various script attributes, including new text, language keywords, comments, and variables. Formatting options are language-specific. Select a language from the Language popup menu to view that language’s formatting settings.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW7\"></a>\n**Figure 9-11**Formatting pane of Script Editor preferences\n![image: ../Art/script-editor_preferences_window_formatting_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_formatting_pane_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW13\"></a>\n\n### History Preferences\n\nIn the History pane of Script Editor preferences (Figure 9-12), you can enable or disable the log history, adjust the quantity of log history entries, and enable logging only when the log is visible.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW8\"></a>\n**Figure 9-12**History pane of Script Editor preferences\n![image: ../Art/script-editor_preferences_window_history_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_history_pane_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW14\"></a>\n\n### Plug-ins Preferences\n\nThe Plug-ins pane of Script Editor preferences (Figure 9-13) lists any installed Script Editor plug-ins.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH70-SW9\"></a>\n**Figure 9-13**Plug-ins pane of Script Editor preferences\n![image: ../Art/script-editor_preferences_window_plugins_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_plugins_pane_2x.png)\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ConfigureScriptingPreferences.html", "sha256": "25f50fe997370e6073ffffa160d1380e71dbc02b483854fd1a1e2e68fb658d06", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ConvertRGBtoHTMLColor.md", "title": "Converting RGB to HTML Color", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH49\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH49-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH63\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH63-SW1\"></a>\n\n## Converting RGB to HTML Color\n\nIn HTML documents, colors are typically represented as hex values. The handlers in Listing 31-1 and Listing 31-2 show how to convert 8-bit or 256 color-based RGB values to hex values. Provide an RGB color represented by a list of three numbers, each with a value between `0` and `65535`.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertRGBColorToHexValue%28theRGBValues%29%0A%20%20%20%20set%20theHexList%20to%20%7B%220%22%2C%20%221%22%2C%20%222%22%2C%20%223%22%2C%20%224%22%2C%20%225%22%2C%20%226%22%2C%20%227%22%2C%20%228%22%2C%20%229%22%2C%20%22A%22%2C%20%22B%22%2C%20%22C%22%2C%20%22D%22%2C%20%22E%22%2C%20%22F%22%7D%0A%20%20%20%20set%20theHexValue%20to%20%22%22%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theRGBValues%0A%20%20%20%20%20%20%20%20set%20theCurrentRGBValue%20to%20%28item%20a%20of%20theRGBValues%29%20div%20256%0A%20%20%20%20%20%20%20%20if%20theCurrentRGBValue%20is%20256%20then%20set%20theCurrentRGBValue%20to%20255%0A%20%20%20%20%20%20%20%20set%20theFirstItem%20to%20item%20%28%28theCurrentRGBValue%20div%2016%29%20%2B%201%29%20of%20theHexList%0A%20%20%20%20%20%20%20%20set%20theSecondItem%20to%20item%20%28%28%28theCurrentRGBValue%20%2F%2016%20mod%201%29%20*%2016%29%20%2B%201%29%20of%20theHexList%0A%20%20%20%20%20%20%20%20set%20theHexValue%20to%20%28theHexValue%20%26%20theFirstItem%20%26%20theSecondItem%29%20as%20string%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20%28%22%23%22%20%26%20theHexValue%29%20as%20string%0Aend%20convertRGBColorToHexValue)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH49-SW2\"></a>\n**Listing 31-1**AppleScript: Handler that converts an RGB color to a hex value\n\n1. `on convertRGBColorToHexValue(theRGBValues)`\n2. ` set theHexList to {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}`\n3. ` set theHexValue to \"\"`\n4. ` repeat with a from 1 to count of theRGBValues`\n5. ` set theCurrentRGBValue to (item a of theRGBValues) div 256`\n6. ` if theCurrentRGBValue is 256 then set theCurrentRGBValue to 255`\n7. ` set theFirstItem to item ((theCurrentRGBValue div 16) + 1) of theHexList`\n8. ` set theSecondItem to item (((theCurrentRGBValue / 16 mod 1) * 16) + 1) of theHexList`\n9. ` set theHexValue to (theHexValue & theFirstItem & theSecondItem) as string`\n10. ` end repeat`\n11. ` return (\"#\" & theHexValue) as string`\n12. `end convertRGBColorToHexValue`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertRGBColorToHexValue%28rgbValues%29%20%7B%0A%20%20%20%20var%20r%20%3D%20parseInt%28rgbValues%5B0%5D%2C%2010%29.toString%2816%29.slice%28-2%29%0A%20%20%20%20if%20%28r.length%20%3D%3D%201%29%0A%20%20%20%20%20%20%20%20r%20%3D%20%220%22%20%2B%20r%0A%20%20%20%20var%20g%20%3D%20parseInt%28rgbValues%5B1%5D%2C%2010%29.toString%2816%29.slice%28-2%29%0A%20%20%20%20if%20%28g.length%20%3D%3D%201%29%0A%20%20%20%20%20%20%20%20g%20%3D%20%220%22%20%2B%20g%0A%20%20%20%20var%20b%20%3D%20parseInt%28rgbValues%5B2%5D%2C%2010%29.toString%2816%29.slice%28-2%29%0A%20%20%20%20if%20%28b.length%20%3D%3D%201%29%0A%20%20%20%20%20%20%20%20b%20%3D%20%220%22%20%2B%20b%0A%20%20%20%20return%20%28%22%23%22%20%2B%20r%20%2B%20g%20%2B%20b%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH49-SW4\"></a>\n**Listing 31-2**JavaScript: Function that converts an RGB color to a hex value\n\n1. `function convertRGBColorToHexValue(rgbValues) {`\n2. ` var r = parseInt(rgbValues[0], 10).toString(16).slice(-2)`\n3. ` if (r.length == 1)`\n4. ` r = \"0\" + r`\n5. ` var g = parseInt(rgbValues[1], 10).toString(16).slice(-2)`\n6. ` if (g.length == 1)`\n7. ` g = \"0\" + g`\n8. ` var b = parseInt(rgbValues[2], 10).toString(16).slice(-2)`\n9. ` if (b.length == 1)`\n10. ` b = \"0\" + b`\n11. ` return (\"#\" + r + g + b)`\n12. `}`\n\nListing 31-3 shows how to call the handlers in Listing 31-1 to convert a specified RGB color to a hex value for use in HTML.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theRGBValues%20to%20%28choose%20color%20default%20color%20%7B65535%2C%200%2C%200%7D%29%0AconvertRGBColorToHexValue%28theRGBValues%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH49-SW3\"></a>\n**Listing 31-3**AppleScript: Calling a handler to convert an RGB color to a hex value\n\n1. `set theRGBValues to (choose color default color {65535, 0, 0})`\n2. `convertRGBColorToHexValue(theRGBValues)`\n3. `--&gt; Result: \"#FF0000\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20color%20%3D%20app.chooseColor%28%7BdefaultColor%3A%20%5B1%2C%200%2C%200%5D%7D%29%0Acolor%20%3D%20%5BMath.trunc%28color%5B0%5D%20*%2065535%29%2C%20Math.trunc%28color%5B1%5D%20*%2065535%29%2C%20Math.trunc%28color%5B2%5D%20*%2065535%29%5D%0AconvertRGBColorToHexValue%28color%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH49-SW5\"></a>\n**Listing 31-4**JavaScript: Calling a function to convert an RGB color to a hex value\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var color = app.chooseColor({defaultColor: [1, 0, 0]})`\n5. `color = [Math.trunc(color[0] * 65535), Math.trunc(color[1] * 65535), Math.trunc(color[2] * 65535)]`\n6. `convertRGBColorToHexValue(color)`\n7. `// Result: \"#FF0000\"`\n\n> **Note**\n>\n>\n> In AppleScript, the `choose color` command produces RGB values ranging from `0` through `65535`. In JavaScript, the RGB values range between `0` and `1`. These values must be converted to match the AppleScript values to be used. Listing 31-4 demonstrates this conversion.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ConvertRGBtoHTMLColor.html", "sha256": "ad657fefa1f759ba8d6bebd8099fac9a96b6a0412c7a438592a2fa3e44346e1b", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "CreateaScript.md", "title": "Creating a Script", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH12\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW1\"></a>\n\n## Creating a Script\n\nGenerally, most scripts are written in Script Editor documents. Scripts can also be written in Xcode, but this is typically for scripts that require advanced user interfaces.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW4\"></a>\n\n**To write a script in Script Editor**\n\n1. Launch Script Editor in `/Applications/Utilities/`.\n2. Press Command-N or select File &gt; New.\n3. If the script isn’t configured for the correct language, choose the language in the navigation bar.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW3\"></a>\n\n   ![image: ../Art/script-editor_langage_selector_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_langage_selector_2x.png)\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-DontLinkElementID_1\"></a>\n\n\n   Tip\n\n   If you always use the same language, set it as the default language in the General pane of Script Editor preferences. See [General Preferences](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ConfigureScriptingPreferences.md#//apple_ref/doc/uid/TP40016239-CH70-SW10).\n4. Write your script code in the editing area. Newly written code is uncompiled and formatted as new text.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW5\"></a>\n\n   ![image: ../Art/scripteditor_uncompiledscript_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_uncompiledscript_2x.png)\n5. Click the Compile button (![image: ../Art/icon_compilescript_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_compilescript_2x.png)) to compile the script and check for syntax errors.\n\n   If a syntax error occurs, an alert is displayed.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW7\"></a>\n\n   ![image: ../Art/scripteditor_syntaxerror_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_syntaxerror_2x.png)\n\n   If the script compiles, code formatting is applied at this time.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW6\"></a>\n\n   ![image: ../Art/scripteditor_compiledscript_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_compiledscript_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH12-DontLinkElementID_2\"></a>\n\n\nTip\n\nYou can change the formatting attributes, such as font and color, of uncompiled and compiled text in the Formatting pane of Script Editor preferences. See [Formatting Preferences](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ConfigureScriptingPreferences.md#//apple_ref/doc/uid/TP40016239-CH70-SW11).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW2\"></a>\n\n### Using an AppleScript Template\n\nScript Editor includes a number of built-in templates for creating common types of AppleScripts, including droplets, Mail rule scripts, and Messages handler scripts.\n\n> **Note**\n>\n>\n> Script Editor does not include JavaScript templates at this time.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW10\"></a>\n\n**To create a template-based script**\n\n1. Launch Script Editor in `/Applications/Utilities/`.\n2. Choose File &gt; New from Template.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW8\"></a>\n\n   ![image: ../Art/scripteditor_newtemplate_menu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_newtemplate_menu_2x.png)\n3. Select a script template.\n\n   A new Script Editor document window opens containing prewritten code and preconfigured settings. The following screenshot shows an example of a script created using a template.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH12-SW9\"></a>\n\n   ![image: ../Art/scripteditor_asoc_template_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_asoc_template_2x.png)\n4. Customize the script.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/CreateaScript.html", "sha256": "dd33216f2c15a9ea13a2ab38f47650b0d8fa27807a68ac635719f5bb5e22c5de", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "DisplayDialogsandAlerts.md", "title": "Displaying Dialogs and Alerts", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH15\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH60\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH60-SW1\"></a>\n\n## Displaying Dialogs and Alerts\n\nDialogs and alerts are great ways to provide information about a script’s progress, report problems, and allow users to make decisions that affect script behavior.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW2\"></a>\n\n### Displaying a Dialog\n\nUse the `display dialog` command, provided by the Standard Additions scripting addition to show a basic dialog message to the user, such as the one in Figure 22-1. This dialog was produced by the code in Listing 22-1 and Listing 22-2. In these examples, a string is passed to the `display dialog` command as a direct parameter. The result of the command is the button the user clicked in the dialog.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW11\"></a>\n**Figure 22-1**A simple dialog\n![image: ../Art/dialog_simple_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dialog_simple_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theDialogText%20to%20%22The%20curent%20date%20and%20time%20is%20%22%20%26%20%28current%20date%29%20%26%20%22.%22%0Adisplay%20dialog%20theDialogText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW12\"></a>\n**Listing 22-1**AppleScript: Displaying a simple dialog\n\n1. `set theDialogText to \"The curent date and time is \" & (current date) & \".\"`\n2. `display dialog theDialogText`\n3. `--&gt; Result: {button returned:\"OK\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20dialogText%20%3D%20%22The%20current%20date%20and%20time%20is%20%22%20%2B%20%28app.currentDate%28%29%29%0Aapp.displayDialog%28dialogText%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW13\"></a>\n**Listing 22-2**JavaScript: Displaying a simple dialog\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var dialogText = \"The current date and time is \" + (app.currentDate())`\n5. `app.displayDialog(dialogText)`\n6. `// Result: {\"buttonReturned\":\"OK\"}`\n\n> **Note**\n>\n>\n> This chapter covers a portion of the `display dialog` command’s capabilities. For example, the `display dialog` command can also be used to collect text entered by the user. This is covered in [Prompting for Text](https://developer.apple.com/library/archive/mac-automation-scripting-guide/PromptforText.md#//apple_ref/doc/uid/TP40016239-CH80-SW1). For complete information about the `display dialog` command and its parameters, launch Script Editor, open the Standard Additions scripting addition’s dictionary, and navigate to the command’s definition.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW5\"></a>\n\n### Customizing Dialog Buttons\n\nBy default, a dialog produced by the `display dialog` command has two buttons—Cancel and OK (the default). However, the command also has numerous optional parameters, some of which can be used to customize the buttons.\n\nUse the `buttons` parameter to provide a list of between one and three buttons. You can optionally use the `default button` parameter to configure one as the default—it’s highlighted and pressing the Return key activates it to close the dialog. You can also use the `cancel button` parameter to configure one as the cancel button—pressing Escape or Command-Period (.) activates it to close the dialog and produce a user cancelled error.\n\nThe dialog shown in Figure 22-2 has been customized to include Don’t Continue (the cancel button) and Continue (the default) buttons. This dialog was produced by the example code in Listing 22-3 and Listing 22-4.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW14\"></a>\n**Figure 22-2**A dialog with custom buttons\n![image: ../Art/dialog_customButtons_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dialog_customButtons_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theDialogText%20to%20%22An%20error%20has%20occurred.%20Would%20you%20like%20to%20continue%3F%22%0Adisplay%20dialog%20theDialogText%20buttons%20%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%20default%20button%20%22Continue%22%20cancel%20button%20%22Don%27t%20Continue%22%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW15\"></a>\n**Listing 22-3**AppleScript: Displaying a dialog with custom buttons\n\n1. `set theDialogText to \"An error has occurred. Would you like to continue?\"`\n2. `display dialog theDialogText buttons {\"Don't Continue\", \"Continue\"} default button \"Continue\" cancel button \"Don't Continue\"`\n3. `--&gt; Result: {{button returned:\"Continue\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0A%0Avar%20dialogText%20%3D%20%22An%20error%20has%20occurred.%20Would%20you%20like%20to%20continue%3F%22%0Aapp.displayDialog%28dialogText%2C%20%7B%0A%20%20%20%20buttons%3A%20%5B%22Don%27t%20Continue%22%2C%20%22Continue%22%5D%2C%0A%20%20%20%20defaultButton%3A%20%22Continue%22%2C%0A%20%20%20%20cancelButton%3A%20%22Don%27t%20Continue%22%0A%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW16\"></a>\n**Listing 22-4**JavaScript: Displaying a dialog with custom buttons\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n\n5. `var dialogText = \"An error has occurred. Would you like to continue?\"`\n6. `app.displayDialog(dialogText, {`\n7. ` buttons: [\"Don't Continue\", \"Continue\"],`\n8. ` defaultButton: \"Continue\",`\n9. ` cancelButton: \"Don't Continue\"`\n10. `})`\n11. `// Result: {\"buttonReturned\":\"Continue\"}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW6\"></a>\n\n### Adding an Icon to a Dialog\n\nDialogs can also include an icon, providing users with a visual clue to their importance. You can direct the `display dialog` command to a specific icon by its file path, or resource name or ID if the icon is stored as a resource within your script’s bundle. You can also use the standard system icons `stop`, `note`, and `caution`. Listing 22-5 and Listing 22-6 display a dialog that includes the system caution icon like the one shown in Figure 22-3.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW19\"></a>\n**Figure 22-3**A dialog with an icon\n![image: ../Art/dialog_customIcon_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dialog_customIcon_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theDialogText%20to%20%22The%20amount%20of%20available%20free%20space%20is%20dangerously%20low.%22%0Adisplay%20dialog%20theDialogText%20with%20icon%20caution)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW17\"></a>\n**Listing 22-5**AppleScript: Displaying a dialog with an icon\n\n1. `set theDialogText to \"The amount of available free space is dangerously low.\"`\n2. `display dialog theDialogText with icon caution`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20dialogText%20%3D%20%22The%20amount%20of%20available%20free%20space%20is%20dangerously%20low.%22%0Aapp.displayDialog%28dialogText%2C%20%7BwithIcon%3A%20%22caution%22%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW18\"></a>\n**Listing 22-6**JavaScript: Displaying a dialog with an icon\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var dialogText = \"The amount of available free space is dangerously low.\"`\n5. `app.displayDialog(dialogText, {withIcon: \"caution\"})`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW7\"></a>\n\n### Automatically Dismissing a Dialog\n\nSometimes, you may want to continue with script execution if a dialog isn’t dismissed by a user within a certain timeframe. In this case, you can specify an integer value for the `display dialog` command’s `giving up after` parameter, causing the dialog to *give up* and close automatically after a specified period of inactivity.\n\nListing 22-7 and Listing 22-8 display a dialog that automatically closes after five seconds of inactivity.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20dialog%20%22Do%2C%20or%20do%20not.%20There%20is%20no%20try.%22%20giving%20up%20after%205)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW20\"></a>\n**Listing 22-7**AppleScript: Displaying a dialog that automatically dismisses after a period of inactivity\n\n1. `display dialog \"Do, or do not. There is no try.\" giving up after 5`\n2. `--&gt; Result: {button returned:\"OK\", gave up:true}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20dialogText%20%3D%20%22Do%2C%20or%20do%20not.%20There%20is%20no%20try.%22%0Aapp.displayDialog%28dialogText%2C%20%7BgivingUpAfter%3A%205%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW21\"></a>\n**Listing 22-8**JavaScript: JavaScript a dialog that automatically dismisses after a period of inactivity\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var dialogText = \"Do, or do not. There is no try.\"`\n5. `app.displayDialog(dialogText, {givingUpAfter: 5})`\n6. `// Result: {\"buttonReturned\":\"OK\", \"gaveUp\":true}`\n\nWhen using the `giving up after` parameter, the result of the `display dialog` command includes a `gaveUp` property, a Boolean value indicating whether the dialog was auto-dismissed. This information is useful if you want the script to take a different course of action based on whether a dialog is manually or automatically dismissed.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW3\"></a>\n\n### Displaying an Alert\n\nThe `display alert` command is also provided by the Standard Additions scripting addition. It’s similar to the `display dialog` command, but with slightly different parameters. One of the `display alert` command’s optional parameters is `message`, which lets you provide additional text to display in a separate text field, below the bolded alert text. Listing 22-9 and Listing 22-10 show how to display the alert in Figure 22-4, which contains bolded alert text, plain message text, and custom buttons.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW22\"></a>\n**Figure 22-4**An alert\n![image: ../Art/alert_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/alert_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theAlertText%20to%20%22An%20error%20has%20occurred.%22%0Aset%20theAlertMessage%20to%20%22The%20amount%20of%20available%20free%20space%20is%20dangerously%20low.%20Would%20you%20like%20to%20continue%3F%22%0Adisplay%20alert%20theAlertText%20message%20theAlertMessage%20as%20critical%20buttons%20%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%20default%20button%20%22Continue%22%20cancel%20button%20%22Don%27t%20Continue%22%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW9\"></a>\n**Listing 22-9**AppleScript: Displaying an alert with a message\n\n1. `set theAlertText to \"An error has occurred.\"`\n2. `set theAlertMessage to \"The amount of available free space is dangerously low. Would you like to continue?\"`\n3. `display alert theAlertText message theAlertMessage as critical buttons {\"Don't Continue\", \"Continue\"} default button \"Continue\" cancel button \"Don't Continue\"`\n4. `--&gt; Result: {button returned:\"Continue\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20alertText%20%3D%20%22An%20error%20has%20occurred.%22%0Avar%20alertMessage%20%3D%20%22The%20amount%20of%20available%20free%20space%20is%20dangerously%20low.%20Would%20you%20like%20to%20continue%3F%22%0Aapp.displayAlert%28alertText%2C%20%7B%0A%20%20%20%20message%3A%20alertMessage%2C%0A%20%20%20%20as%3A%20%22critical%22%2C%0A%20%20%20%20buttons%3A%20%5B%22Don%27t%20Continue%22%2C%20%22Continue%22%5D%2C%0A%20%20%20%20defaultButton%3A%20%22Continue%22%2C%0A%20%20%20%20cancelButton%3A%20%22Don%27t%20Continue%22%0A%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH15-SW10\"></a>\n**Listing 22-10**JavaScript: Displaying an alert with a message\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var alertText = \"An error has occurred.\"`\n5. `var alertMessage = \"The amount of available free space is dangerously low. Would you like to continue?\"`\n6. `app.displayAlert(alertText, {`\n7. ` message: alertMessage,`\n8. ` as: \"critical\",`\n9. ` buttons: [\"Don't Continue\", \"Continue\"],`\n10. ` defaultButton: \"Continue\",`\n11. ` cancelButton: \"Don't Continue\"`\n12. `})`\n13. `// Result: {\"buttonReturned\":\"OK\"}`\n\n> **Note**\n>\n>\n> This chapter covers a portion of the `display alert` command’s capabilities. For complete information about the `display alert` command and its parameters, launch Script Editor, open the Standard Additions scripting addition’s dictionary, and navigate to the command’s definition.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/DisplayDialogsandAlerts.html", "sha256": "d65f05019a0919ddd5ed936bbc2ec69a83b7c59e94ed58a20263ceeef90dc4f1", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "DisplayNotifications.md", "title": "Displaying Notifications", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH61\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH61-SW1\"></a>\n\n## Displaying Notifications\n\nNotification Center offers another opportunity for providing feedback during script execution. Use the Standard Additions scripting addition’s `display notification` command to show notifications, such as status updates as files are processed. Notifications are shown as alerts or banners, depending on the user’s settings in System Preferences &gt; Notifications. See Figure 24-1 and Figure 24-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH61-SW5\"></a>\n**Figure 24-1**A banner notification\n![image: ../Art/notification-banner_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/notification-banner_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH61-SW2\"></a>\n**Figure 24-2**An alert notification\n![image: ../Art/notification-alert_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/notification-alert_2x.png)\n\nTo show a notification, provide the `display notification` command with a string to display. Optionally, provide values for the `with title`, `subtitle`, and `sound name` parameters to provide additional information and an audible alert when the notification appears, as shown in Listing 24-1 and Listing 24-2.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20notification%20%22All%20graphics%20have%20been%20converted.%22%20with%20title%20%22My%20Graphic%20Processing%20Script%22%20subtitle%20%22Processing%20is%20complete.%22%20sound%20name%20%22Frog%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH61-SW3\"></a>\n**Listing 24-1**AppleScript: Displaying a notification\n\n1. `display notification \"All graphics have been converted.\" with title \"My Graphic Processing Script\" subtitle \"Processing is complete.\" sound name \"Frog\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0A%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Aapp.displayNotification%28%22All%20graphics%20have%20been%20converted.%22%2C%20%7B%0A%20%20%20%20withTitle%3A%20%22My%20Graphic%20Processing%20Script%22%2C%0A%20%20%20%20subtitle%3A%20%22Processing%20is%20complete.%22%2C%0A%20%20%20%20soundName%3A%20%22Frog%22%0A%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH61-SW4\"></a>\n**Listing 24-2**JavaScript: Displaying a notification\n\n1. `var app = Application.currentApplication()`\n3. `app.includeStandardAdditions = true`\n5. `app.displayNotification(\"All graphics have been converted.\", {`\n6. ` withTitle: \"My Graphic Processing Script\",`\n7. ` subtitle: \"Processing is complete.\",`\n8. ` soundName: \"Frog\"`\n9. `})`\n\n> **Note**\n>\n>\n> After using a script to display a notification, the script or Script Editor (if the script is run from within Script Editor) is added to the list of notifying apps in System Preferences &gt; Notifications. There, you can configure options, such as whether to display notifications as alerts or banners.\n>\n> Clicking the Show button in an alert-style notification opens the app that displayed the notification. For a script app, the action of opening the app again triggers the `run` handler of the script, potentially causing the script to begin processing a second time. Keep this in mind, and add code to your script to handle this scenario, if appropriate.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/DisplayNotifications.html", "sha256": "7d2cfbf5cdf442968462e352f36fed426b6fa30c537c7ed836f4022f04e9d32c", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "DisplayProgress.md", "title": "Displaying Progress", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH37\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW1\"></a>\n\n## Displaying Progress\n\nMany scripts perform large and time-consuming processing operations. All too often, they do this invisibly; they simply run and the user has no idea how long processing will take. A more user-friendly approach is to provide progress information during script operation. At a basic level, this can be done by displaying periodic dialogs or notifications. See [Displaying Dialogs and Alerts](https://developer.apple.com/library/archive/mac-automation-scripting-guide/DisplayDialogsandAlerts.md#//apple_ref/doc/uid/TP40016239-CH15-SW1) and [Displaying Notifications](https://developer.apple.com/library/archive/mac-automation-scripting-guide/DisplayNotifications.md#//apple_ref/doc/uid/TP40016239-CH61-SW1). At a complex level, this can be done by designing a fully-custom interface that provides processing feedback.\n\nAppleScript and JavaScript can also report progress graphically and textually. For script apps, this progress reporting takes the form of a dialog window containing a progress bar, descriptive text, and a Stop button. See Figure 30-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW2\"></a>\n**Figure 30-1**A script progress dialog\n![image: ../Art/progress_dialog_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/progress_dialog_2x.png)\n\nFor scripts running in Script Editor, this progress reporting appears at the bottom of the script window. See Figure 30-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW3\"></a>\n**Figure 30-2**Progress displayed in Script Editor\n![image: ../Art/scripteditor_progress_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_progress_2x.png)\n\nFor scripts running from the systemwide script menu, this progress reporting appears in the menu bar, beneath a temporarily displayed gear icon. See Figure 30-3.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW4\"></a>\n**Figure 30-3**Progress of a script menu script\n![image: ../Art/scriptmenu_progress_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scriptmenu_progress_2x.png)\n\nAppleScript has several language-level properties and JavaScript has a `Progress` object with properties that are used to produce this type of progress reporting. See Table 30-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW5\"></a>\n\n**Table 30-1**Progress properties in AppleScript and JavaScript\n\n| AppleScript Property | JavaScript Property | Value Type | Description |\n| --- | --- | --- | --- |\n| `progress total steps` | `Progress.totalUnitCount` | Integer | Configures the total number of steps to be reported in the progress. For example, if the script will process 5 images, then the value for `progress total steps` would be `5`. |\n| `progress completed steps` | `Progress.completedUnitCount` | Integer | Configures the number of steps completed so far. For example, if the script has processed 3 of 5 images, then the value of `progress completed steps` would be `3`. |\n| `progress description` | `Progress.description` | Integer | Text to display when reporting progress. Use this is an opportunity to let the user know what’s happening. For example, it could indicate that images are being processed. |\n| `progress additional description` | `Progress.additionalDescription` | Integer | Additional text to display when reporting progress. Use this is an opportunity to provide even more detailed information about what’s happening. For example, it could indicate the specific task being performed, and how much more processing is remaining. |\n\nListing 30-1 and Listing 30-2 demonstrate how these properties can be used to provide progress information while processing a set of images.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theImages%20to%20choose%20file%20with%20prompt%20%22Please%20select%20some%20images%20to%20process%3A%22%20of%20type%20%7B%22public.image%22%7D%20with%20multiple%20selections%20allowed%0A%0A--%20Update%20the%20initial%20progress%20information%0Aset%20theImageCount%20to%20length%20of%20theImages%0Aset%20progress%20total%20steps%20to%20theImageCount%0Aset%20progress%20completed%20steps%20to%200%0Aset%20progress%20description%20to%20%22Processing%20Images...%22%0Aset%20progress%20additional%20description%20to%20%22Preparing%20to%20process.%22%0A%0Arepeat%20with%20a%20from%201%20to%20length%20of%20theImages%0A%0A%20%20%20%20--%20Update%20the%20progress%20detail%0A%20%20%20%20set%20progress%20additional%20description%20to%20%22Processing%20image%20%22%20%26%20a%20%26%20%22%20of%20%22%20%26%20theImageCount%0A%0A%20%20%20%20--%20Process%20the%20image%0A%0A%20%20%20%20--%20Increment%20the%20progress%0A%20%20%20%20set%20progress%20completed%20steps%20to%20a%0A%0A%20%20%20%20--%20Pause%20for%20demonstration%20purposes%2C%20so%20progress%20can%20be%20seen%0A%20%20%20%20delay%201%0Aend%20repeat%0A%0A--%20Reset%20the%20progress%20information%0Aset%20progress%20total%20steps%20to%200%0Aset%20progress%20completed%20steps%20to%200%0Aset%20progress%20description%20to%20%22%22%0Aset%20progress%20additional%20description%20to%20%22%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW6\"></a>\n**Listing 30-1**AppleScript: Display progress while processing images\n\n1. `set theImages to choose file with prompt \"Please select some images to process:\" of type {\"public.image\"} with multiple selections allowed`\n3. `-- Update the initial progress information`\n4. `set theImageCount to length of theImages`\n5. `set progress total steps to theImageCount`\n6. `set progress completed steps to 0`\n7. `set progress description to \"Processing Images...\"`\n8. `set progress additional description to \"Preparing to process.\"`\n10. `repeat with a from 1 to length of theImages`\n12. ` -- Update the progress detail`\n13. ` set progress additional description to \"Processing image \" & a & \" of \" & theImageCount`\n15. ` -- Process the image`\n17. ` -- Increment the progress`\n18. ` set progress completed steps to a`\n20. ` -- Pause for demonstration purposes, so progress can be seen`\n21. ` delay 1`\n22. `end repeat`\n24. `-- Reset the progress information`\n25. `set progress total steps to 0`\n26. `set progress completed steps to 0`\n27. `set progress description to \"\"`\n28. `set progress additional description to \"\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20images%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20some%20images%20to%20process%3A%22%2C%0A%20%20%20%20ofType%3A%20%5B%22public.image%22%5D%2C%0A%20%20%20%20multipleSelectionsAllowed%3A%20true%0A%7D%29%0A%0A%2F%2F%20Update%20the%20initial%20progress%20information%0Avar%20imageCount%20%3D%20images.length%0AProgress.totalUnitCount%20%3D%20imageCount%0AProgress.completedUnitCount%20%3D%200%0AProgress.description%20%3D%20%22Processing%20Images...%22%0AProgress.additionalDescription%20%3D%20%22Preparing%20to%20process.%22%0A%0Afor%20%28i%20%3D%200%3B%20i%20%3C%20imageCount%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%2F%2F%20Update%20the%20progress%20detail%0A%20%20%20%20Progress.additionalDescription%20%3D%20%22Processing%20image%20%22%20%2B%20i%20%2B%20%22%20of%20%22%20%2B%20imageCount%0A%0A%20%20%20%20%2F%2F%20Process%20the%20image%0A%0A%20%20%20%20%2F%2F%20Increment%20the%20progress%0A%20%20%20%20Progress.completedUnitCount%20%3D%20i%0A%0A%20%20%20%20%2F%2F%20Pause%20for%20demonstration%20purposes%2C%20so%20progress%20can%20be%20seen%0A%20%20%20%20delay%281%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH37-SW7\"></a>\n**Listing 30-2**JavaScript: Display progress while processing images\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var images = app.chooseFile({`\n5. ` withPrompt: \"Please select some images to process:\",`\n6. ` ofType: [\"public.image\"],`\n7. ` multipleSelectionsAllowed: true`\n8. `})`\n10. `// Update the initial progress information`\n11. `var imageCount = images.length`\n12. `Progress.totalUnitCount = imageCount`\n13. `Progress.completedUnitCount = 0`\n14. `Progress.description = \"Processing Images...\"`\n15. `Progress.additionalDescription = \"Preparing to process.\"`\n17. `for (i = 0; i &lt; imageCount; i++) {`\n18. ` // Update the progress detail`\n19. ` Progress.additionalDescription = \"Processing image \" + i + \" of \" + imageCount`\n21. ` // Process the image`\n23. ` // Increment the progress`\n24. ` Progress.completedUnitCount = i`\n26. ` // Pause for demonstration purposes, so progress can be seen`\n27. ` delay(1)`\n28. `}`\n\nClicking the Stop button in a progress dialog results in a user cancelled error.\n\nFor additional information, see [Progress Reporting](https://developer.apple.com/library/archive/../../../releasenotes/AppleScript/RN-AppleScript/RN-10_10/RN-10_10.html#//apple_ref/doc/uid/TP40000982-CH110-SW8) in *[AppleScript Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/AppleScript/RN-AppleScript/Introduction/Introduction.html#//apple_ref/doc/uid/TP40000982)* and [Progress](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW35) in *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)*.\n\n> **Note**\n>\n>\n> There’s no need to call a dedicated command to actually display progress information. The act of setting values for the progress properties mentioned above automatically results in progress information being displayed in a dialog, Script Editor, or the menu bar.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/DisplayProgress.html", "sha256": "3f656fd4e0fa48637b392da2992392581f577a58653520c6f928a8df5caf90cb", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "EncodeandDecodeText.md", "title": "Encoding and Decoding Text", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH51\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW1\"></a>\n\n## Encoding and Decoding Text\n\nA standard practice when creating URL's is to encode spaces and special characters (high-level ASCII) to hexadecimal equivalents. For example, spaces in URL's are routinely converted to `%20`. The process of encoding and decoding URLs and other text in this manner can be accomplished through scripting.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW2\"></a>\n\n### Encoding Characters\n\nThe handler in Listing 32-1 encodes a single character.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20encodeCharacter%28theCharacter%29%0A%20%20%20%20set%20theASCIINumber%20to%20%28the%20ASCII%20number%20theCharacter%29%0A%20%20%20%20set%20theHexList%20to%20%7B%220%22%2C%20%221%22%2C%20%222%22%2C%20%223%22%2C%20%224%22%2C%20%225%22%2C%20%226%22%2C%20%227%22%2C%20%228%22%2C%20%229%22%2C%20%22A%22%2C%20%22B%22%2C%20%22C%22%2C%20%22D%22%2C%20%22E%22%2C%20%22F%22%7D%0A%20%20%20%20set%20theFirstItem%20to%20item%20%28%28theASCIINumber%20div%2016%29%20%2B%201%29%20of%20theHexList%0A%20%20%20%20set%20theSecondItem%20to%20item%20%28%28theASCIINumber%20mod%2016%29%20%2B%201%29%20of%20theHexList%0A%20%20%20%20return%20%28%22%25%22%20%26%20theFirstItem%20%26%20theSecondItem%29%20as%20string%0Aend%20encodeCharacter)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW5\"></a>\n**Listing 32-1**AppleScript: Handler that URL encodes a character\n\n1. `on encodeCharacter(theCharacter)`\n2. ` set theASCIINumber to (the ASCII number theCharacter)`\n3. ` set theHexList to {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}`\n4. ` set theFirstItem to item ((theASCIINumber div 16) + 1) of theHexList`\n5. ` set theSecondItem to item ((theASCIINumber mod 16) + 1) of theHexList`\n6. ` return (\"%\" & theFirstItem & theSecondItem) as string`\n7. `end encodeCharacter`\n\nListing 32-2 shows how to call the handler in Listing 32-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=encodeCharacter%28%22%24%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW20\"></a>\n**Listing 32-2**AppleScript: Calling a handler to URL encode a character\n\n1. `encodeCharacter(\"$\")`\n2. `--&gt; Result: \"%24\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW3\"></a>\n\n### Encoding Text\n\nThe handler in Listing 32-3 encodes an entire string. Provide a string and indicate whether to encode two levels of special characters. The first level includes commonly encoded special characters, such as `$`, `%`, and `*`. The second level includes extended special characters that aren’t typically encoded—`.`, `-`, `_`, and `:`. High-level ASCII characters, such as copyright symbols, trademark symbols, and spaces, are always encoded.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20encodeText%28theText%2C%20encodeCommonSpecialCharacters%2C%20encodeExtendedSpecialCharacters%29%0A%20%20%20%20set%20theStandardCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz0123456789%22%0A%20%20%20%20set%20theCommonSpecialCharacterList%20to%20%22%24%2B!%27%2F%3F%3B%26%40%3D%23%25%3E%3C%7B%7D%5C%22~%60%5E%5C%5C%7C*%22%0A%20%20%20%20set%20theExtendedSpecialCharacterList%20to%20%22.-_%3A%22%0A%20%20%20%20set%20theAcceptableCharacters%20to%20theStandardCharacters%0A%20%20%20%20if%20encodeCommonSpecialCharacters%20is%20false%20then%20set%20theAcceptableCharacters%20to%20theAcceptableCharacters%20%26%20theCommonSpecialCharacterList%0A%20%20%20%20if%20encodeExtendedSpecialCharacters%20is%20false%20then%20set%20theAcceptableCharacters%20to%20theAcceptableCharacters%20%26%20theExtendedSpecialCharacterList%0A%20%20%20%20set%20theEncodedText%20to%20%22%22%0A%20%20%20%20repeat%20with%20theCurrentCharacter%20in%20theText%0A%20%20%20%20%20%20%20%20if%20theCurrentCharacter%20is%20in%20theAcceptableCharacters%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theEncodedText%20to%20%28theEncodedText%20%26%20theCurrentCharacter%29%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theEncodedText%20to%20%28theEncodedText%20%26%20encodeCharacter%28theCurrentCharacter%29%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theEncodedText%0Aend%20encodeText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW7\"></a>\n**Listing 32-3**AppleScript: Handler that URL encodes text\n\n1. `on encodeText(theText, encodeCommonSpecialCharacters, encodeExtendedSpecialCharacters)`\n2. ` set theStandardCharacters to \"abcdefghijklmnopqrstuvwxyz0123456789\"`\n3. ``  set theCommonSpecialCharacterList to \"$+!'/?;&@=#%&gt;&lt;{}\\\\\"~`^\\\\\\\\|*\" ``\n4. ` set theExtendedSpecialCharacterList to \".-_:\"`\n5. ` set theAcceptableCharacters to theStandardCharacters`\n6. ` if encodeCommonSpecialCharacters is false then set theAcceptableCharacters to theAcceptableCharacters & theCommonSpecialCharacterList`\n7. ` if encodeExtendedSpecialCharacters is false then set theAcceptableCharacters to theAcceptableCharacters & theExtendedSpecialCharacterList`\n8. ` set theEncodedText to \"\"`\n9. ` repeat with theCurrentCharacter in theText`\n10. ` if theCurrentCharacter is in theAcceptableCharacters then`\n11. ` set theEncodedText to (theEncodedText & theCurrentCharacter)`\n12. ` else`\n13. ` set theEncodedText to (theEncodedText & encodeCharacter(theCurrentCharacter)) as string`\n14. ` end if`\n15. ` end repeat`\n16. ` return theEncodedText`\n17. `end encodeText`\n\n> **Note**\n>\n>\n> This handler calls the `encodeCharacter()` handler. See [Listing 32-1](#//apple_ref/doc/uid/TP40016239-CH51-SW5).\n\nListing 32-4 shows how to call the handler in Listing 32-3 to encode only high-level ASCII characters.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=encodeText%28%22*smith-wilson%C2%A9%20report_23.txt%22%2C%20false%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW9\"></a>\n**Listing 32-4**AppleScript: Calling a handler to URL encode high-level ASCII characters in text\n\n1. `encodeText(\"*smith-wilson© report_23.txt\", false, false)`\n2. `--&gt; Result: \"*smith-wilson%A9%20report_23.txt\"`\n\nListing 32-5 shows how to call the handler in Listing 32-3 to encode high-level ASCII characters and all special characters.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=encodeText%28%22*smith-wilson%C2%A9%20report_23.txt%22%2C%20true%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW10\"></a>\n**Listing 32-5**AppleScript: Calling a handler to URL encode high- and low-level ASCII characters in text\n\n1. `encodeText(\"*smith-wilson© report_23.txt\", true, true)`\n2. `--&gt; Result: \"%2Asmith%2Dwilson%A9%20report%5F23%2Etxt\"`\n\nListing 32-6 shows how to call the handler in Listing 32-3 to encode high-level ASCII characters and special characters, excluding periods, hyphens, underscores, and colons.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=encodeText%28%22annual%20smith-wilson_report.txt%22%2C%20true%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW11\"></a>\n**Listing 32-6**AppleScript: Calling a handler to URL encode high- and low-level ASCII characters in text with certain exclusions\n\n1. `encodeText(\"annual smith-wilson_report.txt\", true, false)`\n2. `--&gt; Result: \"annual%20smith-wilson_report.txt\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC, you can use methods of the `NSString` class to encode text. The handler in Listing 32-7 demonstrates how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20encodeText%28theText%29%0A%20%20%20%20set%20theString%20to%20stringWithString_%28theText%29%20of%20NSString%20of%20current%20application%0A%20%20%20%20set%20theEncoding%20to%20NSUTF8StringEncoding%20of%20current%20application%0A%20%20%20%20set%20theAdjustedString%20to%20stringByAddingPercentEscapesUsingEncoding_%28theEncoding%29%20of%20theString%0A%20%20%20%20return%20%28theAdjustedString%20as%20string%29%0Aend%20encodeText)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW13\"></a>\n> **Listing 32-7**AppleScriptObjC: Handler that URL encodes text\n>\n> 1. `on encodeText(theText)`\n> 2. ` set theString to stringWithString_(theText) of NSString of current application`\n> 3. ` set theEncoding to NSUTF8StringEncoding of current application`\n> 4. ` set theAdjustedString to stringByAddingPercentEscapesUsingEncoding_(theEncoding) of theString`\n> 5. ` return (theAdjustedString as string)`\n> 6. `end encodeText`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW4\"></a>\n\n### Decoding Text\n\nThe handler in Listing 32-8 decodes an encoded character hex string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20decodeCharacterHexString%28theCharacters%29%0A%20%20%20%20copy%20theCharacters%20to%20%7BtheIdentifyingCharacter%2C%20theMultiplierCharacter%2C%20theRemainderCharacter%7D%0A%20%20%20%20set%20theHexList%20to%20%22123456789ABCDEF%22%0A%20%20%20%20if%20theMultiplierCharacter%20is%20in%20%22ABCDEF%22%20then%0A%20%20%20%20%20%20%20%20set%20theMultiplierAmount%20to%20offset%20of%20theMultiplierCharacter%20in%20theHexList%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20set%20theMultiplierAmount%20to%20theMultiplierCharacter%20as%20integer%0A%20%20%20%20end%20if%0A%20%20%20%20if%20theRemainderCharacter%20is%20in%20%22ABCDEF%22%20then%0A%20%20%20%20%20%20%20%20set%20theRemainderAmount%20to%20offset%20of%20theRemainderCharacter%20in%20theHexList%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20set%20theRemainderAmount%20to%20theRemainderCharacter%20as%20integer%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theASCIINumber%20to%20%28theMultiplierAmount%20*%2016%29%20%2B%20theRemainderAmount%0A%20%20%20%20return%20%28ASCII%20character%20theASCIINumber%29%0Aend%20decodeCharacterHexString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW6\"></a>\n**Listing 32-8**AppleScript: Handler that decodes an encoded character hex string\n\n1. `on decodeCharacterHexString(theCharacters)`\n2. ` copy theCharacters to {theIdentifyingCharacter, theMultiplierCharacter, theRemainderCharacter}`\n3. ` set theHexList to \"123456789ABCDEF\"`\n4. ` if theMultiplierCharacter is in \"ABCDEF\" then`\n5. ` set theMultiplierAmount to offset of theMultiplierCharacter in theHexList`\n6. ` else`\n7. ` set theMultiplierAmount to theMultiplierCharacter as integer`\n8. ` end if`\n9. ` if theRemainderCharacter is in \"ABCDEF\" then`\n10. ` set theRemainderAmount to offset of theRemainderCharacter in theHexList`\n11. ` else`\n12. ` set theRemainderAmount to theRemainderCharacter as integer`\n13. ` end if`\n14. ` set theASCIINumber to (theMultiplierAmount * 16) + theRemainderAmount`\n15. ` return (ASCII character theASCIINumber)`\n16. `end decodeCharacterHexString`\n\nListing 32-9 shows how to call the handler in Listing 32-8.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=decodeCharacterHexString%28%22%2524%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW14\"></a>\n**Listing 32-9**AppleScript: Calling a handler to decode an encoded character hex string\n\n1. `decodeCharacterHexString(\"%24\")`\n2. `--&gt; Result: \"$\"`\n\nThe handler in Listing 32-10 decodes any encoded character hex strings in the specified text.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20decodeText%28theText%29%0A%20%20%20%20set%20flagA%20to%20false%0A%20%20%20%20set%20flagB%20to%20false%0A%20%20%20%20set%20theTempCharacter%20to%20%22%22%0A%20%20%20%20set%20theCharacterList%20to%20%7B%7D%0A%20%20%20%20repeat%20with%20theCurrentCharacter%20in%20theText%0A%20%20%20%20%20%20%20%20set%20theCurrentCharacter%20to%20contents%20of%20theCurrentCharacter%0A%20%20%20%20%20%20%20%20if%20theCurrentCharacter%20is%20%22%25%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20flagA%20to%20true%0A%20%20%20%20%20%20%20%20else%20if%20flagA%20is%20true%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theTempCharacter%20to%20theCurrentCharacter%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20flagA%20to%20false%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20flagB%20to%20true%0A%20%20%20%20%20%20%20%20else%20if%20flagB%20is%20true%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20end%20of%20theCharacterList%20to%20decodeCharacterHexString%28%28%22%25%22%20%26%20theTempCharacter%20%26%20theCurrentCharacter%29%20as%20string%29%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theTempCharacter%20to%20%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20flagA%20to%20false%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20flagB%20to%20false%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20end%20of%20theCharacterList%20to%20theCurrentCharacter%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theCharacterList%20as%20string%0Aend%20decodeText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW15\"></a>\n**Listing 32-10**AppleScript: Handler that decodes any encoded character hex strings in specified text\n\n1. `on decodeText(theText)`\n2. ` set flagA to false`\n3. ` set flagB to false`\n4. ` set theTempCharacter to \"\"`\n5. ` set theCharacterList to {}`\n6. ` repeat with theCurrentCharacter in theText`\n7. ` set theCurrentCharacter to contents of theCurrentCharacter`\n8. ` if theCurrentCharacter is \"%\" then`\n9. ` set flagA to true`\n10. ` else if flagA is true then`\n11. ` set theTempCharacter to theCurrentCharacter`\n12. ` set flagA to false`\n13. ` set flagB to true`\n14. ` else if flagB is true then`\n15. ` set end of theCharacterList to decodeCharacterHexString((\"%\" & theTempCharacter & theCurrentCharacter) as string)`\n16. ` set theTempCharacter to \"\"`\n17. ` set flagA to false`\n18. ` set flagB to false`\n19. ` else`\n20. ` set end of theCharacterList to theCurrentCharacter`\n21. ` end if`\n22. ` end repeat`\n23. ` return theCharacterList as string`\n24. `end decodeText`\n\n> **Note**\n>\n>\n> This handler calls the `decodeCharacterHexString()` handler. See [Listing 32-8](#//apple_ref/doc/uid/TP40016239-CH51-SW6).\n\nListing 32-11 shows how to call the handler in Listing 32-10.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=decodeText%28%22%252Asmith%252Dwilson%25A9%2520report%255F23%252Etxt%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW17\"></a>\n**Listing 32-11**AppleScript: Calling a handler to decode any encoded character hex strings in specified text\n\n1. `decodeText(\"%2Asmith%2Dwilson%A9%20report%5F23%2Etxt\")`\n2. `--&gt; Result: \"*smith-wilson© report_23.txt\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC, you can use methods of the `NSString` class to decode URL encoded text. The handler in Listing 32-12 demonstrates how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20decodeText%28theText%29%0A%20%20%20%20set%20theString%20to%20stringWithString_%28theText%29%20of%20NSString%20of%20current%20application%0A%20%20%20%20set%20theEncoding%20to%20NSUTF8StringEncoding%20of%20current%20application%0A%20%20%20%20set%20theAdjustedString%20to%20stringByReplacingPercentEscapesUsingEncoding_%28theEncoding%29%20of%20theString%0A%20%20%20%20return%20%28theAdjustedString%20as%20string%29%0Aend%20decodeText)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH51-SW19\"></a>\n> **Listing 32-12**AppleScriptObjC: Handler that decodes URL encoded text\n>\n> 1. `on decodeText(theText)`\n> 2. ` set theString to stringWithString_(theText) of NSString of current application`\n> 3. ` set theEncoding to NSUTF8StringEncoding of current application`\n> 4. ` set theAdjustedString to stringByReplacingPercentEscapesUsingEncoding_(theEncoding) of theString`\n> 5. ` return (theAdjustedString as string)`\n> 6. `end decodeText`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/EncodeandDecodeText.html", "sha256": "9801b37c30486680fe3f2e24d2b0a373e301d6c13bc82f63fade0a7da751fd34", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "GettoKnowScriptEditor.md", "title": "Getting to Know Script Editor", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH5\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH10\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH10-SW1\"></a>\n\n## Getting to Know Script Editor\n\n![image: ../Art/script-editor_icon_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_icon_2x.png)\n\nScript Editor, found in `/Applications/Utilities/`, is an app for writing AppleScripts and JavaScripts. It provides the ability to edit, compile, and run scripts, browse scripting terminology, and save scripts in a variety of formats including compiled scripts, apps, and plain text.\n\n> **Note**\n>\n>\n> Xcode can also be used to write AppleScriptObjC and JavaScriptObjC apps.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW3\"></a>\n\n### Navigating Script Editor Documents\n\nA Script Editor document window includes the following main areas, as shown in Figure 5-1:\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW11\"></a>\n**Figure 5-1**A Script Editor document window\n![image: ../Art/script-editor_window_withcallouts_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_window_withcallouts_2x.png)\n\n* **Toolbar**—Use this to compile, run, and stop your script. Buttons are also available for showing and hiding the accessory view pane and the bundle contents pane. Select View &gt; Customize Toolbar, or Control-click on the toolbar and choose Customize Toolbar, to choose what buttons displayed in the toolbar.\n\n  The toolbar also includes a Record button, which converts manual mouse clicks and keystrokes into script code. However, recording is not supported in JavaScript and few apps support AppleScript recording.\n* **Navigation bar**—Use this bar to select a scripting language, target an app, or navigate through the handlers in your script.\n\n  The navigation bar currently only supports navigation of AppleScript handlers.\n* **Editor pane**—Write your script code here.\n* **Accessory View pane**—View and edit your script’s description here, or browse the result and events produced when your script runs.\n* **Bundle Contents pane**— Edit the identifier, version, and copyright info for your script here. You can also use this pane to add, remove, or manage resources contained within the bundle. This pane is accessible only when your script is saved in script bundle or app format.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW4\"></a>\n\n### Targeting a Scripting Language\n\nWhen you create a Script Editor document, select a scripting language in the navigation bar. See Figure 5-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW2\"></a>\n**Figure 5-2**Setting the scripting language in a Script Editor document window\n![image: ../Art/script-editor_langage_selector_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_langage_selector_2x.png)\n\nIf you always use the same language, set it as the default in the General pane of Script Editor preferences. See Figure 5-3.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW5\"></a>\n**Figure 5-3**Setting the default scripting language for Script Editor documents\n![image: ../Art/script-editor_preferences_window_general_pane_language_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_general_pane_language_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW6\"></a>\n\n### Viewing Script Events and Results\n\nScript Editor can display the result of executing a script, as well as a log of events sent and received during execution.\n\n> **Note**\n>\n>\n> A *result* is a value generated when a script statement executes. For example, executing the `make` command to create a folder in the Finder produces the newly created folder object as its result. The result of a script is the result of the script’s last statement. If the script’s last statement doesn’t produce a result, then the script has no result.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW7\"></a>\n\n### Viewing the Script Result\n\nThe result of executing your script—if a result was produced—is found in the Accessory View pane. See Figure 5-4.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW13\"></a>\n**Figure 5-4**Viewing the result of a script in Script Editor\n![image: ../Art/script-editor_window_result_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_window_result_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW20\"></a>\n\n**To view the result of your script**\n\nDo one of the following:\n\n* Press Command-2.\n* Choose View &gt; Show Result.\n* Click the Show Result (![image: ../Art/icon_showresult_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_showresult_2x.png)) button at the bottom of the Accessory View pane.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW8\"></a>\n\n### Viewing the Script Log\n\nThe Accessory View pane also contains a script log. See Figure 5-5.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW14\"></a>\n**Figure 5-5**Viewing the script log in Script Editor\n![image: ../Art/script-editor_eventlog_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_eventlog_2x.png)\n\nThe script log displays the following information.\n\n* **Result**—The result of executing your script.\n* **Messages**—Includes log messages generated as your script runs, as well as the script’s result.\n* **Events**—Includes log messages, the script’s result, and events—commands—sent to applications.\n* **Replies**—Includes log messages, the script’s result, events sent to applications, and event replies.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW22\"></a>\n\n**To view the script log**\n\nDo one of the following:\n\n* Press Command-3.\n* Choose View &gt; Show Log.\n* Click the Show Log (![image: ../Art/icon_showlog_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_showlog_2x.png)) button at the bottom of the Accessory View pane.\n\n> **Note**\n>\n>\n> In AppleScript, log messages are generated using the `log` command. See Listing 5-1.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Log%20a%20Message&script=log%20%22My%20log%20entry.%22%0D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW15\"></a>\n> **Listing 5-1**AppleScript: Example of a log message at the root level of a script\n>\n> 1. `log \"My log entry.\"`\n>\n> Since the `log` command targets the script itself, you must explicitly use the `me` keyword to direct it to the script when calling it within a tell statement. See Listing 5-2.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Log%20a%20Message%20in%20a%20Tell%20Statement&script=tell%20app%20%22Finder%22%0D%20%20%20%20tell%20me%20to%20log%20%22My%20log%20entry.%22%0Dend%20tell%0D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW16\"></a>\n> **Listing 5-2**AppleScript: Example of a log message within an application tell statement\n>\n> 1. `tell app \"Finder\"`\n> 2. ` tell me to log \"My log entry.\"`\n> 3. `end tell`\n>\n> In JavaScript, log messages are generated by calling the `console.log()` method anywhere in your script. See Listing 5-3.\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Log%20a%20Message&script=console.log%28%22My%20log%20entry.%22%29%0D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW17\"></a>\n> **Listing 5-3**JavaScript: Example of a log message\n>\n> 1. `console.log(\"My log entry.\")`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW9\"></a>\n\n### Viewing the Log History\n\nThe result and script log areas in the Accessory View pane reset each time you run your script. However, you can view historical logs for an opened script in the Log History window. See Figure 5-6.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW19\"></a>\n**Figure 5-6**The Log History window in Script Editor\n![image: ../Art/script-editor_resulthistory_window_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_resulthistory_window_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH5-SW23\"></a>\n\n**To view the Log History window**\n\nDo one of the following:\n\n* Press Option-Command-L.\n* Choose View &gt; Log History.\n* Click the Log History button (![image: ../Art/icon_loghistory_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_loghistory_2x.png)) in the top right of the Accessory View pane.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/GettoKnowScriptEditor.html", "sha256": "e12b9c984fe9c9241afd81266fdb82780beeca93b585b2e2cb0add27b1b52c3d", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "HowMacScriptingWorks.md", "title": "How Mac Scripting Works", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH73\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH73-SW1\"></a>\n\n## How Mac Scripting Works\n\nThe *Open Scripting Architecture (OSA)* provides a standard and extensible mechanism for interapplication communication in OS X. This communication takes place through the exchange of Apple events. An *Apple event* is a type of interprocess message that encapsulates commands and data.\n\nA *scriptable application* responds to Apple events by performing operations or supplying data. Every scriptable app implements its own scripting features and exposes its own unique terminology through a *scripting dictionary*. While not all apps are considered *scriptable*, any app with a graphical user interface responds to Apple Events at a minimal level. This is because OS X uses Apple Events to instruct all apps to perform core tasks such as launching, quitting, opening a document, and printing. To learn about scripting terminology and dictionaries, see [Accessing Scripting Terminology](https://developer.apple.com/library/archive/mac-automation-scripting-guide/AboutScriptingTerminology.md#//apple_ref/doc/uid/TP40016239-CH9-SW1).\n\nThe OSA provides the following capabilities in OS X:\n\n* The ability for app developers to create scriptable apps and expose scripting terminology\n* The ability for users to write scripts in a variety of scripting languages\n* The ability to communicate between apps on the same computer or on different computers using Apple events\n\nThe *Open Scripting framework* defines standard data structures, routines, and resources for creating *scripting components*, which implement support for specific scripting languages. The AppleScript and JavaScript components (in `System/Library/Components`), for example, make it possible to control scriptable apps from AppleScript and JavaScript scripts. Through the framework’s standard interface, a scriptable app can interact with any scripting component, regardless of its language. The framework also provides API for compiling, executing, loading, and storing scripts—functions provided by script editing apps.\n\nThe *Apple Event Manager* supplies the underlying support for creating scriptable apps and is implemented in the AE framework within the CoreServices framework. App developers can interact with the Apple Event Manager through the Apple Event APIs in the Foundation framework. See *[NSAppleEventManager Class Reference](https://developer.apple.com/documentation/foundation/nsappleeventmanager)* and *[NSAppleEventDescriptor Class Reference](https://developer.apple.com/documentation/foundation/nsappleeventdescriptor)*.\n\nFigure 2-1 shows how OSA elements work together in OS X.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH73-SW2\"></a>\n**Figure 2-1**The Open Scripting Architecture workflow\n![image: ../Art/execute_script_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/execute_script_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH73-SW3\"></a>\n\n### Extending the Reach of Scripting\n\nEvery scriptable app expands the reach of scripting. Developers can also add new scripting capabilities through scripting additions and scriptable background apps.\n\nA *scripting addition* is a bundle that implements new scripting terminology. For example, the Standard Additions scripting addition that comes with OS X (found in `/System/Library/ScriptingAdditions/StandardAdditions.osax`), includes commands for using the Clipboard, displaying alerts, speaking text, executing shell scripts, and more. Since scripting additions are loaded in a global context, commands provided by Standard Additions are available to all scripts.\n\nA *scriptable background application* (sometimes called an *agent*) runs with no visible user interface and provides scripts with access to useful features. System Events and Image Events are examples of scriptable background apps in OS X. Scripts can target System Events to perform operations on property list files, adjust system preferences, and much more. Scripts can target Image Events to perform basic image manipulations, such as cropping, rotating, and resizing.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH73-SW4\"></a>\n\n### Objective-C Bridging\n\nSeveral technologies in OS X make it possible for scripts to interact with Objective-C frameworks, and vice-versa.\n\n*AppleScriptObjC* is a bridge between AppleScript and Objective-C, and *JavaScriptObjC* is a bridge between JavaScript for automation and Objective-C. These bridges enable you to write scripts that use scripting terminology to interact with Objective-C frameworks, such as Foundation and AppKit. The bridges also enable you to design user interfaces for scripts that have the same look and feel of any other Cocoa app. For information about the AppleScriptObjC bridge, see [Objective-C to AppleScript Quick Translation Guide](https://developer.apple.com/library/archive/mac-automation-scripting-guide/AppendixA-AppleScriptObjCQuickTranslationGuide.md#//apple_ref/doc/uid/TP40016239-CH79-SW1). For information about JavaScriptObjC, see [Objective-C Bridge](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW17) in *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)*.\n\nThe *Scripting Bridge* lets you control scriptable apps using standard Objective-C syntax. Instead of incorporating scripts in your Cocoa app or dealing with the complexities of sending and handling Apple events, you can simply send Objective-C messages to objects representing scriptable apps. Your Cocoa app can do anything a script can, but in Objective-C code that’s more tightly integrated with the rest of your project’s code. See *[Scripting Bridge Programming Guide](https://developer.apple.com/library/archive/../../Cocoa/Conceptual/ScriptingBridgeConcepts/Introduction/Introduction.html#//apple_ref/doc/uid/TP40006104)* and *[Scripting Bridge Framework Reference](https://developer.apple.com/documentation/scriptingbridge)*.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/HowMacScriptingWorks.html", "sha256": "aa871de6a7cefb63692223e83ef6c89b09e2ab35c0e1633410e12ff4cf7457c6", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "MakeaSystem-WideService.md", "title": "Making a Systemwide Service", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH46\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH68\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH68-SW1\"></a>\n\n## Making a Systemwide Service\n\nIn OS X, *services* let you access functionality in one app from within another app. An app that provides a service advertises the operations it can perform on a particular type of data. Services are triggered from the Application Name &gt; Services menu, or from contextual menus that appear when you Control-click on text, files, and other kinds of data. When you’re manipulating a particular type of data, related services becomes available. For example, Mail provides a service that creates a new email from selected text.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW9\"></a>\n\n### Making a Script Available as a Service\n\nA script can be made available as a service by embedding it in an Automator service workflow.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW10\"></a>\n\n**To create a service workflow that runs a script**\n\n1. Launch Automator, found in `/Applications/`.\n2. Create a new Automator document.\n3. When prompted, choose a document type of Service and click Choose.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW4\"></a>\n\n   ![image: ../Art/automator_template_window_servicesselected_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_template_window_servicesselected_2x.png)\n4. At the top of the Automator document, configure the service.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW5\"></a>\n\n   ![image: ../Art/automator_workflow_document_serviceoptions_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_workflow_document_serviceoptions_2x.png)\n\n   If the service will process a specific type of data, such as text, files, or images, select the appropriate type. Otherwise, select “no input.”\n\n   If the service will be available within the context of a specific app only, select the appropriate app. Otherwise, select “any application.”\n\n   If the service will replace selected text with processed text, select the “Output replaces selected text” checkbox.\n5. Type `run` in the search field above the action library pane to filter the action library.\n\n   A list of actions for running AppleScripts, JavaScripts, UNIX shell scripts, and more are displayed.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW6\"></a>\n\n   ![image: ../Art/automator_runscriptactions_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_runscriptactions_2x.png)\n6. Drag an action, such as Run AppleScript or Run JavaScript, to the workflow area.\n\n   An interface for the action appears.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW7\"></a>\n\n   ![image: ../Art/automator_workflow_runapplescriptaction_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_workflow_runapplescriptaction_2x.png)\n7. Write the script code and add it to the action. If the action contains additional configuration options, adjust them as needed.\n\n   For AppleScripts and JavaScripts, use the action’s run handler template to process input data when the service runs, such as text or files. For workflows that replace selected text with processed text, be sure your workflow results in a text value. See [Example Service Workflow Scripts](#//apple_ref/doc/uid/TP40016239-CH46-SW12).\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW8\"></a>\n\n   ![image: ../Art/automator_runapplexcript_textprocessingserviceexample_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_runapplexcript_textprocessingserviceexample_2x.png)\n8. Save the Automator document.\n\n   When prompted, enter a name for the service.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW11\"></a>\n\n   ![image: ../Art/automator_saveservice_dialog_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_saveservice_dialog_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW12\"></a>\n\n### Example Service Workflow Scripts\n\nListing 40-1 and Listing 40-2 provide example code that can be pasted into the Run AppleScript and Run JavaScript Automator actions to convert selected text to uppercase.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Convert%20Text%20to%20Uppercase&script=on%20run%20%7Binput%2C%20parameters%7D%0D%20%20%20%20set%20input%20to%20changeCaseOfText%28input%20as%20string%2C%20%22upper%22%29%0D%20%20%20%20return%20input%0Dend%20run%0D%0Don%20changeCaseOfText%28theText%2C%20theCaseToSwitchTo%29%0D%20%20%20%20if%20theCaseToSwitchTo%20contains%20%22lower%22%20then%0D%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0D%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0D%20%20%20%20else%20if%20theCaseToSwitchTo%20contains%20%22upper%22%20then%0D%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0D%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0D%20%20%20%20else%0D%20%20%20%20%20%20%20%20return%20theText%0D%20%20%20%20end%20if%0D%20%20%20%20set%20theAlteredText%20to%20%22%22%0D%20%20%20%20repeat%20with%20aCharacter%20in%20theText%0D%20%20%20%20%20%20%20%20set%20theOffset%20to%20offset%20of%20aCharacter%20in%20theComparisonCharacters%0D%20%20%20%20%20%20%20%20if%20theOffset%20is%20not%200%20then%0D%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20character%20theOffset%20of%20theSourceCharacters%29%20as%20string%0D%20%20%20%20%20%20%20%20else%0D%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20aCharacter%29%20as%20string%0D%20%20%20%20%20%20%20%20end%20if%0D%20%20%20%20end%20repeat%0D%20%20%20%20return%20theAlteredText%0Dend%20changeCaseOfText%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW2\"></a>\n**Listing 40-1**AppleScript: Example of an Automator service script that converts selected text to uppercase\n\n1. `on run {input, parameters}`\n2. ` set input to changeCaseOfText(input as string, \"upper\")`\n3. ` return input`\n4. `end run`\n6. `on changeCaseOfText(theText, theCaseToSwitchTo)`\n7. ` if theCaseToSwitchTo contains \"lower\" then`\n8. ` set theComparisonCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n9. ` set theSourceCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n10. ` else if theCaseToSwitchTo contains \"upper\" then`\n11. ` set theComparisonCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n12. ` set theSourceCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n13. ` else`\n14. ` return theText`\n15. ` end if`\n16. ` set theAlteredText to \"\"`\n17. ` repeat with aCharacter in theText`\n18. ` set theOffset to offset of aCharacter in theComparisonCharacters`\n19. ` if theOffset is not 0 then`\n20. ` set theAlteredText to (theAlteredText & character theOffset of theSourceCharacters) as string`\n21. ` else`\n22. ` set theAlteredText to (theAlteredText & aCharacter) as string`\n23. ` end if`\n24. ` end repeat`\n25. ` return theAlteredText`\n26. `end changeCaseOfText`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Convert%20Text%20to%20Uppercase&script=function%20run%28input%2C%20parameters%29%20%7B%0A%20%20%20%20var%20selectedText%20%3D%20input%5B0%5D%0A%20%20%20%20return%20selectedText.toUpperCase%28%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW3\"></a>\n**Listing 40-2**JavaScript: Example of an Automator service script that converts selected text to uppercase\n\n1. `function run(input, parameters) {`\n2. ` var selectedText = input[0]`\n3. ` return selectedText.toUpperCase()`\n4. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH46-SW13\"></a>\n\n### Triggering Service Workflows\n\nSaved Automator service workflows automatically appear in services menus throughout the system at the appropriate time. For example, text processing workflows become available when you select text in an app. To run a service, select Application Name &gt; Services &gt; Service Workflow Name from the menu bar, or select Services &gt; Service Workflow Name from a contextual menu.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/MakeaSystem-WideService.html", "sha256": "4304da5a84a7c3b704402ec87fe3cbb313bf2ad946c2261d8fa099bae61d677e", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ManipulateImages.md", "title": "Manipulating Images", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH20\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW1\"></a>\n\n## Manipulating Images\n\nImage Events is a scriptable background app in OS X that can be used to automate the manipulation of images without the need for a fully-featured image editor. You can use Image Events to:\n\n* Read image properties\n* Flip and rotate images\n* Crop and add padding to images\n* Resize images\n* Convert images from one type to another\n\nThe Image Events app is located in `/System/Library/CoreServices/`. You can access its dictionary from the Library palette in Script Editor. See [Opening a Scripting Dictionary](https://developer.apple.com/library/archive/mac-automation-scripting-guide/OpenaScriptingDictionary.md#//apple_ref/doc/uid/TP40016239-CH76-SW1).\n\n> **Note**\n>\n>\n> Image Events can read and save most standard image formats, including `.bmp`, `.jpg`, `.png`, `.psd`, and `.tif`. Image Events can read `.pdf` files, but cannot save them.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW11\"></a>\n\n### The Image Events Workflow\n\nTo manipulate an image with Image Events, a script typically performs the following sequential steps:\n\n1. Open the Image Events app.\n2. Open an image file.\n3. Access image properties or manipulate the image.\n4. Save the modified image as a new image file or overwriting the original image file.\n5. Close the image.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW12\"></a>\n\n### Opening an Image\n\nAn image must be opened before Image Events can interact with it. To open an image, use the `open` command and provide the image’s path, as shown in Listing 38-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Launch%20Image%20Events%20and%20open%20the%20image%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%20%20%20%20open%20theImageFile%0Aend%20tell%0A--%3E%20Result%3A%20image%20%22My%20Image.png%22%20of%20application%20%22Image%20Events%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW2\"></a>\n**Listing 38-1**AppleScript: Opening an image with Image Events\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Launch Image Events and open the image`\n5. `tell application \"Image Events\"`\n6. ` launch`\n7. ` open theImageFile`\n8. `end tell`\n9. `--&gt; Result: image \"My Image.png\" of application \"Image Events\"`\n\nThe result of the open command is an `image` object, the newly opened image. Since Image Events is a background app, opening an image produces no visible changes onscreen—you won’t actually *see* the opened image.\n\n> **Note**\n>\n>\n> When working with Image Events, use the `launch` command to make sure it’s running rather than the `activate` command, which is reserved for apps with interfaces.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW14\"></a>\n\n### Reading Image Properties\n\nLike all scriptable objects, images have attributes that define them, such as dimensions, color space, and resolution. The `image` class in the Image Events scripting dictionary contains a variety of properties for key attributes. Listing 38-2 shows how to access some of these properties. First, it retrieves a record of available properties for a selected image. Next, it retrieves some individual properties.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%0A%20%20%20%20--%20Read%20the%20image%27s%20properties%0A%20%20%20%20tell%20theImage%0A%20%20%20%20%20%20%20%20properties%0A%20%20%20%20%20%20%20%20--%3E%20%7Bcolor%20space%3ARGB%2C%20image%20file%3Afile%20%22Macintosh%20HD%3AUsers%3AYourUserName%3ADesktop%3AMy%20Image.png%22%20of%20application%20%22Image%20Events%22%2C%20bit%20depth%3Amillions%20of%20colors%2C%20dimensions%3A%7B293%2C%20252%7D%2C%20location%3Afolder%20%22Macintosh%20HD%3AUsers%3AYourUserName%3ADesktop%3A%22%20of%20application%20%22Image%20Events%22%2C%20embedded%20profile%3Aprofile%20%22Thunderbolt%20Display%22%20of%20image%20%22My%20Image.png%22%20of%20application%20%22Image%20Events%22%2C%20file%20type%3APNG%2C%20class%3Aimage%2C%20name%3A%22My%20Image.png%22%2C%20resolution%3A%7B72.0%2C%2072.0%7D%7D%0A%0A%20%20%20%20%20%20%20%20--%20Read%20the%20image%27s%20resolution%0A%20%20%20%20%20%20%20resolution%0A%20%20%20%20%20%20%20%20--%3E%20%7B72.0%2C%2072.0%7D%0A%0A%20%20%20%20%20%20%20%20--%20Read%20the%20image%27s%20type%0A%20%20%20%20%20%20%20file%20type%0A%20%20%20%20%20%20%20%20--%3E%20PNG%0A%0A%20%20%20%20%20%20%20%20--%20Read%20the%20name%20of%20the%20image%27s%20embedded%20profile%0A%20%20%20%20%20%20%20name%20of%20embedded%20profile%0A%20%20%20%20%20%20%20%20--%3E%20%22Thunderbolt%20Display%22%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW3\"></a>\n**Listing 38-2**AppleScript: Retrieving properties from an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Launch Image Events`\n5. `tell application \"Image Events\"`\n6. ` launch`\n8. ` -- Open the image`\n9. ` set theImage to open theImageFile`\n11. ` -- Read the image's properties`\n12. ` tell theImage`\n13. ` properties`\n14. ` --&gt; {color space:RGB, image file:file \"Macintosh HD:Users:YourUserName:Desktop:My Image.png\" of application \"Image Events\", bit depth:millions of colors, dimensions:{293, 252}, location:folder \"Macintosh HD:Users:YourUserName:Desktop:\" of application \"Image Events\", embedded profile:profile \"Thunderbolt Display\" of image \"My Image.png\" of application \"Image Events\", file type:PNG, class:image, name:\"My Image.png\", resolution:{72.0, 72.0}}`\n16. ` -- Read the image's resolution`\n17. ` resolution`\n18. ` --&gt; {72.0, 72.0}`\n20. ` -- Read the image's type`\n21. ` file type`\n22. ` --&gt; PNG`\n24. ` -- Read the name of the image's embedded profile`\n25. ` name of embedded profile`\n26. ` --&gt; \"Thunderbolt Display\"`\n27. ` end tell`\n28. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW15\"></a>\n\n### Flipping an Image\n\nThe `flip` command reverses the axis of an image. It has two options for the required parameter: `horizontal` for changing the axis of the image on a horizontal plane, and `vertical` for changing the axis of the image on a vertical plane. Listing 38-3 flips an image both horizontally and vertically.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-DontLinkElementID_3\"></a>\n\n\nImportant\n\nThe script in Listing 38-3 saves a chosen image as a new file with a prefix of `temp-`. If another file exists with this same name, it is overwritten.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Determine%20a%20save%20name%20for%20the%20image%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%0A%20%20%20%20%20%20%20%20set%20theSaveName%20to%20%22temp-%22%20%26%20theName%0A%0A%20%20%20%20%20%20%20%20--%20Flip%20the%20image%20horizontally%0A%20%20%20%20%20%20%20%20flip%20with%20horizontal%0A%0A%20%20%20%20%20%20%20%20--%20Flip%20the%20image%20vertically%0A%20%20%20%20%20%20%20%20flip%20with%20vertical%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20to%20the%20output%20folder%2C%20using%20the%20save%20name%0A%20%20%20%20%20%20%20%20save%20as%20file%20type%20in%20%28theOutputFolder%20%26%20theSaveName%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW4\"></a>\n**Listing 38-3**AppleScript: Flipping an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Locate an output folder`\n5. `set theOutputFolder to (path to desktop folder as string)`\n7. `-- Launch Image Events`\n8. `tell application \"Image Events\"`\n9. ` launch`\n11. ` -- Open the image`\n12. ` set theImage to open theImageFile`\n13. ` tell theImage`\n15. ` -- Determine a save name for the image`\n16. ` set theName to name`\n17. ` set theSaveName to \"temp-\" & theName`\n19. ` -- Flip the image horizontally`\n20. ` flip with horizontal`\n22. ` -- Flip the image vertically`\n23. ` flip with vertical`\n25. ` -- Save the image to the output folder, using the save name`\n26. ` save as file type in (theOutputFolder & theSaveName)`\n28. ` -- Close the image`\n29. ` close`\n30. ` end tell`\n31. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW16\"></a>\n\n### Rotating an Image\n\nThe `rotate` command rotates an image around its center point. To rotate an image clockwise, provide the command’s `to angle` parameter with an integer value between `1` to `359` (see Listing 38-4). To rotate an image counter-clockwise, provide a negative value, such as `-90`.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-DontLinkElementID_4\"></a>\n\n\nImportant\n\nThe script in Listing 38-4 saves a chosen image as a new file with a prefix of `temp-`. If another file exists with this same name, it is overwritten.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Determine%20a%20save%20name%20for%20the%20image%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%0A%20%20%20%20%20%20%20%20set%20theSaveName%20to%20%22temp-%22%20%26%20theName%0A%0A%20%20%20%20%20%20%20%20--%20Rotate%20an%20image%2045%20degrees%0A%20%20%20%20%20%20%20%20rotate%20to%20angle%2045%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20to%20the%20output%20folder%2C%20using%20the%20save%20name%0A%20%20%20%20%20%20%20%20save%20as%20file%20type%20in%20%28theOutputFolder%20%26%20theSaveName%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW8\"></a>\n**Listing 38-4**AppleScript: Rotating an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Locate an output folder`\n5. `set theOutputFolder to (path to desktop folder as string)`\n7. `-- Launch Image Events`\n8. `tell application \"Image Events\"`\n9. ` launch`\n11. ` -- Open the image`\n12. ` set theImage to open theImageFile`\n13. ` tell theImage`\n15. ` -- Determine a save name for the image`\n16. ` set theName to name`\n17. ` set theSaveName to \"temp-\" & theName`\n19. ` -- Rotate an image 45 degrees`\n20. ` rotate to angle 45`\n22. ` -- Save the image to the output folder, using the save name`\n23. ` save as file type in (theOutputFolder & theSaveName)`\n25. ` -- Close the image`\n26. ` close`\n27. ` end tell`\n28. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW17\"></a>\n\n### Scaling an Image\n\nScaling an image proportionally increases or decreases its dimensions. The `scale` command can resize images in one of two ways:\n\n* To scale an image by percentage, provide a decimal value for the `by factor` parameter. The value `1` is equivalent to 100%. The value `.5` is 50%. The value `1.5` is 150% and so on.\n\n  Use the following formula to determine the scaling factor:\n\n  `«percentage» * .01`\n* To scale an image to a specific size, provide an integer value for the `to size` parameter. This value indicates the maximum number of pixels for the resized image on its longest side.\n\nScaling doesn’t change the resolution of an image. For example, a 72 dpi image that has been scaled to 50% of its original dimensions still has a resolution of 72 dpi.\n\nListing 38-5 demonstrates how to resize an image. It can scale by percentage or pixels, depending on the value of a Boolean variable.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-DontLinkElementID_5\"></a>\n\n\nImportant\n\nThe script in Listing 38-5 saves a chosen image as a new file with a prefix of `temp-`. If another file exists with this same name, it is overwritten.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20To%20scale%20by%20percentage%2C%20set%20this%20value%20to%20true.%20To%20scale%20to%20a%20specific%20size%2C%20set%20it%20to%20false.%0Aset%20scaleByPercentage%20to%20true%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Determine%20a%20save%20name%20for%20the%20image%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%0A%20%20%20%20%20%20%20%20set%20theSaveName%20to%20%22temp-%22%20%26%20theName%0A%0A%20%20%20%20%20%20%20%20--%20Scale%20the%20image%20by%2050%25%0A%20%20%20%20%20%20%20%20if%20scaleByPercentage%20%3D%20true%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20scale%20by%20factor%200.5%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Scale%20the%20image%20to%20100px%20on%20its%20longese%20side%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20scale%20to%20size%20100%0A%20%20%20%20%20%20%20%20end%20if%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20to%20the%20output%20folder%2C%20using%20the%20save%20name%0A%20%20%20%20%20%20%20%20save%20as%20file%20type%20in%20%28theOutputFolder%20%26%20theSaveName%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW7\"></a>\n**Listing 38-5**AppleScript: Scaling an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Locate an output folder`\n5. `set theOutputFolder to (path to desktop folder as string)`\n7. `-- To scale by percentage, set this value to true. To scale to a specific size, set it to false.`\n8. `set scaleByPercentage to true`\n10. `-- Launch Image Events`\n11. `tell application \"Image Events\"`\n12. ` launch`\n14. ` -- Open the image`\n15. ` set theImage to open theImageFile`\n16. ` tell theImage`\n18. ` -- Determine a save name for the image`\n19. ` set theName to name`\n20. ` set theSaveName to \"temp-\" & theName`\n22. ` -- Scale the image by 50%`\n23. ` if scaleByPercentage = true then`\n24. ` scale by factor 0.5`\n26. ` -- Scale the image to 100px on its longese side`\n27. ` else`\n28. ` scale to size 100`\n29. ` end if`\n31. ` -- Save the image to the output folder, using the save name`\n32. ` save as file type in (theOutputFolder & theSaveName)`\n34. ` -- Close the image`\n35. ` close`\n36. ` end tell`\n37. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW18\"></a>\n\n### Cropping an Image\n\nCropping an image removes pixels around all of its sides, centering the remaining area. The `to dimensions` required parameter takes a list of two integers: the new width and height, in pixels. In Listing 38-6, an image is cropped to 100 by 100 pixels.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-DontLinkElementID_6\"></a>\n\n\nImportant\n\nThe script in Listing 38-6 saves a chosen image as a new file with a prefix of `temp-`. If another file exists with this same name, it is overwritten.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Determine%20a%20save%20name%20for%20the%20image%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%0A%20%20%20%20%20%20%20%20set%20theSaveName%20to%20%22temp-%22%20%26%20theName%0A%0A%20%20%20%20%20%20%20%20--%20Crop%20the%20image%20to%20100px%20by%20100px%0A%20%20%20%20%20%20%20%20crop%20to%20dimensions%20%7B100%2C%20100%7D%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20to%20the%20output%20folder%2C%20using%20the%20save%20name%0A%20%20%20%20%20%20%20%20save%20as%20file%20type%20in%20%28theOutputFolder%20%26%20theSaveName%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW6\"></a>\n**Listing 38-6**AppleScript: Cropping an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Locate an output folder`\n5. `set theOutputFolder to (path to desktop folder as string)`\n7. `-- Launch Image Events`\n8. `tell application \"Image Events\"`\n9. ` launch`\n11. ` -- Open the image`\n12. ` set theImage to open theImageFile`\n13. ` tell theImage`\n15. ` -- Determine a save name for the image`\n16. ` set theName to name`\n17. ` set theSaveName to \"temp-\" & theName`\n19. ` -- Crop the image to 100px by 100px`\n20. ` crop to dimensions {100, 100}`\n22. ` -- Save the image to the output folder, using the save name`\n23. ` save as file type in (theOutputFolder & theSaveName)`\n25. ` -- Close the image`\n26. ` close`\n27. ` end tell`\n28. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW19\"></a>\n\n### Padding an Image\n\nPadding an image adds space around its sides. It’s essentially the reverse of cropping an image, although negative padding an image produces cropping. The `to dimensions` required parameter takes a list of two integers: the new width and height, in pixels. The optional `with pad color` parameter can be used to specify the color of the padding. In Listing 38-7, 20 pixels of padding is added around an image.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-DontLinkElementID_7\"></a>\n\n\nImportant\n\nThe script in Listing 38-7 saves a chosen image as a new file with a prefix of `temp-`. If another file exists with this same name, it is overwritten.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Prompt%20for%20a%20color%0Aset%20theColor%20to%20choose%20color%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Determine%20a%20save%20name%20for%20the%20image%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%0A%20%20%20%20%20%20%20%20set%20theSaveName%20to%20%22temp-%22%20%26%20theName%0A%0A%20%20%20%20%20%20%20%20--%20Get%20the%20current%20dimensions%20of%20the%20image%0A%20%20%20%20%20%20%20%20set%20%7BtheWidth%2C%20theHeight%7D%20to%20dimensions%0A%0A%20%20%20%20%20%20%20%20--%20Pad%20the%20image%20by%2020%20pixels%20on%20all%20sides%0A%20%20%20%20%20%20%20%20pad%20to%20dimensions%20%7BtheWidth%20%2B%2020%2C%20theHeight%20%2B%2020%7D%20with%20pad%20color%20theColor%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20to%20the%20output%20folder%2C%20using%20the%20save%20name%0A%20%20%20%20%20%20%20%20save%20as%20file%20type%20in%20%28theOutputFolder%20%26%20theSaveName%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW5\"></a>\n**Listing 38-7**AppleScript: Padding an image\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Prompt for a color`\n5. `set theColor to choose color`\n7. `-- Locate an output folder`\n8. `set theOutputFolder to (path to desktop folder as string)`\n10. `-- Launch Image Events`\n11. `tell application \"Image Events\"`\n12. ` launch`\n14. ` -- Open the image`\n15. ` set theImage to open theImageFile`\n16. ` tell theImage`\n18. ` -- Determine a save name for the image`\n19. ` set theName to name`\n20. ` set theSaveName to \"temp-\" & theName`\n22. ` -- Get the current dimensions of the image`\n23. ` set {theWidth, theHeight} to dimensions`\n25. ` -- Pad the image by 20 pixels on all sides`\n26. ` pad to dimensions {theWidth + 20, theHeight + 20} with pad color theColor`\n28. ` -- Save the image to the output folder, using the save name`\n29. ` save as file type in (theOutputFolder & theSaveName)`\n31. ` -- Close the image`\n32. ` close`\n33. ` end tell`\n34. `end tell`\n\n> **Note**\n>\n>\n> Images containing transparency result in transparent padding, regardless of whether a color is specified.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW21\"></a>\n\n### Converting an Image from One Type to Another\n\nTo convert an image from one type to another, open it and save it in another format. Listing 38-8 saves a chosen image in `.jpg`, `.psd`, and `.tif` format.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=--%20Prompt%20for%20an%20image%0Aset%20theImageFile%20to%20choose%20file%20of%20type%20%22public.image%22%20with%20prompt%20%22%22%0A%0A--%20Locate%20an%20output%20folder%0Aset%20theOutputFolder%20to%20%28path%20to%20desktop%20folder%20as%20string%29%0A%0A--%20Launch%20Image%20Events%0Atell%20application%20%22Image%20Events%22%0A%20%20%20%20launch%0A%0A%20%20%20%20--%20Open%20the%20image%0A%20%20%20%20set%20theImage%20to%20open%20theImageFile%0A%20%20%20%20tell%20theImage%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20as%20a%20.jpg%0A%20%20%20%20%20%20%20%20save%20as%20JPEG%20in%20%28theOutputFolder%20%26%20%22temp-conversion-output.jpg%22%29%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20as%20a%20.psd%0A%20%20%20%20%20%20%20%20save%20as%20PSD%20in%20%28theOutputFolder%20%26%20%22temp-conversion-output.psd%22%29%0A%0A%20%20%20%20%20%20%20%20--%20Save%20the%20image%20as%20a%20.tif%0A%20%20%20%20%20%20%20%20save%20as%20TIFF%20in%20%28theOutputFolder%20%26%20%22temp-conversion-output.tif%22%29%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20image%0A%20%20%20%20%20%20%20%20close%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH20-SW9\"></a>\n**Listing 38-8**AppleScript: Converting an image from one type to another\n\n1. `-- Prompt for an image`\n2. `set theImageFile to choose file of type \"public.image\" with prompt \"\"`\n4. `-- Locate an output folder`\n5. `set theOutputFolder to (path to desktop folder as string)`\n7. `-- Launch Image Events`\n8. `tell application \"Image Events\"`\n9. ` launch`\n11. ` -- Open the image`\n12. ` set theImage to open theImageFile`\n13. ` tell theImage`\n15. ` -- Save the image as a .jpg`\n16. ` save as JPEG in (theOutputFolder & \"temp-conversion-output.jpg\")`\n18. ` -- Save the image as a .psd`\n19. ` save as PSD in (theOutputFolder & \"temp-conversion-output.psd\")`\n21. ` -- Save the image as a .tif`\n22. ` save as TIFF in (theOutputFolder & \"temp-conversion-output.tif\")`\n24. ` -- Close the image`\n25. ` close`\n26. ` end tell`\n27. `end tell`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateImages.html", "sha256": "693f936abc7212c4b00053399723a090abf15d107f43d5f3277958802c7b8718", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ManipulateListsofItems.md", "title": "Manipulating Lists of Items", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH48\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW1\"></a>\n\n## Manipulating Lists of Items\n\nIn scripting, a list—typically referred to as an array in JavaScript—is a an ordered collection of values that’s stored in a single object. A script can loop through the items of a list in order to process the items individually. There are many other tasks scripts commonly performed with lists, such as joining and sorting, which usually require custom scripting.\n\n> **Note**\n>\n>\n> For general information about working with lists in AppleScript, see the [list](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCDBHIE) class reference documentation in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n>\n> In JavaScript, the `Array` object provides a range of processing functions. Information about this object can be found [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW51\"></a>\n\n### Looping through a List\n\nListing 21-1 and Listing 21-2 show how to incrementally loop through a list. In these examples, a variable—`a` in AppleScript and `i` in JavaScript—represents an integer value from `1` through the number of items in the list. Each loop causes this variable value to increase, and you can use the increment variable to target a specific list item.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0Arepeat%20with%20a%20from%201%20to%20length%20of%20theList%0A%20%20%20%20set%20theCurrentListItem%20to%20item%20a%20of%20theList%0A%20%20%20%20--%20Process%20the%20current%20list%20item%0A%20%20%20%20display%20dialog%20theCurrentListItem%20%26%20%22%20is%20item%20%22%20%26%20a%20%26%20%22%20in%20the%20list.%22%0Aend%20repeat)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW52\"></a>\n**Listing 21-1**AppleScript: Incrementally looping through items in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `repeat with a from 1 to length of theList`\n3. ` set theCurrentListItem to item a of theList`\n4. ` -- Process the current list item`\n5. ` display dialog theCurrentListItem & \" is item \" & a & \" in the list.\"`\n6. `end repeat`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Avar%20arrayLength%20%3D%20array.length%0A%0Afor%20%28var%20i%20%3D%200%3B%20i%20%3C%20arrayLength%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20var%20currentArrayItem%20%3D%20array%5Bi%5D%0A%20%20%20%20%2F%2F%20Process%20the%20current%20array%20item%0A%20%20%20%20app.displayDialog%28%60%24%7BcurrentArrayItem%7D%20is%20item%20%24%7Bi%20%2B%201%7D%20in%20the%20array.%60%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW61\"></a>\n**Listing 21-2**JavaScript: Incrementally looping through items in an array\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n5. `var arrayLength = array.length`\n7. `for (var i = 0; i &lt; arrayLength; i++) {`\n8. ` var currentArrayItem = array[i]`\n9. ` // Process the current array item`\n10. ``  app.displayDialog(`${currentArrayItem} is item ${i + 1} in the array.`) ``\n11. `}`\n\nA script can also loop through a list of items more directly by dynamically assigning a list item to a variable. In Listing 21-3 and Listing 21-4, a variable—`theCurrentListItem` in AppleScript and `currentArrayItem` in JavaScript—represents the item matching the current loop.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0Arepeat%20with%20theCurrentListItem%20in%20theList%0A%20%20%20%20--%20Process%20the%20current%20list%20item%0A%20%20%20%20display%20dialog%20theCurrentListItem%20%26%20%22%20is%20an%20item%20in%20the%20list.%22%0Aend%20repeat)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW62\"></a>\n**Listing 21-3**AppleScript: Directly looping through items in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `repeat with theCurrentListItem in theList`\n3. ` -- Process the current list item`\n4. ` display dialog theCurrentListItem & \" is an item in the list.\"`\n5. `end repeat`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Avar%20arrayLength%20%3D%20array.length%0Afor%20%28var%20currentArrayItem%20of%20array%29%20%7B%0A%20%20%20%20%2F%2F%20Process%20the%20current%20array%20item%0A%20%20%20%20app.displayDialog%28%60%24%7BcurrentArrayItem%7D%20is%20an%20item%20in%20the%20array.%60%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW63\"></a>\n**Listing 21-4**JavaScript: Directly looping through items in an array\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n5. `var arrayLength = array.length`\n6. `for (var currentArrayItem of array) {`\n7. ` // Process the current array item`\n8. ``  app.displayDialog(`${currentArrayItem} is an item in the array.`) ``\n9. `}`\n\n> **Note**\n>\n>\n> For more information about looping through list items in AppleScript, see [Control Statements Reference](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_control_statements.html#//apple_ref/doc/uid/TP40000983-CH6g) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW11\"></a>\n\n### Converting a List to a String\n\nThe handler in Listing 21-5 joins a list of strings together in AppleScript, separating them by a specific delimiter.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertListToString%28theList%2C%20theDelimiter%29%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20theDelimiter%0A%20%20%20%20set%20theString%20to%20theList%20as%20string%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%22%0A%20%20%20%20return%20theString%0Aend%20convertListToString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW7\"></a>\n**Listing 21-5**AppleScript: Handler that converts a list of strings into a single string\n\n1. `on convertListToString(theList, theDelimiter)`\n2. ` set AppleScript's text item delimiters to theDelimiter`\n3. ` set theString to theList as string`\n4. ` set AppleScript's text item delimiters to \"\"`\n5. ` return theString`\n6. `end convertListToString`\n\nListing 21-6 shows how to call the handler in Listing 21-5.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22The%22%2C%20%22quick%22%2C%20%22brown%22%2C%20%22fox%22%2C%20%22jumps%22%2C%20%22over%22%2C%20%22a%22%2C%20%22lazy%22%2C%20%22dog.%22%7D%0AconvertListToString%28theList%2C%20space%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW12\"></a>\n**Listing 21-6**AppleScript: Calling a handler to convert a list of strings into a single string\n\n1. `set theList to {\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"a\", \"lazy\", \"dog.\"}`\n2. `convertListToString(theList, space)`\n3. `--&gt; Result: \"The quick brown fox jumps over a lazy dog.\"`\n\nIn JavaScript, custom scripting isn’t required to perform this operation. The `Array` object has a `join()` method, which can be called to merge a list of items together, as shown in Listing 21-7.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22The%22%2C%20%22quick%22%2C%20%22brown%22%2C%20%22fox%22%2C%20%22jumps%22%2C%20%22over%22%2C%20%22a%22%2C%20%22lazy%22%2C%20%22dog.%22%5D%0Avar%20array.join%28%22%20%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW54\"></a>\n**Listing 21-7**JavaScript: Calling a function to convert an array of strings into a single string\n\n1. `var array = [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"a\", \"lazy\", \"dog.\"]`\n2. `var array.join(\" \")`\n3. `// Result: \"The quick brown fox jumps over a lazy dog.\"`\n\n> **Note**\n>\n>\n> See [Splitting Text](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ManipulateText.md#//apple_ref/doc/uid/TP40016239-CH33-SW6) to learn how to break text apart, based on a specific delimiter.\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSArray` class to convert a list of strings into a single string. The handlers in Listing 21-8 and Listing 21-9 demonstrate how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertListToString%28theList%2C%20theDelimiter%29%0A%20%20%20%20set%20theArray%20to%20arrayWithArray_%28theList%29%20of%20NSArray%20of%20current%20application%0A%20%20%20%20set%20theString%20to%20componentsJoinedByString_%28theDelimiter%29%20of%20theArray%0A%20%20%20%20return%20%28theString%20as%20string%29%0Aend%20convertListToString)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW14\"></a>\n> **Listing 21-8**AppleScriptObjC: Handler that converts a list of strings into a single string\n>\n> 1. `on convertListToString(theList, theDelimiter)`\n> 2. ` set theArray to arrayWithArray_(theList) of NSArray of current application`\n> 3. ` set theString to componentsJoinedByString_(theDelimiter) of theArray`\n> 4. ` return (theString as string)`\n> 5. `end convertListToString`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertArrayToString%28array%2C%20delimiter%29%20%7B%0A%20%20%20%20array%20%3D%20%24%28array%29%0A%20%20%20%20array%20%3D%20array.componentsJoinedByString%28delimiter%29%0A%20%20%20%20return%20array.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW55\"></a>\n> **Listing 21-9**JavaScriptObjC: Function that converts an array of strings into a single string\n>\n> 1. `function convertArrayToString(array, delimiter) {`\n> 2. ` array = $(array)`\n> 3. ` array = array.componentsJoinedByString(delimiter)`\n> 4. ` return array.js`\n> 5. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW17\"></a>\n\n### Counting the Items in a List\n\nListing 21-10 and Listing 21-11 show how to get the number of items in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Apple%20Watch%22%2C%20%22iMac%22%2C%20%22iPhone%22%2C%20%22MacBook%20Pro%22%7D%0Alength%20of%20theList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW18\"></a>\n**Listing 21-10**AppleScript: Get the count of the items in a list\n\n1. `set theList to {\"Apple Watch\", \"iMac\", \"iPhone\", \"MacBook Pro\"}`\n2. `length of theList`\n3. `--&gt; Result: 4`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Apple%20Watch%22%2C%20%22iMac%22%2C%20%22iPhone%22%2C%20%22MacBook%20Pro%22%5D%0Aarray.length)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW56\"></a>\n**Listing 21-11**JavaScript: Get the count of the items in an array\n\n1. `var array = [\"Apple Watch\", \"iMac\", \"iPhone\", \"MacBook Pro\"]`\n2. `array.length`\n3. `// Result: 4`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW4\"></a>\n\n### Counting the Occurrences of an Item in a List\n\nThe handlers in Listing 21-12 and Listing 21-13 count how many times an item appears in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20countInstancesOfItemInList%28theList%2C%20theItem%29%0A%20%20%20%20set%20theCount%20to%200%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theList%0A%20%20%20%20%20%20%20%20if%20item%20a%20of%20theList%20is%20theItem%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theCount%20to%20theCount%20%2B%201%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theCount%0Aend%20countInstancesOfItemInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW15\"></a>\n**Listing 21-12**AppleScript: Handler that counts the number of times an item appears in a list\n\n1. `on countInstancesOfItemInList(theList, theItem)`\n2. ` set theCount to 0`\n3. ` repeat with a from 1 to count of theList`\n4. ` if item a of theList is theItem then`\n5. ` set theCount to theCount + 1`\n6. ` end if`\n7. ` end repeat`\n8. ` return theCount`\n9. `end countInstancesOfItemInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20countInstancesOfItemInArray%28array%2C%20item%29%20%7B%0A%20%20%20%20var%20count%20%3D%200%0A%20%20%20%20for%20%28var%20element%20of%20array%29%20%7B%0A%20%20%20%20%20%20%20%20if%20%28element%20%3D%3D%3D%20item%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20count%2B%2B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20count%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW57\"></a>\n**Listing 21-13**JavaScript: Function that counts the number of times an item appears in an array\n\n1. `function countInstancesOfItemInArray(array, item) {`\n2. ` var count = 0`\n3. ` for (var element of array) {`\n4. ` if (element === item) {`\n5. ` count++`\n6. ` }`\n7. ` }`\n8. ` return count`\n9. `}`\n\nListing 21-14 and Listing 21-15 show how to call the handlers in Listing 21-12 and Listing 21-13.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Jen%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%7D%0AcountInstancesOfItemInList%28theList%2C%20%22Jen%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW16\"></a>\n**Listing 21-14**AppleScript: Calling a handler to count the number of times an item appears in a list\n\n1. `set theList to {\"Sal\", \"Jen\", \"Ben\", \"David\", \"Chris\", \"Jen\"}`\n2. `countInstancesOfItemInList(theList, \"Jen\")`\n3. `--&gt; Result: 2`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Jen%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%5D%0AcountInstancesOfItemInArray%28array%2C%20%22Jen%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW58\"></a>\n**Listing 21-15**JavaScript: Calling a function to count the number of times an item appears in an array\n\n1. `var array = [\"Sal\", \"Jen\", \"Ben\", \"David\", \"Chris\", \"Jen\"]`\n2. `countInstancesOfItemInArray(array, \"Jen\")`\n3. `// Result: 2`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW2\"></a>\n\n### Determining if a List Contains a Specific Item\n\nListing 21-16 and Listing 21-17 return a `true` or `false` value, indicating the presence of an item in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AtheList%20contains%20%22Lizzie%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW19\"></a>\n**Listing 21-16**AppleScript: Check for the existence of an item in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `theList contains \"Lizzie\"`\n3. `--&gt; false`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray.includes%28%22Lizzie%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW59\"></a>\n**Listing 21-17**JavaScript: Check for the existence of an item in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array.includes(\"Lizzie\")`\n3. `// Result: false`\n\nListing 21-18 and Listing 21-19 demonstrate how to add an item to a list only if the list doesn’t already contain the item.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0Aif%20theList%20does%20not%20contain%20%22Jen%22%20then%0A%20%20%20%20set%20end%20of%20theList%20to%20%22Jen%22%0Aend%20if%0Areturn%20theList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW20\"></a>\n**Listing 21-18**AppleScript: Add an item to a list only if the list doesn’t contain the item\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `if theList does not contain \"Jen\" then`\n3. ` set end of theList to \"Jen\"`\n4. `end if`\n5. `return theList`\n6. `--&gt; Result: {\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aif%20%28!array.includes%28%22Jen%22%29%29%20%7B%0A%20%20%20%20array.push%28%22Jen%22%29%0A%7D%0Aarray)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW60\"></a>\n**Listing 21-19**JavaScript: Add an item to an array only if the array doesn’t contain the item\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `if (!array.includes(\"Jen\")) {`\n3. ` array.push(\"Jen\")`\n4. `}`\n5. `array`\n6. `// Result: [\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\"]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW3\"></a>\n\n### Determining the Position of an Item in a List\n\nThe handler in Listing 21-20 determines the position of an item the first time it appears in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20getPositionOfItemInList%28theItem%2C%20theList%29%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theList%0A%20%20%20%20%20%20%20%20if%20item%20a%20of%20theList%20is%20theItem%20then%20return%20a%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%200%0Aend%20getPositionOfItemInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW21\"></a>\n**Listing 21-20**AppleScript: Handler that determines the position of an item in a list\n\n1. `on getPositionOfItemInList(theItem, theList)`\n2. ` repeat with a from 1 to count of theList`\n3. ` if item a of theList is theItem then return a`\n4. ` end repeat`\n5. ` return 0`\n6. `end getPositionOfItemInList`\n\nListing 21-21 shows how to call the handler in Listing 21-20. In AppleScript, list item positions start at `1`—the first item in a list has a position of `1`.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%7D%0AgetPositionOfItemInList%28%22Maddie%22%2C%20theList%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW22\"></a>\n**Listing 21-21**AppleScript: Calling a handler to determine the position of an item in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\", \"Lizzie\", \"Maddie\", \"Lillie\"}`\n2. `getPositionOfItemInList(\"Maddie\", theList)`\n3. `--&gt; Result: 7`\n\nIn JavaScript, the `indexOf()` method of the `Array` object can be called to determine the position of an item in an array, as shown in Listing 21-22. In JavaScript, array item positions start at `0`—the first item in an array has an index of `0`.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%5D%0Aarray.indexOf%28%22Maddie%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW64\"></a>\n**Listing 21-22**JavaScript: Determine the position of an item in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\", \"Lizzie\", \"Maddie\", \"Lillie]`\n2. `array.indexOf(\"Maddie\")`\n3. `// Result: 6`\n\nThe `getPositionOfItemInList()` AppleScript handler and `indexOf()` JavaScript method can be used to cross-reference data between corresponding lists. In Listing 21-23 and Listing 21-24, a person is located in a list by name. Next, the person’s phone extension is located in a corresponding list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theNames%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%7D%0Aset%20theExtensions%20to%20%7B%22x1111%22%2C%20%22x2222%22%2C%20%22x3333%22%2C%20%22x4444%22%2C%20%22x5555%22%2C%20%22x6666%22%2C%20%22x7777%22%2C%20%22x8888%22%7D%7D%0Aset%20thePerson%20to%20choose%20from%20list%20theNames%20with%20prompt%20%22Choose%20a%20person%3A%22%0Aif%20thePerson%20is%20false%20then%20error%20number%20-128%0Aset%20theExtension%20to%20item%20%28getPositionOfItemInList%28%28thePerson%20as%20string%29%2C%20theNames%29%29%20of%20theExtensions%0Adisplay%20dialog%20%22The%20phone%20extension%20for%20%22%20%26%20thePerson%20%26%20%22%20is%20%22%20%26%20theExtension%20%26%20%22.%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW23\"></a>\n**Listing 21-23**AppleScript: Using cross-referencing to locate an item in a list based on the position of an item in another list\n\n1. `set theNames to {\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\", \"Lizzie\", \"Maddie\", \"Lillie\"}`\n2. `set theExtensions to {\"x1111\", \"x2222\", \"x3333\", \"x4444\", \"x5555\", \"x6666\", \"x7777\", \"x8888\"}}`\n3. `set thePerson to choose from list theNames with prompt \"Choose a person:\"`\n4. `if thePerson is false then error number -128`\n5. `set theExtension to item (getPositionOfItemInList((thePerson as string), theNames)) of theExtensions`\n6. `display dialog \"The phone extension for \" & thePerson & \" is \" & theExtension & \".\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20names%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%5D%0Avar%20extensions%20%3D%20%5B%22x1111%22%2C%20%22x2222%22%2C%20%22x3333%22%2C%20%22x4444%22%2C%20%22x5555%22%2C%20%22x6666%22%2C%20%22x7777%22%2C%20%22x8888%22%5D%0Avar%20people%20%3D%20app.chooseFromList%28names%2C%20%7BwithPrompt%3A%20%22Choose%20a%20person%3A%22%7D%29%0Aif%20%28!people%29%20%7B%0A%20%20%20%20throw%20new%20Error%28-128%29%0A%7D%0Avar%20person%20%3D%20people%5B0%5D%0Avar%20index%20%3D%20names.indexOf%28person%29%0Aconsole.log%28index%29%0Avar%20extension%20%3D%20extensions%5Bindex%5D%0Aapp.displayDialog%28%60The%20phone%20extension%20for%20%24%7Bperson%7D%20is%20%24%7Bextension%7D.%60%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW65\"></a>\n**Listing 21-24**JavaScript: Using cross-referencing to locate an item in an array based on the position of an item in another array\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var names = [\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\", \"Lizzie\", \"Maddie\", \"Lillie\"]`\n5. `var extensions = [\"x1111\", \"x2222\", \"x3333\", \"x4444\", \"x5555\", \"x6666\", \"x7777\", \"x8888\"]`\n6. `var people = app.chooseFromList(names, {withPrompt: \"Choose a person:\"})`\n7. `if (!people) {`\n8. ` throw new Error(-128)`\n9. `}`\n10. `var person = people[0]`\n11. `var index = names.indexOf(person)`\n12. `console.log(index)`\n13. `var extension = extensions[index]`\n14. `` app.displayDialog(`The phone extension for ${person} is ${extension}.`) ``\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW24\"></a>\n\n### Determining Multiple Positions of an Item in a List\n\nThe handlers in Listing 21-25 and Listing 21-26 determine every position of an item in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20getPositionsOfItemInList%28theItem%2C%20theList%2C%20listFirstPositionOnly%29%0A%20%20%20%20set%20thePositions%20to%20%7B%7D%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20length%20of%20theList%0A%20%20%20%20%20%20%20%20if%20item%20a%20of%20theList%20is%20theItem%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20listFirstPositionOnly%20%3D%20true%20then%20return%20a%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20end%20of%20thePositions%20to%20a%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20if%20listFirstPositionOnly%20is%20true%20and%20thePositions%20%3D%20%7B%7D%20then%20return%200%0A%20%20%20%20return%20thePositions%0Aend%20getPositionsOfItemInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW25\"></a>\n**Listing 21-25**AppleScript: Handler that determines every position of an item in a list\n\n1. `on getPositionsOfItemInList(theItem, theList, listFirstPositionOnly)`\n2. ` set thePositions to {}`\n3. ` repeat with a from 1 to length of theList`\n4. ` if item a of theList is theItem then`\n5. ` if listFirstPositionOnly = true then return a`\n6. ` set end of thePositions to a`\n7. ` end if`\n8. ` end repeat`\n9. ` if listFirstPositionOnly is true and thePositions = {} then return 0`\n10. ` return thePositions`\n11. `end getPositionsOfItemInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20getPositionsOfItemInArray%28item%2C%20array%2C%20firstPositionOnly%29%20%7B%0A%20%20%20%20if%20%28firstPositionOnly%29%20%7B%0A%20%20%20%20%20%20%20%20return%20array.indexOf%28item%29%0A%20%20%20%20%7D%0A%20%20%20%20var%20indexes%20%3D%20%5B%5D%0A%20%20%20%20for%20%28var%20index%20%3D%200%3B%20index%20%3C%20array.length%3B%20index%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20var%20element%20%3D%20array%5Bindex%5D%0A%20%20%20%20%20%20%20%20if%20%28element%20%3D%3D%3D%20item%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20indexes.push%28index%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20indexes%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW66\"></a>\n**Listing 21-26**JavaScript: Function that determines every position of an item in an array\n\n1. `function getPositionsOfItemInArray(item, array, firstPositionOnly) {`\n2. ` if (firstPositionOnly) {`\n3. ` return array.indexOf(item)`\n4. ` }`\n5. ` var indexes = []`\n6. ` for (var index = 0; index &lt; array.length; index++) {`\n7. ` var element = array[index]`\n8. ` if (element === item) {`\n9. ` indexes.push(index)`\n10. ` }`\n11. ` }`\n12. ` return indexes`\n13. `}`\n\nListing 21-27 and Listing 21-28 show how to call the handlers in Listing 21-25 and Listing 21-26.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22Jen%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Jen%22%2C%20%22Lillie%22%7D%0AgetPositionsOfItemInList%28%22Jen%22%2C%20theList%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW26\"></a>\n**Listing 21-27**AppleScript: Calling a handler to determine every position of an item in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"Jen\", \"David\", \"Chris\", \"Lizzie\", \"Maddie\", \"Jen\", \"Lillie\"}`\n2. `getPositionsOfItemInList(\"Jen\", theList, false)`\n3. `--&gt; Result: {3, 8}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22Jen%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Jen%22%2C%20%22Lillie%22%5D%0AgetPositionsOfItemInArray%28%22Jen%22%2C%20array%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW67\"></a>\n**Listing 21-28**JavaScript: Calling a function to determine every position of an item in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"Jen\", \"David\", \"Chris\", \"Lizzie\", \"Maddie\", \"Jen\", \"Lillie\"]`\n2. `getPositionsOfItemInArray(\"Jen\", array, false)`\n3. `// Result: [2, 7]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW8\"></a>\n\n### Finding the Highest Numeric Value in a List\n\nThe handlers in Listing 21-29 and Listing 21-30 determine the highest numeric value in a list of items. The passed list can contain non-numeric data as well as lists within lists.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20getHighestNumberInList%28theList%29%0A%20%20%20%20set%20theHighestNumber%20to%20false%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theList%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theList%0A%20%20%20%20%20%20%20%20set%20theClass%20to%20class%20of%20theCurrentItem%0A%20%20%20%20%20%20%20%20if%20theClass%20is%20in%20%7Binteger%2C%20real%7D%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theHighestNumber%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theHighestNumber%20to%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20if%20theCurrentItem%20is%20greater%20than%20theHighestNumber%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theHighestNumber%20to%20item%20a%20of%20theList%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20else%20if%20theClass%20is%20list%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theHighValue%20to%20getHighestNumberInList%28theCurrentItem%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theHighValue%20is%20greater%20than%20theHighestNumber%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theHighestNumber%20to%20theHighValue%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theHighestNumber%0Aend%20getHighestNumberInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW27\"></a>\n**Listing 21-29**AppleScript: Handler that determines the highest numeric value in a list of items\n\n1. `on getHighestNumberInList(theList)`\n2. ` set theHighestNumber to false`\n3. ` repeat with a from 1 to count of theList`\n4. ` set theCurrentItem to item a of theList`\n5. ` set theClass to class of theCurrentItem`\n6. ` if theClass is in {integer, real} then`\n7. ` if theHighestNumber is \"\" then`\n8. ` set theHighestNumber to theCurrentItem`\n9. ` else if theCurrentItem is greater than theHighestNumber then`\n10. ` set theHighestNumber to item a of theList`\n11. ` end if`\n12. ` else if theClass is list then`\n13. ` set theHighValue to getHighestNumberInList(theCurrentItem)`\n14. ` if theHighValue is greater than theHighestNumber then`\n15. ` set theHighestNumber to theHighValue`\n16. ` end if`\n17. ` end if`\n18. ` end repeat`\n19. ` return theHighestNumber`\n20. `end getHighestNumberInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20getHighestNumberInList%28list%29%20%7B%0A%20%20%20%20var%20highestNumber%20%3D%20undefined%0A%20%20%20%20for%20%28var%20item%20of%20list%29%20%7B%0A%20%20%20%20%20%20%20%20var%20number%20%3D%20undefined%0A%20%20%20%20%20%20%20%20if%20%28item.constructor%20%3D%3D%3D%20Number%29%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20number%20%3D%20item%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20else%20if%20%28item.constructor%20%3D%3D%3D%20Array%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20number%20%3D%20getHighestNumberInList%28item%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20if%20%28number%20!%3D%20undefined%20%26%26%20%28highestNumber%20%3D%3D%3D%20undefined%20%7C%7C%20number%20%3E%20highestNumber%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20highestNumber%20%3D%20number%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20highestNumber%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW82\"></a>\n**Listing 21-30**JavaScript: Function that determines the highest numeric value in a list of items\n\n1. `function getHighestNumberInList(list) {`\n2. ` var highestNumber = undefined`\n3. ` for (var item of list) {`\n4. ` var number = undefined`\n5. ` if (item.constructor === Number) {`\n7. ` number = item`\n8. ` }`\n9. ` else if (item.constructor === Array) {`\n10. ` number = getHighestNumberInList(item)`\n11. ` }`\n12. ` if (number != undefined && (highestNumber === undefined || number &gt; highestNumber)) {`\n13. ` highestNumber = number`\n14. ` }`\n15. ` }`\n16. ` return highestNumber`\n17. `}`\n\nListing 21-31 and Listing 21-32 show how to call the handlers in Listing 21-29 and Listing 21-30 for a list containing a mixture of numbers and strings.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%7B-3.25%2C%2023%2C%202345%2C%20%22sid%22%2C%203%2C%2067%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW28\"></a>\n**Listing 21-31**AppleScript: Calling a handler to determine the highest numeric value in a list of numbers and strings\n\n1. `getHighestNumberInList({-3.25, 23, 2345, \"sid\", 3, 67})`\n2. `--&gt; Result: 2345`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%5B-3.25%2C%2023%2C%202345%2C%20%22sid%22%2C%203%2C%2067%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW83\"></a>\n**Listing 21-32**JavaScript: Calling a function to determine the highest numeric value in a list of numbers and strings\n\n1. `getHighestNumberInList([-3.25, 23, 2345, \"sid\", 3, 67])`\n2. `// Result: 2345`\n\nListing 21-33 and Listing 21-34 show how to call the handlers in Listing 21-29 and Listing 21-30 for a list containing a mixture of numbers, strings, booleans, and lists.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%7B-3.25%2C%2023%2C%20%7B23%2C%2078695%2C%20%22bob%22%7D%2C%202345%2C%20true%2C%20%22sid%22%2C%203%2C%2067%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW29\"></a>\n**Listing 21-33**AppleScript: Calling a handler to determine the highest numeric value in a list of different value types\n\n1. `getHighestNumberInList({-3.25, 23, {23, 78695, \"bob\"}, 2345, true, \"sid\", 3, 67})`\n2. `--&gt; Result: 78695`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%5B-3.25%2C%2023%2C%20%5B23%2C%2078695%2C%20%22bob%22%5D%2C%202345%2C%20true%2C%20%22sid%22%2C%203%2C%2067%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW84\"></a>\n**Listing 21-34**JavaScript: Calling a function to determine the highest numeric value in a list of different value types\n\n1. `getHighestNumberInList([-3.25, 23, [23, 78695, \"bob\"], 2345, true, \"sid\", 3, 67])`\n2. `// Result: 78695`\n\nListing 21-35 and Listing 21-36 show how to call the handlers in Listing 21-29 and Listing 21-30 for a list containing only strings.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%7B%22this%22%2C%20%22list%22%2C%20%22contains%22%2C%20%22only%22%2C%20%22text%22%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW30\"></a>\n**Listing 21-35**AppleScript: Calling a handler to determine the highest numeric value in a list of strings\n\n1. `getHighestNumberInList({\"this\", \"list\", \"contains\", \"only\", \"text\"})`\n2. `--&gt; Result: false`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getHighestNumberInList%28%5B%22this%22%2C%20%22list%22%2C%20%22contains%22%2C%20%22only%22%2C%20%22text%22%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW85\"></a>\n**Listing 21-36**JavaScript: Calling a function to determine the highest numeric value in a list of strings\n\n1. `getHighestNumberInList([\"this\", \"list\", \"contains\", \"only\", \"text\"])`\n2. `// Result: undefined`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW9\"></a>\n\n### Finding the Lowest Numeric Value in a List\n\nThe handlers in Listing 21-37 and Listing 21-38 determines the lowest numeric value in a list of items. The passed list can contain non-numeric data as well as lists within lists.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20getLowestNumberInList%28theList%29%0A%20%20%20%20set%20theLowestNumber%20to%20false%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theList%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theList%0A%20%20%20%20%20%20%20%20set%20theClass%20to%20class%20of%20theCurrentItem%0A%20%20%20%20%20%20%20%20if%20theClass%20is%20in%20%7Binteger%2C%20real%7D%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theLowestNumber%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowestNumber%20to%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20if%20theCurrentItem%20is%20less%20than%20theLowestNumber%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowestNumber%20to%20item%20a%20of%20theList%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20else%20if%20theClass%20is%20list%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowValue%20to%20getLowestNumberInList%28theCurrentItem%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theLowValue%20is%20less%20than%20theLowestNumber%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowestNumber%20to%20theLowValue%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theLowestNumber%0Aend%20getLowestNumberInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW31\"></a>\n**Listing 21-37**AppleScript: Handler that determines the lowest numeric value in a list of items\n\n1. `on getLowestNumberInList(theList)`\n2. ` set theLowestNumber to false`\n3. ` repeat with a from 1 to count of theList`\n4. ` set theCurrentItem to item a of theList`\n5. ` set theClass to class of theCurrentItem`\n6. ` if theClass is in {integer, real} then`\n7. ` if theLowestNumber is \"\" then`\n8. ` set theLowestNumber to theCurrentItem`\n9. ` else if theCurrentItem is less than theLowestNumber then`\n10. ` set theLowestNumber to item a of theList`\n11. ` end if`\n12. ` else if theClass is list then`\n13. ` set theLowValue to getLowestNumberInList(theCurrentItem)`\n14. ` if theLowValue is less than theLowestNumber then`\n15. ` set theLowestNumber to theLowValue`\n16. ` end if`\n17. ` end if`\n18. ` end repeat`\n19. ` return theLowestNumber`\n20. `end getLowestNumberInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20getLowestNumberInList%28list%29%20%7B%0A%20%20%20%20var%20lowestNumber%20%3D%20undefined%0A%20%20%20%20for%20%28var%20item%20of%20list%29%20%7B%0A%20%20%20%20%20%20%20%20var%20number%20%3D%20undefined%0A%20%20%20%20%20%20%20%20if%20%28item.constructor%20%3D%3D%3D%20Number%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20number%20%3D%20item%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20else%20if%20%28item.constructor%20%3D%3D%3D%20Array%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20number%20%3D%20getLowestNumberInList%28item%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20if%20%28number%20!%3D%20undefined%20%26%26%20%28lowestNumber%20%3D%3D%3D%20undefined%20%7C%7C%20number%20%3C%20lowestNumber%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20lowestNumber%20%3D%20number%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20lowestNumber%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW86\"></a>\n**Listing 21-38**JavaScript: Function that determines the lowest numeric value in a list of items\n\n1. `function getLowestNumberInList(list) {`\n2. ` var lowestNumber = undefined`\n3. ` for (var item of list) {`\n4. ` var number = undefined`\n5. ` if (item.constructor === Number) {`\n6. ` number = item`\n7. ` }`\n8. ` else if (item.constructor === Array) {`\n9. ` number = getLowestNumberInList(item)`\n10. ` }`\n11. ` if (number != undefined && (lowestNumber === undefined || number &lt; lowestNumber)) {`\n12. ` lowestNumber = number`\n13. ` }`\n14. ` }`\n15. ` return lowestNumber`\n16. `}`\n\nListing 21-39 and Listing 21-40 show how to call the handlers in Listing 21-37 and Listing 21-38 for a list containing a mixture of numbers and strings.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%7B-3.25%2C%2023%2C%202345%2C%20%22sid%22%2C%203%2C%2067%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW32\"></a>\n**Listing 21-39**AppleScript: Calling a handler to determine the lowest numeric value in a list of numbers and strings\n\n1. `getLowestNumberInList({-3.25, 23, 2345, \"sid\", 3, 67})`\n2. `--&gt; Result: -3.25`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%5B-3.25%2C%2023%2C%202345%2C%20%22sid%22%2C%203%2C%2067%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW87\"></a>\n**Listing 21-40**JavaScript: Calling a function to determine the lowest numeric value in a list of strings\n\n1. `getLowestNumberInList([-3.25, 23, 2345, \"sid\", 3, 67])`\n2. `// Result: -3.25`\n\nListing 21-41 and Listing 21-42 show how to call the handlers in Listing 21-37 and Listing 21-38 for a list containing a mixture of numbers, strings, booleans, and lists.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%7B-3.25%2C%2023%2C%20%7B-22%2C%2078695%2C%20%22Sal%22%7D%2C%202345%2C%20true%2C%20%22sid%22%2C%203%2C%2067%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW33\"></a>\n**Listing 21-41**AppleScript: Calling a handler to determine the lowest numeric value in a list of different value types\n\n1. `getLowestNumberInList({-3.25, 23, {-22, 78695, \"Sal\"}, 2345, true, \"sid\", 3, 67})`\n2. `--&gt; Result: -22`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%5B-3.25%2C%2023%2C%20%5B-22%2C%2078695%2C%20%22bob%22%5D%2C%202345%2C%20true%2C%20%22sid%22%2C%203%2C%2067%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW88\"></a>\n**Listing 21-42**JavaScript: Calling a function to determine the lowest numeric value in a list of different value types\n\n1. `getLowestNumberInList([-3.25, 23, [-22, 78695, \"bob\"], 2345, true, \"sid\", 3, 67])`\n2. `// Result: -22`\n\nListing 21-43 and Listing 21-44 show how to call the handlers in Listing 21-37 and Listing 21-38 for a list containing only strings.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%7B%22this%22%2C%20%22list%22%2C%20%22contains%22%2C%20%22only%22%2C%20%22text%22%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW34\"></a>\n**Listing 21-43**AppleScript: Calling a handler to determine the lowest numeric value in a list of strings\n\n1. `getLowestNumberInList({\"this\", \"list\", \"contains\", \"only\", \"text\"})`\n2. `--&gt; Result: false`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=getLowestNumberInList%28%5B%22this%22%2C%20%22list%22%2C%20%22contains%22%2C%20%22only%22%2C%20%22text%22%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW89\"></a>\n**Listing 21-44**JavaScript: Calling a function to determine the lowest numeric value in a list of strings\n\n1. `getLowestNumberInList([\"this\", \"list\", \"contains\", \"only\", \"text\"])`\n2. `// Result: undefined`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW5\"></a>\n\n### Inserting Items into a List\n\nThe handlers in Listing 21-45 and Listing 21-46 insert an item into a list. Provide the item to insert, the list, and the position where the item should be inserted. Note that position can be specified in relation to the end of the list by using a negative number.\n\n> **Note**\n>\n>\n> In JavaScript, the `Array` class has built-in methods—`unshift` (inserts at the beginning), `splice` (inserts at a specific position), and `push` (inserts at the end)—for inserting items into a list, requiring less custom scripting than is necessary in AppleScript.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20insertItemInList%28theItem%2C%20theList%2C%20thePosition%29%0A%20%20%20%20set%20theListCount%20to%20length%20of%20theList%0A%20%20%20%20if%20thePosition%20is%200%20then%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20else%20if%20thePosition%20is%20less%20than%200%20then%0A%20%20%20%20%20%20%20%20if%20%28thePosition%20*%20-1%29%20is%20greater%20than%20theListCount%20%2B%201%20then%20return%20false%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20if%20thePosition%20is%20greater%20than%20theListCount%20%2B%201%20then%20return%20false%0A%20%20%20%20end%20if%0A%20%20%20%20if%20thePosition%20is%20less%20than%200%20then%0A%20%20%20%20%20%20%20%20if%20%28thePosition%20*%20-1%29%20is%20theListCount%20%2B%201%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20beginning%20of%20theList%20to%20theItem%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theList%20to%20reverse%20of%20theList%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20thePosition%20to%20%28thePosition%20*%20-1%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20thePosition%20is%201%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20beginning%20of%20theList%20to%20theItem%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20if%20thePosition%20is%20%28theListCount%20%2B%201%29%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20end%20of%20theList%20to%20theItem%0A%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theList%20to%20%28items%201%20thru%20%28thePosition%20-%201%29%20of%20theList%29%20%26%20theItem%20%26%20%28items%20thePosition%20thru%20-1%20of%20theList%29%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theList%20to%20reverse%20of%20theList%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20if%20thePosition%20is%201%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20beginning%20of%20theList%20to%20theItem%0A%20%20%20%20%20%20%20%20else%20if%20thePosition%20is%20%28theListCount%20%2B%201%29%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20end%20of%20theList%20to%20theItem%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theList%20to%20%28items%201%20thru%20%28thePosition%20-%201%29%20of%20theList%29%20%26%20theItem%20%26%20%28items%20thePosition%20thru%20-1%20of%20theList%29%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20if%0A%20%20%20%20return%20theList%0Aend%20insertItemInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW35\"></a>\n**Listing 21-45**AppleScript: Handler that inserts an item into a list\n\n1. `on insertItemInList(theItem, theList, thePosition)`\n2. ` set theListCount to length of theList`\n3. ` if thePosition is 0 then`\n4. ` return false`\n5. ` else if thePosition is less than 0 then`\n6. ` if (thePosition * -1) is greater than theListCount + 1 then return false`\n7. ` else`\n8. ` if thePosition is greater than theListCount + 1 then return false`\n9. ` end if`\n10. ` if thePosition is less than 0 then`\n11. ` if (thePosition * -1) is theListCount + 1 then`\n12. ` set beginning of theList to theItem`\n13. ` else`\n14. ` set theList to reverse of theList`\n15. ` set thePosition to (thePosition * -1)`\n16. ` if thePosition is 1 then`\n17. ` set beginning of theList to theItem`\n18. ` else if thePosition is (theListCount + 1) then`\n19. ` set end of theList to theItem`\n20. ` else`\n21. ` set theList to (items 1 thru (thePosition - 1) of theList) & theItem & (items thePosition thru -1 of theList)`\n22. ` end if`\n23. ` set theList to reverse of theList`\n24. ` end if`\n25. ` else`\n26. ` if thePosition is 1 then`\n27. ` set beginning of theList to theItem`\n28. ` else if thePosition is (theListCount + 1) then`\n29. ` set end of theList to theItem`\n30. ` else`\n31. ` set theList to (items 1 thru (thePosition - 1) of theList) & theItem & (items thePosition thru -1 of theList)`\n32. ` end if`\n33. ` end if`\n34. ` return theList`\n35. `end insertItemInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20insertItemInArray%28item%2C%20array%2C%20position%29%20%7B%0A%20%20%20%20var%20arrayCount%20%3D%20array.length%0A%20%20%20%20if%20%28Math.abs%28position%29%20%3E%20arrayCount%29%20%7B%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20%7D%0A%20%20%20else%20if%20%28position%20%3D%3D%3D%200%29%20%7B%0A%20%20%20%20%20%20%20%20array.unshift%28item%29%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28position%20%3C%20arrayCount%29%20%7B%0A%20%20%20%20%20%20%20%20array.splice%28position%2C%200%2C%20item%29%0A%20%20%20%20%7D%0A%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20array.push%28item%29%0A%20%20%20%20%7D%0A%20%20%20%20return%20array%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW69\"></a>\n**Listing 21-46**JavaScript: Function that inserts an item into an array\n\n1. `function insertItemInArray(item, array, position) {`\n2. ` var arrayCount = array.length`\n3. ` if (Math.abs(position) &gt; arrayCount) {`\n4. ` return false`\n5. ` }`\n6. ` else if (position === 0) {`\n7. ` array.unshift(item)`\n8. ` }`\n9. ` else if (position &lt; arrayCount) {`\n10. ` array.splice(position, 0, item)`\n11. ` }`\n12. ` else {`\n13. ` array.push(item)`\n14. ` }`\n15. ` return array`\n16. `}`\n\nListing 21-47 and Listing 21-48 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert a single item into a list at a specific position.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%22Jen%22%2C%20theList%2C%203%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW36\"></a>\n**Listing 21-47**AppleScript: Calling a handler to insert a single item at a specific position in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList(\"Jen\", theList, 3)`\n3. `--&gt; Result: {\"Sal\", \"Ben\", \"Jen\", \"David\", \"Chris\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%20%3D%20insertItemInArray%28%22Jen%22%2C%20array%2C%202%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW70\"></a>\n**Listing 21-48**JavaScript: Calling a function to insert a single item at a specific position in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array = insertItemInArray(\"Jen\", array, 2)`\n3. `// Result = [\"Sal\", \"Ben\", \"Jen\", \"David\", \"Chris\"]`\n\nListing 21-49 and Listing 21-50 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert multiple items into a list at a specific position.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%7B%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%7D%2C%20theList%2C%203%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW37\"></a>\n**Listing 21-49**AppleScript: Calling a handler to insert multiple items at a specific position in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList({\"Lizzie\", \"Maddie\", \"Lillie\"}, theList, 3)`\n3. `--&gt; Result: {\"Sal\", \"Ben\", \"Lizzie\", \"Maddie\", \"Lillie\", \"David\", \"Chris\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Avar%20items%20%3D%20%5B%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%5D%0Afor%20%28var%20item%20of%20items%29%20%7B%0A%20%20%20%20array%20%3D%20insertItemInArray%28item%2C%20array%2C%202%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW71\"></a>\n**Listing 21-50**JavaScript: Calling a function to insert multiple items at a specific position in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `var items = [\"Lizzie\", \"Maddie\", \"Lillie\"]`\n3. `for (var item of items) {`\n4. ` array = insertItemInArray(item, array, 2)`\n5. `}`\n6. `// Result = [\"Sal\", \"Ben\", \"Lillie\", \"Maddie\", \"Lizzie\", \"David\", \"Chris\"]`\n\nListing 21-51 and Listing 21-52 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert a list into a list at a specific position.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%7B%7B%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%7D%7D%2C%20theList%2C%203%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW38\"></a>\n**Listing 21-51**AppleScript: Calling a handler to insert a list at a specific position in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList({{\"Lizzie\", \"Maddie\", \"Lillie\"}}, theList, 3)`\n3. `--&gt; Result: {\"Sal\", \"Ben\", {\"Lizzie\", \"Maddie\", \"Lillie\"}, \"David\", \"Chris\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%20%3D%20insertItemInArray%28%5B%22Lizzie%22%2C%20%22Maddie%22%2C%20%22Lillie%22%5D%2C%20array%2C%202%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW72\"></a>\n**Listing 21-52**JavaScript: Calling a function to insert a list at a specific position in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array = insertItemInArray([\"Lizzie\", \"Maddie\", \"Lillie\"], array, 2)`\n3. `// Result = [\"Sal\", \"Ben\", [\"Lizzie\", \"Maddie\", \"Lillie\"], \"David\", \"Chris\"]`\n\nListing 21-53 and Listing 21-54 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert a single item at the end of a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%22Jen%22%2C%20theList%2C%20-1%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW39\"></a>\n**Listing 21-53**AppleScript: Calling a handler to insert a single item at the end of a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList(\"Jen\", theList, -1)`\n3. `--&gt; {\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%20%3D%20insertItemInArray%28%22Jen%22%2C%20array%2C%20array.length%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW73\"></a>\n**Listing 21-54**JavaScript: Calling a function to insert a single item at the end of an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array = insertItemInArray(\"Jen\", array, array.length)`\n3. `// Result = [\"Sal\", \"Ben\", \"David\", \"Chris\", \"Jen\"]`\n\nListing 21-55 and Listing 21-56 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert a single item at the second-to-last position in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%22Wanda%22%2C%20theList%2C%20-2%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW40\"></a>\n**Listing 21-55**AppleScript: Calling a handler to insert a single item at the second-to-last position in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList(\"Wanda\", theList, -2)`\n3. `--&gt; {\"Sal\", \"Sue\", \"Bob\", \"Wanda\", \"Carl\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%20%3D%20insertItemInArray%28%22Jen%22%2C%20array%2C%20-1%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW74\"></a>\n**Listing 21-56**JavaScript: Calling a function to insert a single item at the second-to-last position of an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array = insertItemInArray(\"Jen\", array, -1)`\n3. `// Result = [\"Sal\", \"Ben\", \"David\", \"Jen\", \"Chris\"]`\n\nListing 21-57 and Listing 21-58 show how to call the handlers in Listing 21-45 and Listing 21-46 to insert a single item at a nonexistent position in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AinsertItemInList%28%22Jen%22%2C%20theList%2C%2015%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW41\"></a>\n**Listing 21-57**AppleScript: Calling a handler to insert a single item at a position that doesn’t exist in a list\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `insertItemInList(\"Jen\", theList, 15)`\n3. `--&gt; Result: false`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%20%3D%20insertItemInArray%28%22Jen%22%2C%20array%2C%2014%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW75\"></a>\n**Listing 21-58**JavaScript: Calling a function to insert a single item at a position that doesn’t exist in an array\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array = insertItemInArray(\"Jen\", array, 14)`\n3. `// Result = false`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW6\"></a>\n\n### Replacing Items in a List\n\nYou can replace an item in a list using the syntax shown in Listing 21-59 and Listing 21-60 if you know the position of the item you want to replace.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0Aset%20item%203%20of%20theList%20to%20%22Wanda%22%0Areturn%20theList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW42\"></a>\n**Listing 21-59**AppleScript: Replacing a specific item in a list based on position\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `set item 3 of theList to \"Wanda\"`\n3. `return theList`\n4. `--&gt; Result: {\"Sal\", \"Sue\", \"Wanda\", \"Carl\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray%5B2%5D%20%3D%20%22Wanda%22%0Aarray)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW78\"></a>\n**Listing 21-60**JavaScript: Replacing a specific item in an array based on position\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array[2] = \"Wanda\"`\n3. `array`\n4. `// Result: [\"Sal\", \"Ben\", \"Wanda\", \"Chris\"]`\n\nThe handlers in Listing 21-61 and Listing 21-62 can be used to replace an item in a list when you don’t know its position. Provide the item you want to replace, the list, the replacement item, and specify whether to replace all instances of the item, or just the first one.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20replaceItemInList%28theItem%2C%20theList%2C%20theReplacementItem%2C%20replaceAll%29%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20the%20count%20of%20theList%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theList%0A%20%20%20%20%20%20%20%20if%20theCurrentItem%20is%20theItem%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20item%20a%20of%20theList%20to%20theReplacementItem%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20replaceAll%20is%20false%20then%20return%20theList%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theList%0Aend%20replaceItemInList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW43\"></a>\n**Listing 21-61**AppleScript: Handler that replaces items in a list\n\n1. `on replaceItemInList(theItem, theList, theReplacementItem, replaceAll)`\n2. ` repeat with a from 1 to the count of theList`\n3. ` set theCurrentItem to item a of theList`\n4. ` if theCurrentItem is theItem then`\n5. ` set item a of theList to theReplacementItem`\n6. ` if replaceAll is false then return theList`\n7. ` end if`\n8. ` end repeat`\n9. ` return theList`\n10. `end replaceItemInList`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20replaceItemInArray%28item%2C%20array%2C%20replacementItem%2C%20replaceAll%29%20%7B%0A%20%20%20%20var%20arrayLength%20%3D%20array.length%0A%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20arrayLength%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20var%20currentArrayItem%20%3D%20array%5Bi%5D%0A%20%20%20%20%20%20%20%20if%20%28currentArrayItem%20%3D%3D%3D%20item%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20array.splice%28i%2C%201%2C%20replacementItem%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28!replaceAll%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%20array%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW79\"></a>\n**Listing 21-62**JavaScript: Function that replaces items in an array\n\n1. `function replaceItemInArray(item, array, replacementItem, replaceAll) {`\n2. ` var arrayLength = array.length`\n3. ` for (var i = 0; i &lt; arrayLength; i++) {`\n4. ` var currentArrayItem = array[i]`\n5. ` if (currentArrayItem === item) {`\n6. ` array.splice(i, 1, replacementItem)`\n7. ` if (!replaceAll) {`\n8. ` break`\n9. ` }`\n10. ` }`\n11. ` }`\n12. ` return array`\n13. `}`\n\nListing 21-63 and Listing 21-64 show how to call the handlers in Listing 21-61 and Listing 21-62.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Jen%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%7D%0AreplaceItemInList%28%22Jen%22%2C%20theList%2C%20%22Lizzie%22%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW44\"></a>\n**Listing 21-63**AppleScript: Calling a handler to replace items in a list\n\n1. `set theList to {\"Sal\", \"Jen\", \"Ben\", \"David\", \"Chris\", \"Jen\"}`\n2. `replaceItemInList(\"Jen\", theList, \"Lizzie\", true)`\n3. `--&gt; {\"Sal\", \"Lizzie\", \"Ben\", \"David\", \"Chris\", \"Lizzie\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Jen%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%2C%20%22Jen%22%5D%0AreplaceItemInArray%28%22Jen%22%2C%20array%2C%20%22Lizzie%22%2C%20true%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW80\"></a>\n**Listing 21-64**JavaScript: Calling a function to replace items in an array\n\n1. `var array = [\"Sal\", \"Jen\", \"Ben\", \"David\", \"Chris\", \"Jen\"]`\n2. `replaceItemInArray(\"Jen\", array, \"Lizzie\", true)`\n3. `// Result: [\"Sal\", \"Lizzie\", \"Ben\", \"David\", \"Chris\", \"Lizzie\"]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW10\"></a>\n\n### Sorting a List\n\nThe handler in Listing 21-65 sorts a list of strings or numbers in AppleScript.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20sortList%28theList%29%0A%20%20%20%20set%20theIndexList%20to%20%7B%7D%0A%20%20%20%20set%20theSortedList%20to%20%7B%7D%0A%20%20%20%20repeat%20%28length%20of%20theList%29%20times%0A%20%20%20%20%20%20%20%20set%20theLowItem%20to%20%22%22%0A%20%20%20%20%20%20%20%20repeat%20with%20a%20from%201%20to%20%28length%20of%20theList%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20a%20is%20not%20in%20theIndexList%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theList%20as%20text%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theLowItem%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowItem%20to%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowItemIndex%20to%20a%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%20if%20theCurrentItem%20comes%20before%20theLowItem%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowItem%20to%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theLowItemIndex%20to%20a%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20%20%20%20%20set%20end%20of%20theSortedList%20to%20theLowItem%0A%20%20%20%20%20%20%20%20set%20end%20of%20theIndexList%20to%20theLowItemIndex%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theSortedList%0Aend%20sortList)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW45\"></a>\n**Listing 21-65**AppleScript: Handler that sorts a list of strings\n\n1. `on sortList(theList)`\n2. ` set theIndexList to {}`\n3. ` set theSortedList to {}`\n4. ` repeat (length of theList) times`\n5. ` set theLowItem to \"\"`\n6. ` repeat with a from 1 to (length of theList)`\n7. ` if a is not in theIndexList then`\n8. ` set theCurrentItem to item a of theList as text`\n9. ` if theLowItem is \"\" then`\n10. ` set theLowItem to theCurrentItem`\n11. ` set theLowItemIndex to a`\n12. ` else if theCurrentItem comes before theLowItem then`\n13. ` set theLowItem to theCurrentItem`\n14. ` set theLowItemIndex to a`\n15. ` end if`\n16. ` end if`\n17. ` end repeat`\n18. ` set end of theSortedList to theLowItem`\n19. ` set end of theIndexList to theLowItemIndex`\n20. ` end repeat`\n21. ` return theSortedList`\n22. `end sortList`\n\nListing 21-66 shows how to call the handler in Listing 21-65.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0AsortList%28theList%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW46\"></a>\n**Listing 21-66**AppleScript: Calling a handler to sort a list of strings\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `sortList(theList)`\n3. `--&gt; Result: {\"Ben\", \"Chris\", \"David\", \"Sal\"}`\n\nTo perform a reverse (descending) sort, use the reverse command, as shown in Listing 21-67.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%7D%0Areverse%20of%20sortList%28theList%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW47\"></a>\n**Listing 21-67**AppleScript: Calling a handler to sort a list of strings in reverse order\n\n1. `set theList to {\"Sal\", \"Ben\", \"David\", \"Chris\"}`\n2. `reverse of sortList(theList)`\n3. `--&gt; Result: {\"Sal\", \"David\", \"Chris\", \"Ben\"}`\n\nIn JavaScript, the `Array` object has a `sort` method, which sorts the array’s items. See Listing 21-68.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray.sort%28%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW76\"></a>\n**Listing 21-68**JavaScript: Sorting an array of strings\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array.sort()`\n3. `// Result: [\"Ben\", \"Chris\", \"David\", \"Sal\"]`\n\nAs in AppleScript, a sorted JavaScript array can be reversed, as shown in Listing 21-69.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20array%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22David%22%2C%20%22Chris%22%5D%0Aarray.sort%28%29%0Aarray.reverse%28%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW77\"></a>\n**Listing 21-69**JavaScript: Sorting an array of strings in reverse order\n\n1. `var array = [\"Sal\", \"Ben\", \"David\", \"Chris\"]`\n2. `array.sort()`\n3. `array.reverse()`\n4. `// Result: [\"Sal\", \"David\", \"Chris\", \"Ben\"]`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSArray` class to convert a list of strings into a single string. The handlers in Listing 21-70 and Listing 21-71 demonstrate how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20sortList%28theList%29%0A%20%20%20%20set%20theArray%20to%20arrayWithArray_%28theList%29%20of%20NSArray%20of%20current%20application%0A%20%20%20%20set%20theSortedList%20to%20sortedArrayUsingSelector_%28%22localizedStandardCompare%3A%22%29%20of%20theArray%0A%20%20%20%20return%20%28theSortedList%20as%20list%29%0Aend%20sortList)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW49\"></a>\n> **Listing 21-70**AppleScriptObjC: Handler that sorts a list of strings\n>\n> 1. `on sortList(theList)`\n> 2. ` set theArray to arrayWithArray_(theList) of NSArray of current application`\n> 3. ` set theSortedList to sortedArrayUsingSelector_(\"localizedStandardCompare:\") of theArray`\n> 4. ` return (theSortedList as list)`\n> 5. `end sortList`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20sortArray%28array%29%20%7B%0A%20%20%20%20array%20%3D%20%24%28array%29%0A%20%20%20%20var%20sortedArray%20%3D%20array.sortedArrayUsingSelector%28%22localizedStandardCompare%3A%22%29%0A%20%20%20%20return%20ObjC.deepUnwrap%28sortedArray%29%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH48-SW81\"></a>\n> **Listing 21-71**JavaScriptObjC: Function that sorts an array of strings\n>\n> 1. `function sortArray(array) {`\n> 2. ` array = $(array)`\n> 3. ` var sortedArray = array.sortedArrayUsingSelector(\"localizedStandardCompare:\")`\n> 4. ` return ObjC.deepUnwrap(sortedArray)`\n> 5. `}`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateListsofItems.html", "sha256": "d25c2deb0811f0ecaa137f96444620e1f1e5750273d23c7daebd94e9bfb36e1e", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ManipulateNumbers.md", "title": "Manipulating Numbers", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH47\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW1\"></a>\n\n## Manipulating Numbers\n\nWorking with and manipulating numbers is an important and regular occurrence in scripting. Basic mathematic operations—such as addition, subtraction, multiplication, and division—are language-level features, but some other commonly performed operations require custom scripting.\n\n> **Note**\n>\n>\n> AppleScript’s language-level mathematical operators are listed in [Operators Reference](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_operators.html#//apple_ref/doc/uid/TP40000983-CH5g) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n>\n> JavaScript’s language-level arithmetic operators can be found [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators). JavaScript also includes a built-in `Math` object, which provides a variety of properties and methods for performing common mathematical operations. Information about this object can be found [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math). Several of the JavaScript examples in this chapter call the `Math.abs()` method to get the absolute value of a number. AppleScript does not have an equivalent method.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW3\"></a>\n\n### Converting a Number to a String\n\nScripts often need to convert numbers to string format to display information to the user or populate a document. In AppleScript, this conversion can be accomplished most of the time simply by using the coercion operator `as`, as shown in Listing 20-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=12%20as%20string)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW4\"></a>\n**Listing 20-1**AppleScript: Coercing a number to a string\n\n1. `12 as string`\n2. `--&gt; Result: \"12\"`\n\nIn JavaScript, the same conversion can be accomplished by calling the `toString()` method, as shown in Listing 20-2.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=num%20%3D%2012%0Anum.toString%28%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW32\"></a>\n**Listing 20-2**JavaScript: Coercing a number to a string\n\n1. `num = 12`\n2. `num.toString()`\n3. `// Result: \"12\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW5\"></a>\n\n### Converting a Long Number to a String\n\nIn AppleScript, long numeric values are displayed in scientific notation. For example, `1234000000` is displayed by a script as `1.234E+9`. When this value is coerced to a string, it becomes: `\"1.234E+9\"`. The handler in Listing 20-3 converts a number, regardless of length, to a string of numeric characters instead of a numeric string in scientific notation.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertNumberToString%28theNumber%29%0A%20%20%20%20set%20theNumberString%20to%20theNumber%20as%20string%0A%20%20%20%20set%20theOffset%20to%20offset%20of%20%22E%22%20in%20theNumberString%0A%20%20%20%20if%20theOffset%20%3D%200%20then%20return%20theNumberString%0A%20%20%20%20set%20thePrefix%20to%20text%201%20thru%20%28theOffset%20-%201%29%20of%20theNumberString%0A%20%20%20%20set%20theConvertedNumberPrefix%20to%20%22%22%0A%20%20%20%20if%20thePrefix%20begins%20with%20%22-%22%20then%0A%20%20%20%20%20%20%20%20set%20theConvertedNumberPrefix%20to%20%22-%22%0A%20%20%20%20%20%20%20%20if%20thePrefix%20%3D%20%22-%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20thePrefix%20to%20%22%22%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20thePrefix%20to%20text%202%20thru%20-1%20of%20thePrefix%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theDecimalAdjustment%20to%20%28text%20%28theOffset%20%2B%201%29%20thru%20-1%20of%20theNumberString%29%20as%20number%0A%20%20%20%20set%20isNegativeDecimalAdjustment%20to%20theDecimalAdjustment%20is%20less%20than%200%0A%20%20%20%20if%20isNegativeDecimalAdjustment%20then%0A%20%20%20%20%20%20%20%20set%20thePrefix%20to%20%28reverse%20of%20%28characters%20of%20thePrefix%29%29%20as%20string%0A%20%20%20%20%20%20%20%20set%20theDecimalAdjustment%20to%20-theDecimalAdjustment%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theDecimalOffset%20to%20offset%20of%20%22.%22%20in%20thePrefix%0A%20%20%20%20if%20theDecimalOffset%20%3D%200%20then%0A%20%20%20%20%20%20%20%20set%20theFirstPart%20to%20%22%22%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20set%20theFirstPart%20to%20text%201%20thru%20%28theDecimalOffset%20-%201%29%20of%20thePrefix%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theSecondPart%20to%20text%20%28theDecimalOffset%20%2B%201%29%20thru%20-1%20of%20thePrefix%0A%20%20%20%20set%20theConvertedNumber%20to%20theFirstPart%0A%20%20%20%20set%20theRepeatCount%20to%20theDecimalAdjustment%0A%20%20%20%20if%20%28length%20of%20theSecondPart%29%20is%20greater%20than%20theRepeatCount%20then%20set%20theRepeatCount%20to%20length%20of%20theSecondPart%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20theRepeatCount%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theConvertedNumber%20to%20theConvertedNumber%20%26%20character%20a%20of%20theSecondPart%0A%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theConvertedNumber%20to%20theConvertedNumber%20%26%20%220%22%0A%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20%20%20%20%20if%20a%20%3D%20theDecimalAdjustment%20and%20a%20is%20not%20equal%20to%20%28length%20of%20theSecondPart%29%20then%20set%20theConvertedNumber%20to%20theConvertedNumber%20%26%20%22.%22%0A%20%20%20%20end%20repeat%0A%20%20%20%20if%20theConvertedNumber%20ends%20with%20%22.%22%20then%20set%20theConvertedNumber%20to%20theConvertedNumber%20%26%20%220%22%0A%20%20%20%20if%20isNegativeDecimalAdjustment%20then%20set%20theConvertedNumber%20to%20%28reverse%20of%20%28characters%20of%20theConvertedNumber%29%29%20as%20string%0A%20%20%20%20return%20theConvertedNumberPrefix%20%26%20theConvertedNumber%0Aend%20convertNumberToString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW6\"></a>\n**Listing 20-3**AppleScript: Handler that converts a number to a string, regardless of length\n\n1. `on convertNumberToString(theNumber)`\n2. ` set theNumberString to theNumber as string`\n3. ` set theOffset to offset of \"E\" in theNumberString`\n4. ` if theOffset = 0 then return theNumberString`\n5. ` set thePrefix to text 1 thru (theOffset - 1) of theNumberString`\n6. ` set theConvertedNumberPrefix to \"\"`\n7. ` if thePrefix begins with \"-\" then`\n8. ` set theConvertedNumberPrefix to \"-\"`\n9. ` if thePrefix = \"-\" then`\n10. ` set thePrefix to \"\"`\n11. ` else`\n12. ` set thePrefix to text 2 thru -1 of thePrefix`\n13. ` end if`\n14. ` end if`\n15. ` set theDecimalAdjustment to (text (theOffset + 1) thru -1 of theNumberString) as number`\n16. ` set isNegativeDecimalAdjustment to theDecimalAdjustment is less than 0`\n17. ` if isNegativeDecimalAdjustment then`\n18. ` set thePrefix to (reverse of (characters of thePrefix)) as string`\n19. ` set theDecimalAdjustment to -theDecimalAdjustment`\n20. ` end if`\n21. ` set theDecimalOffset to offset of \".\" in thePrefix`\n22. ` if theDecimalOffset = 0 then`\n23. ` set theFirstPart to \"\"`\n24. ` else`\n25. ` set theFirstPart to text 1 thru (theDecimalOffset - 1) of thePrefix`\n26. ` end if`\n27. ` set theSecondPart to text (theDecimalOffset + 1) thru -1 of thePrefix`\n28. ` set theConvertedNumber to theFirstPart`\n29. ` set theRepeatCount to theDecimalAdjustment`\n30. ` if (length of theSecondPart) is greater than theRepeatCount then set theRepeatCount to length of theSecondPart`\n31. ` repeat with a from 1 to theRepeatCount`\n32. ` try`\n33. ` set theConvertedNumber to theConvertedNumber & character a of theSecondPart`\n34. ` on error`\n35. ` set theConvertedNumber to theConvertedNumber & \"0\"`\n36. ` end try`\n37. ` if a = theDecimalAdjustment and a is not equal to (length of theSecondPart) then set theConvertedNumber to theConvertedNumber & \".\"`\n38. ` end repeat if theConvertedNumber ends with \".\" then set theConvertedNumber to theConvertedNumber & \"0\"`\n39. ` if isNegativeDecimalAdjustment then set theConvertedNumber to (reverse of (characters of theConvertedNumber)) as string`\n40. ` return theConvertedNumberPrefix & theConvertedNumber`\n41. `end convertNumberToString`\n\nListing 20-3 shows how to call the handler in Listing 20-3.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=convertNumberToString%288.72124243234E%2B11%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW7\"></a>\n**Listing 20-4**AppleScript: Calling a handler to convert a long number to a string\n\n1. `convertNumberToString(8.72124243234E+11)`\n2. `--&gt; Result: \"872124243234\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW18\"></a>\n\n### Adding a Descriptive Suffix to a Number\n\nThe handlers Listing 20-5 and Listing 20-6 convert a number to a string and appends a suffix of `\"st\"`, `\"nd\"`, `\"rd\"`, or `\"th\"`, resulting in strings such as `\"1st\"`, `\"2nd\"`, `\"3rd\"`, and `\"4th\"`.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20addDescriptiveSuffixToNumber%28theNumber%29%0A%20%20%20%20--%20Determine%20the%20suffix%20to%20add%2C%20based%20on%20the%20last%20two%20digits%0A%20%20%20%20set%20theLastDigit%20to%20theNumber%20mod%2010%0A%20%20%20%20set%20theLastTwoDigits%20to%20theNumber%20mod%20100%0A%20%20%20%20set%20theSuffix%20to%20%22th%22%0A%20%20%20%20if%20%7B1%2C%20-1%7D%20contains%20theLastDigit%20and%20%7B11%2C%20-11%7D%20does%20not%20contain%20theLastTwoDigits%20then%0A%20%20%20%20%20%20%20%20set%20theSuffix%20to%20%22st%22%0A%20%20%20%20else%20if%20%7B2%2C%20-2%7D%20contains%20theLastDigit%20and%20%7B12%2C%20-12%7D%20does%20not%20contain%20theLastTwoDigits%20then%0A%20%20%20%20%20%20%20%20set%20theSuffix%20to%20%22nd%22%0A%20%20%20%20else%20if%20%7B3%2C%20-3%7D%20contains%20theLastDigit%20and%20%7B13%2C%20-13%7D%20does%20not%20contain%20theLastTwoDigits%20then%0A%20%20%20%20%20%20%20%20set%20theSuffix%20to%20%22rd%22%0A%20%20%20%20end%20if%0A%0A%20%20%20%20--%20Return%20the%20number%20and%20suffix%0A%20%20%20%20return%20%28theNumber%20as%20string%29%20%26%20theSuffix%0Aend%20addDescriptiveSuffixToNumber)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW19\"></a>\n**Listing 20-5**AppleScript: Handler that adds a descriptive suffix to a number\n\n1. `on addDescriptiveSuffixToNumber(theNumber)`\n2. ` -- Determine the suffix to add, based on the last two digits`\n3. ` set theLastDigit to theNumber mod 10`\n4. ` set theLastTwoDigits to theNumber mod 100`\n5. ` set theSuffix to \"th\"`\n6. ` if {1, -1} contains theLastDigit and {11, -11} does not contain theLastTwoDigits then`\n7. ` set theSuffix to \"st\"`\n8. ` else if {2, -2} contains theLastDigit and {12, -12} does not contain theLastTwoDigits then`\n9. ` set theSuffix to \"nd\"`\n10. ` else if {3, -3} contains theLastDigit and {13, -13} does not contain theLastTwoDigits then`\n11. ` set theSuffix to \"rd\"`\n12. ` end if`\n14. ` -- Return the number and suffix`\n15. ` return (theNumber as string) & theSuffix`\n16. `end addDescriptiveSuffixToNumber`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20addDescriptiveSuffixToNumber%28num%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20number%20to%20absolute%20value%0A%20%20%20%20var%20integer%20%3D%20Math.abs%28num%29%0A%0A%20%20%20%20%2F%2F%20Determine%20the%20suffix%20to%20add%2C%20based%20on%20the%20last%20two%20digits%0A%20%20%20%20var%20suffix%20%3D%20%22th%22%0A%20%20%20%20var%20lastDigit%20%3D%20integer%20%25%2010%0A%20%20%20%20var%20lastTwoDigits%20%3D%20integer%20%25%20100%0A%20%20%20%20if%20%28lastDigit%20%3D%3D%3D%201%20%26%26%20lastTwoDigits%20!%3D%3D%2011%29%20%7B%0A%20%20%20%20%20%20%20%20suffix%20%3D%20%22st%22%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28lastDigit%20%3D%3D%3D%202%20%26%26%20lastTwoDigits%20!%3D%3D%2012%29%20%7B%0A%20%20%20%20%20%20%20%20suffix%20%3D%20%22nd%22%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28lastDigit%20%3D%3D%3D%203%20%26%26%20lastTwoDigits%20!%3D%3D%2013%29%20%7B%0A%20%20%20%20%20%20%20%20suffix%20%3D%20%22rd%22%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Return%20the%20number%20and%20suffix%0A%20%20%20%20return%20num.toString%28%29%20%2B%20suffix%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW24\"></a>\n**Listing 20-6**JavaScript: Function that adds a descriptive suffix to a number\n\n1. `function addDescriptiveSuffixToNumber(num) {`\n2. ` // Convert the number to absolute value`\n3. ` var integer = Math.abs(num)`\n5. ` // Determine the suffix to add, based on the last two digits`\n6. ` var suffix = \"th\"`\n7. ` var lastDigit = integer % 10`\n8. ` var lastTwoDigits = integer % 100`\n9. ` if (lastDigit === 1 && lastTwoDigits !== 11) {`\n10. ` suffix = \"st\"`\n11. ` }`\n12. ` else if (lastDigit === 2 && lastTwoDigits !== 12) {`\n13. ` suffix = \"nd\"`\n14. ` }`\n15. ` else if (lastDigit === 3 && lastTwoDigits !== 13) {`\n16. ` suffix = \"rd\"`\n17. ` }`\n19. ` // Return the number and suffix`\n20. ` return num.toString() + suffix`\n21. `}`\n\nListing 20-7 and Listing 20-8 show how to test the handlers in Listing 20-5 and Listing 20-6 by looping through a range of positive and negative numbers.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theTestResults%20to%20%22%22%0Arepeat%20with%20a%20from%20-10%20to%2010%0A%20%20%20%20set%20theTestResults%20to%20theTestResults%20%26%20addDescriptiveSuffixToNumber%28a%29%0A%20%20%20%20if%20a%20is%20less%20than%2010%20then%20set%20theTestResults%20to%20theTestResults%20%26%20%22%2C%20%22%0Aend%20repeat%0AtheTestResults)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW20\"></a>\n**Listing 20-7**AppleScript: Testing a handler that adds a descriptive suffix to a number\n\n1. `set theTestResults to \"\"`\n2. `repeat with a from -10 to 10`\n3. ` set theTestResults to theTestResults & addDescriptiveSuffixToNumber(a)`\n4. ` if a is less than 10 then set theTestResults to theTestResults & \", \"`\n5. `end repeat`\n6. `theTestResults`\n7. `--&gt; Result: \"-10th, -9th, -8th, -7th, -6th, -5th, -4th, -3rd, -2nd, -1st, 0, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20testResults%20%3D%20%22%22%0Afor%20%28var%20i%20%3D%20-10%3B%20i%20%3C%3D%2010%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20testResults%20%2B%3D%20addDescriptiveSuffixToNumber%28i%29%0A%20%20%20%20if%20%28i%20%3C%2010%29%20%7B%0A%20%20%20%20%20%20%20%20testResults%20%2B%3D%20%22%2C%20%22%0A%20%20%20%20%7D%0A%7D%0AtestResults)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW25\"></a>\n**Listing 20-8**JavaScript: Testing a function that adds a descriptive suffix to a number\n\n1. `var testResults = \"\"`\n2. `for (var i = -10; i &lt;= 10; i++) {`\n3. ` testResults += addDescriptiveSuffixToNumber(i)`\n4. ` if (i &lt; 10) {`\n5. ` testResults += \", \"`\n6. ` }`\n7. `}`\n8. `testResults`\n9. `// Result: \"-10th, -9th, -8th, -7th, -6th, -5th, -4th, -3rd, -2nd, -1st, 0th, 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th\"`\n\nListing 20-9 and Listing 20-10 show how to call the handlers in Listing 20-5 and Listing 20-6 to identify positions of items in a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePersonList%20to%20%7B%22Sal%22%2C%20%22Ben%22%2C%20%22Chris%22%2C%20%22David%22%7D%0Aset%20theListLength%20to%20length%20of%20thePersonList%0Arepeat%20with%20a%20from%201%20to%20theListLength%0A%20%20%20%20set%20theSuffixedNumber%20to%20addDescriptiveSuffixToNumber%28a%29%0A%20%20%20%20set%20thePerson%20to%20item%20a%20of%20thePersonList%0A%20%20%20%20display%20dialog%20%22The%20%22%20%26%20theSuffixedNumber%20%26%20%22%20person%20in%20list%20is%20%22%20%26%20thePerson%20%26%20%22.%22%0Aend%20repeat)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW21\"></a>\n**Listing 20-9**AppleScript: Example script that calls a handler to identify the descriptive numeric position of items in a list\n\n1. `set thePersonList to {\"Sal\", \"Ben\", \"Chris\", \"David\"}`\n2. `set theListLength to length of thePersonList`\n3. `repeat with a from 1 to theListLength`\n4. ` set theSuffixedNumber to addDescriptiveSuffixToNumber(a)`\n5. ` set thePerson to item a of thePersonList`\n6. ` display dialog \"The \" & theSuffixedNumber & \" person in list is \" & thePerson & \".\"`\n7. `end repeat`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20personList%20%3D%20%5B%22Sal%22%2C%20%22Ben%22%2C%20%22Chris%22%2C%20%22David%22%5D%0Avar%20listLength%20%3D%20personList.length%0Afor%20%28var%20i%20%3D%200%3B%20i%20%3C%20listLength%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20var%20suffixedNum%20%3D%20addDescriptiveSuffixToNumber%28i%20%2B%201%29%0A%20%20%20%20var%20person%20%3D%20personList%5Bi%5D%0A%20%20%20%20app.displayDialog%28%60The%20%24%7BsuffixedNum%7D%20person%20in%20list%20is%20%24%7Bperson%7D.%60%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW27\"></a>\n**Listing 20-10**JavaScript: Example script that calls a function to identify the descriptive numeric position of items in a list\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var personList = [\"Sal\", \"Ben\", \"Chris\", \"David\"]`\n5. `var listLength = personList.length`\n6. `for (var i = 0; i &lt; listLength; i++) {`\n7. ` var suffixedNum = addDescriptiveSuffixToNumber(i + 1)`\n8. ` var person = personList[i]`\n9. ``  app.displayDialog(`The ${suffixedNum} person in list is ${person}.`) ``\n10. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW22\"></a>\n\n### Adding Leading Zeros to a Number\n\nThe handlers in Listing 20-11 and Listing 20-12 convert a number to a string and prepends it with leading zeros until it reaches a certain length. They accept two parameters—the number to add leading zeros to and the maximum number of leading zeros to add. For example, if the maximum number of leading zeros is set to `2`, the results range from `001` to `999`. If the maximum number of leading zeros is `3`, the results range from `0001` to `9999`, and so on.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20addLeadingZerosToNumber%28theNumber%2C%20theMaxLeadingZeroCount%29%0A%20%20%20%20--%20Determine%20if%20the%20number%20is%20negative%0A%20%20%20%20set%20isNegative%20to%20theNumber%20is%20less%20than%200%0A%0A%20%20%20%20--%20Determine%20when%20the%20maximum%20number%20of%20digits%20will%20be%20reached%0A%20%20%20%20set%20theThreshold%20to%20%2810%20%5E%20theMaxLeadingZeroCount%29%20as%20integer%0A%0A%20%20%20%20--%20If%20the%20number%20is%20shorter%20than%20the%20maximum%20number%20of%20digits%0A%20%20%20%20if%20theNumber%20is%20less%20than%20theThreshold%20then%0A%20%20%20%20%20%20%20%20--%20If%20the%20number%20is%20negative%2C%20convert%20it%20to%20positive%0A%20%20%20%20%20%20%20%20if%20isNegative%20%3D%20true%20then%20set%20theNumber%20to%20-theNumber%0A%0A%20%20%20%20%20%20%20%20--%20Add%20the%20zeros%20to%20the%20number%0A%20%20%20%20%20%20%20%20set%20theLeadingZeros%20to%20%22%22%0A%20%20%20%20%20%20%20%20set%20theDigitCount%20to%20length%20of%20%28%28theNumber%20div%201%29%20as%20string%29%0A%20%20%20%20%20%20%20%20set%20theCharacterCount%20to%20%28theMaxLeadingZeroCount%20%2B%201%29%20-%20theDigitCount%0A%20%20%20%20%20%20%20%20repeat%20theCharacterCount%20times%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theLeadingZeros%20to%20%28theLeadingZeros%20%26%20%220%22%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20repeat%0A%0A%20%20%20%20%20%20%20%20--%20Make%20the%20number%20negative%2C%20if%20it%20was%20previously%20negative%0A%20%20%20%20%20%20%20%20if%20isNegative%20%3D%20true%20then%20set%20theLeadingZeros%20to%20%22-%22%20%26%20theLeadingZeros%0A%0A%20%20%20%20%20%20%20%20--%20Return%20the%20prefixed%20number%0A%20%20%20%20%20%20%20%20return%20%28theLeadingZeros%20%26%20%28theNumber%20as%20text%29%29%20as%20string%0A%0A%20%20%20%20%20%20--%20If%20the%20number%20is%20greater%20than%20or%20equal%20to%20the%20maximum%20number%20of%20digits%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20--%20Return%20the%20original%20number%0A%20%20%20%20%20%20%20%20return%20theNumber%20as%20text%0A%20%20%20%20end%20if%0Aend%20addLeadingZerosToNumber)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW23\"></a>\n**Listing 20-11**AppleScript: Handler that adds leading zeros to a number\n\n1. `on addLeadingZerosToNumber(theNumber, theMaxLeadingZeroCount)`\n2. ` -- Determine if the number is negative`\n3. ` set isNegative to theNumber is less than 0`\n5. ` -- Determine when the maximum number of digits will be reached`\n6. ` set theThreshold to (10 ^ theMaxLeadingZeroCount) as integer`\n8. ` -- If the number is shorter than the maximum number of digits`\n9. ` if theNumber is less than theThreshold then`\n10. ` -- If the number is negative, convert it to positive`\n11. ` if isNegative = true then set theNumber to -theNumber`\n13. ` -- Add the zeros to the number`\n14. ` set theLeadingZeros to \"\"`\n15. ` set theDigitCount to length of ((theNumber div 1) as string)`\n16. ` set theCharacterCount to (theMaxLeadingZeroCount + 1) - theDigitCount`\n17. ` repeat theCharacterCount times`\n18. ` set theLeadingZeros to (theLeadingZeros & \"0\") as string`\n19. ` end repeat`\n21. ` -- Make the number negative, if it was previously negative`\n22. ` if isNegative = true then set theLeadingZeros to \"-\" & theLeadingZeros`\n24. ` -- Return the prefixed number`\n25. ` return (theLeadingZeros & (theNumber as text)) as string`\n27. ` -- If the number is greater than or equal to the maximum number of digits`\n28. ` else`\n29. ` -- Return the original number`\n30. ` return theNumber as text`\n31. ` end if`\n32. `end addLeadingZerosToNumber`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20addLeadingZerosToNumber%28num%2C%20maxLeadingZeroCount%29%20%7B%0A%20%20%20%20var%20leadingZeros%20%3D%20%22%22%0A%0A%20%20%20%20%2F%2F%20Convert%20the%20number%20to%20absolute%20value%0A%20%20%20%20var%20absNum%20%3D%20Math.abs%28num%29%0A%0A%20%20%20%20%2F%2F%20Determine%20when%20the%20maximum%20number%20of%20digits%20will%20be%20reached%0A%20%20%20%20var%20threshold%20%3D%20Math.pow%2810%2C%20maxLeadingZeroCount%29%0A%0A%20%20%20%20%2F%2F%20If%20the%20number%20is%20shorter%20than%20the%20maximum%20number%20of%20digits%0A%20%20%20%20if%20%28absNum%20%3C%20threshold%29%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Prepare%20a%20leading%20zeros%20string%0A%20%20%20%20%20%20%20%20var%20digitCount%20%3D%20Math.trunc%28absNum%29.toString%28%29.length%0A%20%20%20%20%20%20%20%20var%20charCount%20%3D%20maxLeadingZeroCount%20%2B%201%20-%20digitCount%0A%20%20%20%20%20%20%20%20for%20%28var%20i%20%3D%200%20%3B%20i%20%3C%20charCount%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20leadingZeros%20%2B%3D%20%220%22%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Add%20the%20zeros%20to%20the%20number%0A%20%20%20%20var%20result%20%3D%20%60%24%7BleadingZeros%7D%24%7BabsNum%7D%60%0A%0A%20%20%20%20%2F%2F%20Make%20the%20number%20negative%2C%20if%20it%20was%20previously%20negative%0A%20%20%20%20if%20%28num%20%3C%200%29%20%7B%0A%20%20%20%20%20%20%20%20result%20%3D%20%60-%24%7Bresult%7D%60%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20Return%20the%20prefixed%20number%0A%20%20%20%20return%20result%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW28\"></a>\n**Listing 20-12**JavaScript: Function that adds leading zeros to a number\n\n1. `function addLeadingZerosToNumber(num, maxLeadingZeroCount) {`\n2. ` var leadingZeros = \"\"`\n4. ` // Convert the number to absolute value`\n5. ` var absNum = Math.abs(num)`\n7. ` // Determine when the maximum number of digits will be reached`\n8. ` var threshold = Math.pow(10, maxLeadingZeroCount)`\n10. ` // If the number is shorter than the maximum number of digits`\n11. ` if (absNum &lt; threshold) {`\n12. ` // Prepare a leading zeros string`\n13. ` var digitCount = Math.trunc(absNum).toString().length`\n14. ` var charCount = maxLeadingZeroCount + 1 - digitCount`\n15. ` for (var i = 0 ; i &lt; charCount; i++) {`\n16. ` leadingZeros += \"0\"`\n17. ` }`\n18. ` }`\n20. ` // Add the zeros to the number`\n21. ``  var result = `${leadingZeros}${absNum}` ``\n23. ` // Make the number negative, if it was previously negative`\n24. ` if (num &lt; 0) {`\n25. ``  result = `-${result}` ``\n26. ` }`\n27. ` // Return the prefixed number`\n28. ` return result`\n29. `}`\n\nListing 20-13 and Listing 20-14 show how to call the handlers in Listing 20-11 and Listing 20-12.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=addLeadingZerosToNumber%289%2C%203%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW26\"></a>\n**Listing 20-13**AppleScript: Calling a handler to add leading zeros to a number\n\n1. `addLeadingZerosToNumber(9, 3)`\n2. `--&gt; Result: \"0009\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=addLeadingZerosToNumber%289%2C%203%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW29\"></a>\n**Listing 20-14**JavaScript: Calling a function to add leading zeros to a number\n\n1. `addLeadingZerosToNumber(9, 3)`\n2. `// Result: \"0009\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW8\"></a>\n\n### Comma-Delimiting a Number\n\nThe handlers Listing 20-15 and Listing 20-16 comma-delimit a numeric value and converts it to a string.\n\n> **Note**\n>\n>\n> These handlers call the `convertNumberToString()` handler. See [Listing 20-3](#//apple_ref/doc/uid/TP40016239-CH47-SW6).\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertNumberToCommaDelimitedString%28theNumber%29%0A%20%20%20%20--%20Convert%20the%20number%20to%20a%20string%0A%20%20%20%20set%20theNumber%20to%20convertNumberToString%28theNumber%29%0A%0A%20%20%20%20--%20Determine%20the%20length%20of%20the%20number%0A%20%20%20%20set%20theNumberLength%20to%20length%20of%20theNumber%0A%0A%20%20%20%20--%20Reverse%20the%20number%20so%20a%20comma%20can%20be%20added%20every%203%20digits%0A%20%20%20%20set%20theNumber%20to%20%28reverse%20of%20every%20character%20of%20theNumber%29%20as%20string%0A%0A%20%20%20%20--%20Loop%20through%20the%20number%27s%20digits%2C%20add%20commas%2C%20and%20put%20the%20numbers%20back%20in%20the%20correct%20order%0A%20%20%20%20set%20theConvertedNumber%20to%20%22%22%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20theNumberLength%0A%20%20%20%20%20%20%20%20if%20a%20is%20theNumberLength%20or%20%28a%20mod%203%29%20is%20not%200%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theConvertedNumber%20to%20%28character%20a%20of%20theNumber%20%26%20theConvertedNumber%29%20as%20string%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theConvertedNumber%20to%20%28%22%2C%22%20%26%20character%20a%20of%20theNumber%20%26%20theConvertedNumber%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%0A%20%20%20%20--%20Return%20the%20comma%20delimited%20number%0A%20%20%20%20return%20theConvertedNumber%0Aend%20convertNumberToCommaDelimitedString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW9\"></a>\n**Listing 20-15**AppleScript: Handler that comma-delimits a number\n\n1. `on convertNumberToCommaDelimitedString(theNumber)`\n2. ` -- Convert the number to a string`\n3. ` set theNumber to convertNumberToString(theNumber)`\n5. ` -- Determine the length of the number`\n6. ` set theNumberLength to length of theNumber`\n8. ` -- Reverse the number so a comma can be added every 3 digits`\n9. ` set theNumber to (reverse of every character of theNumber) as string`\n11. ` -- Loop through the number's digits, add commas, and put the numbers back in the correct order`\n12. ` set theConvertedNumber to \"\"`\n13. ` repeat with a from 1 to theNumberLength`\n14. ` if a is theNumberLength or (a mod 3) is not 0 then`\n15. ` set theConvertedNumber to (character a of theNumber & theConvertedNumber) as string`\n16. ` else`\n17. ` set theConvertedNumber to (\",\" & character a of theNumber & theConvertedNumber) as string`\n18. ` end if`\n19. ` end repeat`\n21. ` -- Return the comma delimited number`\n22. ` return theConvertedNumber`\n23. `end convertNumberToCommaDelimitedString`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToCommaDelimitedString%28num%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20number%20to%20a%20string%0A%20%20%20%20var%20numString%20%3D%20num.toString%28%29%0A%20%20%20%20if%20%28numString.indexOf%28%22e%22%29%20!%3D%20-%201%29%20%7B%0A%20%20%20%20%20%20%20%20numString%20%3D%20convertNumberToString%28numString%29%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Reverse%20the%20number%20so%20a%20comma%20can%20be%20added%20every%203%20digits%0A%20%20%20%20numString%20%3D%20numString.split%28%22%22%29.reverse%28%29.join%28%22%22%29%0A%20%20%20%20var%20numStringWithCommas%20%3D%20%22%22%0A%0A%20%20%20%20%2F%2F%20Determine%20the%20length%20of%20the%20number%0A%20%20%20%20var%20numStringLength%20%3D%20numString.length%0A%0A%20%20%20%20%2F%2F%20Loop%20through%20the%20number%27s%20digits%2C%20add%20commas%2C%20and%20put%20the%20numbers%20back%20in%20the%20correct%20order%0A%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20numStringLength%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20var%20toPrepend%20%3D%20numString%5Bi%5D%0A%20%20%20%20%20%20%20%20if%20%28i%20!%3D%20numStringLength%20-%201%20%26%26%20%28%28i%20%2B%201%29%20%25%203%29%20%3D%3D%200%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20toPrepend%20%3D%20%22%2C%22%20%2B%20toPrepend%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20numStringWithCommas%20%3D%20toPrepend%20%2B%20numStringWithCommas%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Return%20the%20comma%20delimited%20number%0A%20%20%20%20return%20numStringWithCommas%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW31\"></a>\n**Listing 20-16**JavaScript: Function that comma-delimits a number\n\n1. `function convertNumberToCommaDelimitedString(num) {`\n2. ` // Convert the number to a string`\n3. ` var numString = num.toString()`\n4. ` if (numString.indexOf(\"e\") != - 1) {`\n5. ` numString = convertNumberToString(numString)`\n6. ` }`\n8. ` // Reverse the number so a comma can be added every 3 digits`\n9. ` numString = numString.split(\"\").reverse().join(\"\")`\n10. ` var numStringWithCommas = \"\"`\n12. ` // Determine the length of the number`\n13. ` var numStringLength = numString.length`\n15. ` // Loop through the number's digits, add commas, and put the numbers back in the correct order`\n16. ` for (var i = 0; i &lt; numStringLength; i++) {`\n17. ` var toPrepend = numString[i]`\n18. ` if (i != numStringLength - 1 && ((i + 1) % 3) == 0) {`\n19. ` toPrepend = \",\" + toPrepend`\n20. ` }`\n21. ` numStringWithCommas = toPrepend + numStringWithCommas`\n22. ` }`\n24. ` // Return the comma delimited number`\n25. ` return numStringWithCommas`\n26. `}`\n\nListing 20-17 and Listing 20-18 shows how to call the handlers in Listing 20-15 and Listing 20-16.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=convertNumberToCommaDelimitedString%28872124243234%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW10\"></a>\n**Listing 20-17**AppleScript: Calling a handler to comma-delimit a number\n\n1. `convertNumberToCommaDelimitedString(872124243234)`\n2. `--&gt; Result: \"872,124,243,234\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=convertNumberToCommaDelimitedString%28872124243234%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW33\"></a>\n**Listing 20-18**JavaScript: Calling a function to comma-delimit a number\n\n1. `convertNumberToCommaDelimitedString(872124243234)`\n2. `// Result: \"872,124,243,234\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSNumberFormatter` to format numbers in different ways.\n>\n> The handlers in Listing 20-19 and Listing 20-20 convert a number to a string by returning a comma-delimited, rounded, localized decimal value. For example: (`3.64525432506E+5` at 0 places converts to `\"364525\"`, `3.64525432506E+5` at 3 places converts to `\"364525.433\"`, and `0.2375` at 2 places converts `\"0.24\"`.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20convertNumberToDecimalString%28theNumber%2C%20theNumberOfDecimalPlaces%29%0A%20%20%20%20if%20theNumberOfDecimalPlaces%20is%20greater%20than%200%20then%0A%20%20%20%20%20%20%20%20set%20theDecimalIndicators%20to%20%22.%22%0A%20%20%20%20%20%20%20%20repeat%20theNumberOfDecimalPlaces%20times%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theDecimalIndicators%20to%20theDecimalIndicators%20%26%20%22%23%22%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20set%20theDecimalIndicators%20to%20%22%22%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theFormatter%20to%20init%28%29%20of%20alloc%28%29%20of%20NSNumberFormatter%20of%20current%20application%0A%20%20%20%20setFormat_%28%220%22%20%26%20theDecimalIndicators%29%20of%20theFormatter%0A%20%20%20%20set%20theFormattedNumber%20to%20stringFromNumber_%28theNumber%29%20of%20theFormatter%0A%20%20%20%20return%20%28theFormattedNumber%20as%20string%29%0Aend%20convertNumberToDecimalString%0A)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW35\"></a>\n> **Listing 20-19**AppleScriptObjC: Handler that converts a number to a comma-delimited, rounded, localized decimal value\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on convertNumberToDecimalString(theNumber, theNumberOfDecimalPlaces)`\n> 4. ` if theNumberOfDecimalPlaces is greater than 0 then`\n> 5. ` set theDecimalIndicators to \".\"`\n> 6. ` repeat theNumberOfDecimalPlaces times`\n> 7. ` set theDecimalIndicators to theDecimalIndicators & \"#\"`\n> 8. ` end repeat`\n> 9. ` else`\n> 10. ` set theDecimalIndicators to \"\"`\n> 11. ` end if`\n> 12. ` set theFormatter to init() of alloc() of NSNumberFormatter of current application`\n> 13. ` setFormat_(\"0\" & theDecimalIndicators) of theFormatter`\n> 14. ` set theFormattedNumber to stringFromNumber_(theNumber) of theFormatter`\n> 15. ` return (theFormattedNumber as string)`\n> 16. `end convertNumberToDecimalString`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToDecimalString%28number%2C%20numberOfDecimalPlaces%29%20%7B%0A%20%20%20%20var%20decimalIndicators%20%3D%20%22%22%0A%20%20%20%20if%20%28numberOfDecimalPlaces%20%3E%200%29%20%7B%0A%20%20%20%20%20%20%20%20decimalIndicators%20%3D%20%22.%22%0A%20%20%20%20%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20numberOfDecimalPlaces%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20decimalIndicators%20%2B%3D%20%22%23%22%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20var%20formatter%20%3D%20%24.NSNumberFormatter.new%0A%20%20%20%20formatter.format%20%3D%20%600%24%7BdecimalIndicators%7D%60%0A%20%20%20%20var%20formattedNumber%20%3D%20formatter.stringFromNumber%28number%29%0A%20%20%20%20return%20formattedNumber.js%0A%7D%0A)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW44\"></a>\n> **Listing 20-20**JavaScriptObjC: Function that converts a number to a comma-delimited, rounded, localized decimal value\n>\n> 1. `function convertNumberToDecimalString(number, numberOfDecimalPlaces) {`\n> 2. ` var decimalIndicators = \"\"`\n> 3. ` if (numberOfDecimalPlaces &gt; 0) {`\n> 4. ` decimalIndicators = \".\"`\n> 5. ` for (var i = 0; i &lt; numberOfDecimalPlaces; i++) {`\n> 6. ` decimalIndicators += \"#\"`\n> 7. ` }`\n> 8. ` }`\n> 9. ` var formatter = $.NSNumberFormatter.new`\n> 10. ``  formatter.format = `0${decimalIndicators}` ``\n> 11. ` var formattedNumber = formatter.stringFromNumber(number)`\n> 12. ` return formattedNumber.js`\n> 13. `}`\n>\n> The handlers in Listing 20-21 and Listing 20-22 convert a number to a string by returning a comma-delimited, rounded, localized percentage value. For example: `0.2345` to `\"23%\"` or `0.2375` to `\"24%\"`.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20convertNumberToPercentageString%28theNumber%29%0A%20%20%20%20set%20theStyle%20to%20NSNumberFormatterPercentStyle%20of%20current%20application%0A%20%20%20%20set%20theFormattedNumber%20to%20localizedStringFromNumber_numberStyle_%28theNumber%2C%20theStyle%29%20of%20NSNumberFormatter%20of%20current%20application%0A%20%20%20%20return%20%28theFormattedNumber%20as%20string%29%0Aend%20convertNumberToPercentageString)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW36\"></a>\n> **Listing 20-21**AppleScriptObjC: Handler that converts a number to a comma-delimited, rounded, localized percentage value\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on convertNumberToPercentageString(theNumber)`\n> 4. ` set theStyle to NSNumberFormatterPercentStyle of current application`\n> 5. ` set theFormattedNumber to localizedStringFromNumber_numberStyle_(theNumber, theStyle) of NSNumberFormatter of current application`\n> 6. ` return (theFormattedNumber as string)`\n> 7. `end convertNumberToPercentageString`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToPercentageString%28number%29%20%7B%0A%20%20%20%20var%20style%20%3D%20%24.NSNumberFormatterPercentStyle%0A%20%20%20%20var%20formattedNumber%20%3D%20%24.NSNumberFormatter.localizedStringFromNumberNumberStyle%28number%2C%20style%29%0A%20%20%20%20return%20formattedNumber.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW45\"></a>\n> **Listing 20-22**JavaScriptObjC: Function that converts a number to a comma-delimited, rounded, localized percentage value\n>\n> 1. `function convertNumberToPercentageString(number) {`\n> 2. ` var style = $.NSNumberFormatterPercentStyle`\n> 3. ` var formattedNumber = $.NSNumberFormatter.localizedStringFromNumberNumberStyle(number, style)`\n> 4. ` return formattedNumber.js`\n> 5. `}`\n>\n> The handlers in Listing 20-23 and Listing 20-24 convert a number to a string by returning a comma-delimited, rounded, localized currency value. For example: `9128` to `\"$9,128.00\"` or `9978.2485` to `\"$9,978.25\"`.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20convertNumberToCurrencyString%28theNumber%29%0A%20%20%20%20set%20theStyle%20to%20NSNumberFormatterCurrencyStyle%20of%20current%20application%0A%20%20%20%20set%20theFormattedNumber%20to%20localizedStringFromNumber_numberStyle_%28theNumber%2C%20theStyle%29%20of%20NSNumberFormatter%20of%20current%20application%0A%20%20%20%20return%20%28theFormattedNumber%20as%20string%29%0Aend%20convertNumberToCurrencyString)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW37\"></a>\n> **Listing 20-23**AppleScriptObjC: Handler that converts a number to a comma-delimited, rounded, localized currency value\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on convertNumberToCurrencyString(theNumber)`\n> 4. ` set theStyle to NSNumberFormatterCurrencyStyle of current application`\n> 5. ` set theFormattedNumber to localizedStringFromNumber_numberStyle_(theNumber, theStyle) of NSNumberFormatter of current application`\n> 6. ` return (theFormattedNumber as string)`\n> 7. `end convertNumberToCurrencyString`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToCurrencyString%28number%29%20%7B%0A%20%20%20%20var%20style%20%3D%20%24.NSNumberFormatterCurrencyStyle%0A%20%20%20%20var%20formattedNumber%20%3D%20%24.NSNumberFormatter.localizedStringFromNumberNumberStyle%28number%2C%20style%29%0A%20%20%20%20return%20formattedNumber.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW46\"></a>\n> **Listing 20-24**JavaScriptObjC: Function that converts a number to a comma-delimited, rounded, localized currency value\n>\n> 1. `function convertNumberToCurrencyString(number) {`\n> 2. ` var style = $.NSNumberFormatterCurrencyStyle`\n> 3. ` var formattedNumber = $.NSNumberFormatter.localizedStringFromNumberNumberStyle(number, style)`\n> 4. ` return formattedNumber.js`\n> 5. `}`\n>\n> The handlers in Listing 20-25 and Listing 20-26 convert a number to a string by returning a string of a numeric value in words. For example: `23` to “twenty-three\", `23.75` to `\"twenty-three point seven five\"`.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20convertNumberToWords%28theNumber%29%0A%20%20%20%20set%20theStyle%20to%20NSNumberFormatterSpellOutStyle%20of%20current%20application%0A%20%20%20%20set%20theFormattedNumber%20to%20localizedStringFromNumber_numberStyle_%28theNumber%2C%20theStyle%29%20of%20NSNumberFormatter%20of%20current%20application%0A%20%20%20%20return%20%28theFormattedNumber%20as%20string%29%0Aend%20convertNumberToWords)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW38\"></a>\n> **Listing 20-25**AppleScriptObjC: Handler that converts a number to a string of numeric values in words\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on convertNumberToWords(theNumber)`\n> 4. ` set theStyle to NSNumberFormatterSpellOutStyle of current application`\n> 5. ` set theFormattedNumber to localizedStringFromNumber_numberStyle_(theNumber, theStyle) of NSNumberFormatter of current application`\n> 6. ` return (theFormattedNumber as string)`\n> 7. `end convertNumberToWords`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToWords%28number%29%20%7B%0A%20%20%20%20var%20style%20%3D%20%24.NSNumberFormatterSpellOutStyle%0A%20%20%20%20var%20formattedNumber%20%3D%20%24.NSNumberFormatter.localizedStringFromNumberNumberStyle%28number%2C%20style%29%0A%20%20%20%20return%20formattedNumber.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW47\"></a>\n> **Listing 20-26**JavaScriptObjC: Function that converts a number to a string of numeric values in words\n>\n> 1. `function convertNumberToWords(number) {`\n> 2. ` var style = $.NSNumberFormatterSpellOutStyle`\n> 3. ` var formattedNumber = $.NSNumberFormatter.localizedStringFromNumberNumberStyle(number, style)`\n> 4. ` return formattedNumber.js`\n> 5. `}`\n>\n> In JavaScript, [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) can also be used to convert a number to a comma-delimited string even more efficiently, as shown in Listing 20-27.\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20convertNumberToCommaDelimitedString%28num%29%20%7B%0A%20%20%20%20var%20numPieces%20%3D%20num.toString%28%29.split%28%22.%22%29%0A%20%20%20%20%20%20%20numPieces%5B0%5D%20%3D%20numPieces%5B0%5D.replace%28%2F%5CB%28%3F%3D%28%5Cd%7B3%7D%29%2B%28%3F!%5Cd%29%29%2Fg%2C%20%22%2C%22%29%3B%0A%20%20%20%20return%20numPieces.join%28%22.%22%29%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW39\"></a>\n> **Listing 20-27**JavaScript: Method that uses regular expressions to comma-delimit a number\n>\n> 1. `function convertNumberToCommaDelimitedString(num) {`\n> 2. ` var numPieces = num.toString().split(\".\")`\n> 3. ` numPieces[0] = numPieces[0].replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\");`\n> 4. ` return numPieces.join(\".\")`\n> 5. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW11\"></a>\n\n### Determining if a Number is an Odd Number\n\nThe handlers in Listing 20-28 and Listing 20-29 determine whether a whole number is even or odd. A returned value of `false` indicates the passed number is even; a returned value of `true` indicates the passed number is odd.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20isNumberOdd%28theNumber%29%0A%20%20%20%20if%20theNumber%20mod%202%20is%20not%200%20then%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20if%0Aend%20isNumberOdd)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW12\"></a>\n**Listing 20-28**AppleScript: Handler that determines whether a number is odd\n\n1. `on isNumberOdd(theNumber)`\n2. ` if theNumber mod 2 is not 0 then`\n3. ` return true`\n4. ` else`\n5. ` return false`\n6. ` end if`\n7. `end isNumberOdd`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20isNumberOdd%28num%29%20%7B%0A%20%20%20%20return%20num%20%25%202%20!%3D%3D%200%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW40\"></a>\n**Listing 20-29**JavaScript: Method that determines whether a number is odd\n\n1. `function isNumberOdd(num) {`\n2. ` return num % 2 !== 0`\n3. `}`\n\nListing 20-30 and Listing 20-31 show how to call the handlers in Listing 20-28 and Listing 20-29.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=isNumberOdd%283%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW13\"></a>\n**Listing 20-30**AppleScript: Calling a handler to determine whether a number is odd\n\n1. `isNumberOdd(3)`\n2. `--&gt; Result: true`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=isNumberOdd%283%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW41\"></a>\n**Listing 20-31**JavaScript: Calling a method to determine whether a number is odd\n\n1. `isNumberOdd(3)`\n2. `// Result: true`\n\nListing 20-32 and Listing 20-33 show how to call the handlers in Listing 20-28 and Listing 20-29 by prompting the user to enter an even number.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=repeat%0A%20%20%20%20display%20dialog%20%22Enter%20an%20even%20integer%3A%22%20default%20answer%20%22%22%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20if%20text%20returned%20of%20result%20is%20not%20%22%22%20then%20set%20theNumberProvided%20to%20text%20returned%20of%20result%20as%20integer%0A%20%20%20%20%20%20%20%20if%20isNumberOdd%28theNumberProvided%29%20is%20false%20then%20exit%20repeat%0A%20%20%20%20end%20try%0Aend%20repeat)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW14\"></a>\n**Listing 20-32**AppleScript: Example script that calls a handler to determine whether a user-entered number is odd\n\n1. `repeat`\n2. ` display dialog \"Enter an even integer:\" default answer \"\"`\n3. ` try`\n4. ` if text returned of result is not \"\" then set theNumberProvided to text returned of result as integer`\n5. ` if isNumberOdd(theNumberProvided) is false then exit repeat`\n6. ` end try`\n7. `end repeat`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Awhile%20%28true%29%20%7B%0A%20%20%20%20var%20result%20%3D%20app.displayDialog%28%22Enter%20an%20even%20integer%3A%22%2C%20%7BdefaultAnswer%3A%20%22%22%7D%29%0A%20%20%20%20var%20text%20%3D%20result.textReturned%0A%20%20%20%20if%20%28text%20!%3D%3D%20%22%22%29%20%7B%0A%20%20%20%20%20%20%20%20var%20num%20%3D%20Number%28text%29%0A%20%20%20%20%20%20%20%20if%20%28!isNumberOdd%28num%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW42\"></a>\n**Listing 20-33**JavaScript: Example script that calls a method to determine whether a user-entered number is odd\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `while (true) {`\n5. ` var result = app.displayDialog(\"Enter an even integer:\", {defaultAnswer: \"\"})`\n6. ` var text = result.textReturned`\n7. ` if (text !== \"\") {`\n8. ` var num = Number(text)`\n9. ` if (!isNumberOdd(num)) {`\n10. ` break`\n11. ` }`\n12. ` }`\n13. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW15\"></a>\n\n### Rounding and Truncating a Number\n\nThe handlers in Listing 20-34 and Listing 20-35 round and truncate a numeric value, and convert it to a string. Provide a numeric value and indicate a number of decimal places.\n\n> **Note**\n>\n>\n> These handlers call the `convertNumberToString()` handler. See [Listing 20-3](#//apple_ref/doc/uid/TP40016239-CH47-SW6).\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20roundAndTruncateNumber%28theNumber%2C%20numberOfDecimalPlaces%29%0A%20%20%20%20if%20numberOfDecimalPlaces%20is%200%20then%0A%20%20%20%20%20%20%20%20set%20theNumber%20to%20theNumber%20%2B%200.5%0A%20%20%20%20%20%20%20%20return%20convertNumberToString%28theNumber%20div%201%29%0A%20%20%20%20end%20if%0A%0A%20%20%20%20set%20theRoundingValue%20to%20%225%22%0A%20%20%20%20repeat%20numberOfDecimalPlaces%20times%0A%20%20%20%20%20%20%20%20set%20theRoundingValue%20to%20%220%22%20%26%20theRoundingValue%0A%20%20%20%20end%20repeat%0A%20%20%20%20set%20theRoundingValue%20to%20%28%22.%22%20%26%20theRoundingValue%29%20as%20number%0A%0A%20%20%20%20set%20theNumber%20to%20theNumber%20%2B%20theRoundingValue%0A%0A%20%20%20%20set%20theModValue%20to%20%221%22%0A%20%20%20%20repeat%20numberOfDecimalPlaces%20-%201%20times%0A%20%20%20%20%20%20%20%20set%20theModValue%20to%20%220%22%20%26%20theModValue%0A%20%20%20%20end%20repeat%0A%20%20%20%20set%20theModValue%20to%20%28%22.%22%20%26%20theModValue%29%20as%20number%0A%0A%20%20%20%20set%20theSecondPart%20to%20%28theNumber%20mod%201%29%20div%20theModValue%0A%20%20%20%20if%20length%20of%20%28theSecondPart%20as%20text%29%20is%20less%20than%20numberOfDecimalPlaces%20then%0A%20%20%20%20%20%20%20%20repeat%20numberOfDecimalPlaces%20-%20%28the%20length%20of%20%28theSecondPart%20as%20text%29%29%20times%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theSecondPart%20to%20%28%220%22%20%26%20theSecondPart%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20end%20if%0A%0A%20%20%20%20set%20theFirstPart%20to%20theNumber%20div%201%0A%20%20%20%20set%20theFirstPart%20to%20convertNumberToString%28theFirstPart%29%0A%20%20%20%20set%20theNumber%20to%20%28theFirstPart%20%26%20%22.%22%20%26%20theSecondPart%29%0A%0A%20%20%20%20return%20theNumber%0Aend%20roundAndTruncateNumber)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW16\"></a>\n**Listing 20-34**AppleScript: Handler for rounding and truncating a number\n\n1. `on roundAndTruncateNumber(theNumber, numberOfDecimalPlaces)`\n2. ` if numberOfDecimalPlaces is 0 then`\n3. ` set theNumber to theNumber + 0.5`\n4. ` return convertNumberToString(theNumber div 1)`\n5. ` end if`\n7. ` set theRoundingValue to \"5\"`\n8. ` repeat numberOfDecimalPlaces times`\n9. ` set theRoundingValue to \"0\" & theRoundingValue`\n10. ` end repeat`\n11. ` set theRoundingValue to (\".\" & theRoundingValue) as number`\n13. ` set theNumber to theNumber + theRoundingValue`\n15. ` set theModValue to \"1\"`\n16. ` repeat numberOfDecimalPlaces - 1 times`\n17. ` set theModValue to \"0\" & theModValue`\n18. ` end repeat`\n19. ` set theModValue to (\".\" & theModValue) as number`\n21. ` set theSecondPart to (theNumber mod 1) div theModValue`\n22. ` if length of (theSecondPart as text) is less than numberOfDecimalPlaces then`\n23. ` repeat numberOfDecimalPlaces - (the length of (theSecondPart as text)) times`\n24. ` set theSecondPart to (\"0\" & theSecondPart) as string`\n25. ` end repeat`\n26. ` end if`\n28. ` set theFirstPart to theNumber div 1`\n29. ` set theFirstPart to convertNumberToString(theFirstPart)`\n30. ` set theNumber to (theFirstPart & \".\" & theSecondPart)`\n32. ` return theNumber`\n33. `end roundAndTruncateNumber`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20roundAndTruncateNumber%28num%2C%20numDecimalPlaces%29%20%7B%0A%20%20%20%20if%20%28numDecimalPlaces%20%3D%3D%3D%200%29%20%7B%0A%20%20%20%20%20%20%20%20num%20%3D%20num%20%2B%200.5%0A%20%20%20%20%20%20%20%20return%20convertNumberToString%28num%20%2F%201%29%0A%20%20%20%20%7D%0A%0A%20%20%20%20var%20roundingValue%20%3D%20%225%22%0A%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20numDecimalPlaces%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20roundingValue%20%3D%20%220%22%20%2B%20roundingValue%0A%20%20%20%20%7D%0A%0A%20%20%20%20roundingValue%20%3D%20Number%28%220.%22%20%2B%20roundingValue%29%0A%20%20%20%20num%20%2B%3D%20roundingValue%0A%0A%20%20%20%20var%20modValue%20%3D%20%221%22%0A%0A%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20numDecimalPlaces%20-%201%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20modValue%20%3D%20%220%22%20%2B%20modValue%0A%20%20%20%20%7D%0A%0A%20%20%20%20modValue%20%3D%20Number%28%220.%22%20%2B%20modValue%29%0A%0A%20%20%20%20var%20secondPart%20%3D%20Math.floor%28%28num%20%25%201%29%20%2F%20modValue%29%0A%20%20%20%20var%20secondPartStringLength%20%3D%20secondPart.toString%28%29.length%0A%0A%20%20%20%20if%20%28secondPartStringLength%20%3C%20numDecimalPlaces%29%20%7B%0A%0A%20%20%20%20%20%20%20%20var%20count%20%3D%20numDecimalPlaces%20-%20secondPartStringLength%0A%0A%20%20%20%20%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20count%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20secondPart%20%3D%20%220%22%20%2B%20secondPart%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20var%20firstPart%20%3D%20Math.floor%28num%29%0A%20%20%20%20firstPart%20%3D%20convertNumberToString%28firstPart%29%0A%0A%20%20%20%20return%20%60%24%7BfirstPart%7D.%24%7BsecondPart%7D%60%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW48\"></a>\n**Listing 20-35**JavaScript: Function for rounding and truncating a number\n\n1. `function roundAndTruncateNumber(num, numDecimalPlaces) {`\n2. ` if (numDecimalPlaces === 0) {`\n3. ` num = num + 0.5`\n4. ` return convertNumberToString(num / 1)`\n5. ` }`\n7. ` var roundingValue = \"5\"`\n8. ` for (var i = 0; i &lt; numDecimalPlaces; i++) {`\n9. ` roundingValue = \"0\" + roundingValue`\n10. ` }`\n12. ` roundingValue = Number(\"0.\" + roundingValue)`\n13. ` num += roundingValue`\n15. ` var modValue = \"1\"`\n17. ` for (var i = 0; i &lt; numDecimalPlaces - 1; i++) {`\n18. ` modValue = \"0\" + modValue`\n19. ` }`\n21. ` modValue = Number(\"0.\" + modValue)`\n23. ` var secondPart = Math.floor((num % 1) / modValue)`\n24. ` var secondPartStringLength = secondPart.toString().length`\n26. ` if (secondPartStringLength &lt; numDecimalPlaces) {`\n28. ` var count = numDecimalPlaces - secondPartStringLength`\n30. ` for (var i = 0; i &lt; count; i++) {`\n31. ` secondPart = \"0\" + secondPart`\n32. ` }`\n33. ` }`\n35. ` var firstPart = Math.floor(num)`\n36. ` firstPart = convertNumberToString(firstPart)`\n38. ``  return `${firstPart}.${secondPart}` ``\n39. `}`\n\nListing 20-36 shows how to call the handler in Listing 20-34.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=roundAndTruncateNumber%281.04575%2C%203%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH47-SW17\"></a>\n**Listing 20-36**AppleScript: Calling a handler to round and truncate a number\n\n1. `roundAndTruncateNumber(1.04575, 3)`\n2. ` --&gt; Result: \"1.046\"`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateNumbers.html", "sha256": "2d7f5edd344a4d89f11613fde40b51eec460bbf97da213f669d3739701681ac2", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ManipulateText.md", "title": "Manipulating Text", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH33\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH59\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH59-SW1\"></a>\n\n## Manipulating Text\n\nManipulating text is one of the most common tasks performed in scripts. AppleScript and JavaScript both possess some basic text manipulation functions and properties that allow you to concatenate text, get the length of a string, and more. Overall, JavaScript has a much wider-range of built-in language-level text manipulation functions. Custom scripting is usually required to manipulate text with AppleScript.\n\n> **Note**\n>\n>\n> For general information about working with text in AppleScript, see the [text](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_classes.html#//apple_ref/doc/uid/TP40000983-CH1g-BBCIAHJF) class reference documentation in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n>\n> In JavaScript, the `String` object provides a range of text processing functions. Information about this object can be found [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String). JavaScript also provides a `RegExp` constructor, which can be used for pattern matching. Information about this constructor can be found [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW3\"></a>\n\n### Changing the Case of Text\n\nThe handlers in Listing 19-1 and Listing 19-2 convert text to uppercase or lowercase. To use these handlers, provide some source text and a case to apply—`upper` or `lower`.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20changeCaseOfText%28theText%2C%20theCaseToSwitchTo%29%0A%20%20%20%20if%20theCaseToSwitchTo%20contains%20%22lower%22%20then%0A%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0A%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0A%20%20%20%20else%20if%20theCaseToSwitchTo%20contains%20%22upper%22%20then%0A%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0A%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20return%20theText%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theAlteredText%20to%20%22%22%0A%20%20%20%20repeat%20with%20aCharacter%20in%20theText%0A%20%20%20%20%20%20%20%20set%20theOffset%20to%20offset%20of%20aCharacter%20in%20theComparisonCharacters%0A%20%20%20%20%20%20%20%20if%20theOffset%20is%20not%200%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20character%20theOffset%20of%20theSourceCharacters%29%20as%20string%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20aCharacter%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theAlteredText%0Aend%20changeCaseOfText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW7\"></a>\n**Listing 19-1**AppleScript: Handler that converts text to uppercase or lowercase\n\n1. `on changeCaseOfText(theText, theCaseToSwitchTo)`\n2. ` if theCaseToSwitchTo contains \"lower\" then`\n3. ` set theComparisonCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n4. ` set theSourceCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n5. ` else if theCaseToSwitchTo contains \"upper\" then`\n6. ` set theComparisonCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n7. ` set theSourceCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n8. ` else`\n9. ` return theText`\n10. ` end if`\n11. ` set theAlteredText to \"\"`\n12. ` repeat with aCharacter in theText`\n13. ` set theOffset to offset of aCharacter in theComparisonCharacters`\n14. ` if theOffset is not 0 then`\n15. ` set theAlteredText to (theAlteredText & character theOffset of theSourceCharacters) as string`\n16. ` else`\n17. ` set theAlteredText to (theAlteredText & aCharacter) as string`\n18. ` end if`\n19. ` end repeat`\n20. ` return theAlteredText`\n21. `end changeCaseOfText`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20changeCaseOfText%28text%2C%20caseToSwitchTo%29%20%7B%0A%20%20%20%20var%20alteredText%20%3D%20text%0A%20%20%20%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22lower%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.toLowerCase%28%29%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22upper%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.toUpperCase%28%29%0A%20%20%20%20%7D%0A%20%20%20%20return%20alteredText%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW36\"></a>\n**Listing 19-2**JavaScript: Function that converts text to uppercase or lowercase\n\n1. `function changeCaseOfText(text, caseToSwitchTo) {`\n2. ` var alteredText = text`\n3. ` if (caseToSwitchTo === \"lower\") {`\n4. ` alteredText = alteredText.toLowerCase()`\n5. ` }`\n6. ` else if (caseToSwitchTo === \"upper\") {`\n7. ` alteredText = alteredText.toUpperCase()`\n8. ` }`\n9. ` return alteredText`\n10. `}`\n\nListing 19-3 and Listing 19-4 show how to call the handlers in Listing 19-1 and Listing 19-2 to convert text to uppercase.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=changeCaseOfText%28%22scripting%20is%20awesome!%22%2C%20%22upper%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW8\"></a>\n**Listing 19-3**AppleScript: Calling a handler to convert text to uppercase\n\n1. `changeCaseOfText(\"scripting is awesome!\", \"upper\")`\n2. `--&gt; Result: \"SCRIPTING IS AWESOME!\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=changeCaseOfText%28%22scripting%20is%20awesome!%22%2C%20%22upper%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW37\"></a>\n**Listing 19-4**JavaScript: Calling a function to convert text to uppercase\n\n1. `changeCaseOfText(\"scripting is awesome!\", \"upper\")`\n2. `// Result: \"SCRIPTING IS AWESOME!\"`\n\nListing 19-5 and Listing 19-6 show how to call the handlers in Listing 19-1 and Listing 19-2 to convert text to lowercase.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=changeCaseOfText%28%22DOING%20REPETITIVE%20WORK%20IS%20BORING%22%2C%20%22lower%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW9\"></a>\n**Listing 19-5**AppleScript: Calling a handler to convert text to lowercase\n\n1. `changeCaseOfText(\"DOING REPETITIVE WORK IS BORING\", \"lower\")`\n2. `--&gt; Result: \"doing repetitive work is boring\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=changeCaseOfText%28%22DOING%20REPETITIVE%20WORK%20IS%20BORING%22%2C%20%22lower%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW38\"></a>\n**Listing 19-6**JavaScript: Calling a function to convert text to lowercase\n\n1. `changeCaseOfText(\"DOING REPETITIVE WORK IS BORING\", \"lower\")`\n2. `// Result: \"doing repetitive work is boring\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSString` class to change the case of text. Listing 19-7 and Listing 19-8 demonstrate how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20changeCaseOfText%28theText%2C%20theCase%29%0A%20%20%20%20--%20Create%20an%20NSString%20object%20from%20the%20passed%20text%0A%20%20%20%20set%20theText%20to%20stringWithString_%28theText%29%20of%20NSString%20of%20current%20application%0A%0A%20%20%20%20--%20Apply%20the%20appropriate%20transformation%20to%20the%20NSString%20object%0A%20%20%20%20if%20theCase%20contains%20%22lower%22%20then%0A%20%20%20%20%20%20%20%20set%20theNewText%20to%20lowercaseString%28%29%20of%20theText%0A%20%20%20%20else%20if%20theCase%20contains%20%22upper%22%20then%0A%20%20%20%20%20%20%20%20set%20theNewText%20to%20uppercaseString%28%29%20of%20theText%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20set%20theNewText%20to%20capitalizedString%28%29%20of%20theText%0A%20%20%20%20end%20if%0A%0A%20%20%20%20--%20Convert%20the%20NSString%20to%20an%20AppleScript%20string%0A%20%20%20%20return%20%28theNewText%20as%20string%29%0Aend%20changeCaseOfText)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW11\"></a>\n> **Listing 19-7**AppleScriptObjC: Handler for changing text to uppercase or lowercase\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on changeCaseOfText(theText, theCase)`\n> 4. ` -- Create an NSString object from the passed text`\n> 5. ` set theText to stringWithString_(theText) of NSString of current application`\n> 7. ` -- Apply the appropriate transformation to the NSString object`\n> 8. ` if theCase contains \"lower\" then`\n> 9. ` set theNewText to lowercaseString() of theText`\n> 10. ` else if theCase contains \"upper\" then`\n> 11. ` set theNewText to uppercaseString() of theText`\n> 12. ` else`\n> 13. ` set theNewText to capitalizedString() of theText`\n> 14. ` end if`\n> 16. ` -- Convert the NSString to an AppleScript string`\n> 17. ` return (theNewText as string)`\n> 18. `end changeCaseOfText`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20changeCaseOfText%28text%2C%20caseToSwitchTo%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20passed%20text%20to%20an%20NSString%20object%0A%20%20%20%20var%20alteredText%20%3D%20%24%28text%29%0A%0A%20%20%20%20%2F%2F%20Apply%20the%20appropriate%20transformation%20to%20the%20NSString%20object%0A%20%20%20%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22lower%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.lowercaseString%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22upper%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.uppercaseString%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Convert%20the%20NSString%20to%20an%20AppleScript%20string%0A%20%20%20%20return%20alteredText.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW39\"></a>\n> **Listing 19-8**JavaScriptObjC: Function for changing text to uppercase or lowercase\n>\n> 1. `function changeCaseOfText(text, caseToSwitchTo) {`\n> 2. ` // Convert the passed text to an NSString object`\n> 3. ` var alteredText = $(text)`\n> 5. ` // Apply the appropriate transformation to the NSString object`\n> 6. ` if (caseToSwitchTo === \"lower\") {`\n> 7. ` alteredText = alteredText.lowercaseString`\n> 8. ` }`\n> 9. ` else if (caseToSwitchTo === \"upper\") {`\n> 10. ` alteredText = alteredText.uppercaseString`\n> 11. ` }`\n> 13. ` // Convert the NSString to an AppleScript string`\n> 14. ` return alteredText.js`\n> 15. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW4\"></a>\n\n### Finding and Replacing Text in a String\n\nThe handler in Listing 19-9 can be used to find and replace text in a string. To use it, provide some source text, a string to find, and a replacement string. This handler replaces any found instances of the specified search string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20findAndReplaceInText%28theText%2C%20theSearchString%2C%20theReplacementString%29%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20theSearchString%0A%20%20%20%20set%20theTextItems%20to%20every%20text%20item%20of%20theText%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20theReplacementString%0A%20%20%20%20set%20theText%20to%20theTextItems%20as%20string%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%22%0A%20%20%20%20return%20theText%0Aend%20findAndReplaceInText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW12\"></a>\n**Listing 19-9**AppleScript: Handler that finds and replaces text in a string\n\n1. `on findAndReplaceInText(theText, theSearchString, theReplacementString)`\n2. ` set AppleScript's text item delimiters to theSearchString`\n3. ` set theTextItems to every text item of theText`\n4. ` set AppleScript's text item delimiters to theReplacementString`\n5. ` set theText to theTextItems as string`\n6. ` set AppleScript's text item delimiters to \"\"`\n7. ` return theText`\n8. `end findAndReplaceInText`\n\nListing 19-10 shows how to call the handler in Listing 19-9.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22On%20Tuesday%2C%20I%20told%20you%20to%20have%20the%20report%20ready%20by%20next%20Tuesday.%22%0Aset%20theText%20to%20findAndReplaceInText%28theText%2C%20%22Tuesday%22%2C%20%22Friday%22%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW13\"></a>\n**Listing 19-10**AppleScript: Calling a handler to find and replace text in a string\n\n1. `set theText to \"On Tuesday, I told you to have the report ready by next Tuesday.\"`\n2. `set theText to findAndReplaceInText(theText, \"Tuesday\", \"Friday\")`\n3. `--&gt; Result: \"On Friday, I told you to have the report ready by next Friday.\"`\n\nIn JavaScript, the `String` object’s `replace()` method is used to find and replace text in a string, as shown in Listing 19-11. Unlike the previous AppleScript example, this function replaces only the first occurrence of the found text.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22On%20Tuesday%2C%20I%20told%20you%20to%20have%20the%20report%20ready%20by%20next%20Tuesday.%22%0Atext%20%3D%20text.replace%28%22Tuesday%22%2C%20%22Friday%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW40\"></a>\n**Listing 19-11**JavaScript: Finding and replacing the first occurrence of text in a string\n\n1. `var text = \"On Tuesday, I told you to have the report ready by next Tuesday.\"`\n2. `text = text.replace(\"Tuesday\", \"Friday\")`\n3. `// Result: \"On Friday, I told you to have the report ready by next Tuesday.\"`\n\nThe `replace()` method can be combined with a regular expression to replace every occurrence of the found text, as shown in Listing 19-12.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22On%20Tuesday%2C%20I%20told%20you%20to%20have%20the%20report%20ready%20by%20next%20Tuesday.%22%0Atext%20%3D%20text.replace%28%2FTuesday%2Fg%2C%20%22Friday%22%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW41\"></a>\n**Listing 19-12**JavaScript: Finding and replacing every occurrence of text in a string\n\n1. `var text = \"On Tuesday, I told you to have the report ready by next Tuesday.\"`\n2. `text = text.replace(/Tuesday/g, \"Friday\")`\n3. `// Result: \"On Friday, I told you to have the report ready by next Friday.\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSString` class to perform a find and replace in text. The handlers in Listing 19-13 and Listing 19-14 demonstrate how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20findAndReplaceInText%28theText%2C%20theSearchString%2C%20theReplacementString%29%0A%20%20%20%20--%20Create%20an%20NSString%20object%20from%20the%20passed%20AppleScript%20string%0A%20%20%20%20set%20theText%20to%20stringWithString_%28theText%29%20of%20NSString%20of%20current%20application%0A%20%20%20%20--%20Call%20an%20NSString%20replacement%20method%20on%20the%20newly%20created%20NSString%20object%0A%20%20%20%20set%20theText%20to%20stringByReplacingOccurrencesOfString_withString_%28theSearchString%2C%20theReplacementString%29%20of%20theText%0A%20%20%20%20--%20Convert%20from%20an%20NSString%20to%20an%20AppleScript%20string%0A%20%20%20%20return%20%28theText%20as%20string%29%0Aend%20findAndReplaceInText)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW15\"></a>\n> **Listing 19-13**AppleScriptObjC: Handler that finds and replaces every occurrence of text in a string\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on findAndReplaceInText(theText, theSearchString, theReplacementString)`\n> 4. ` -- Create an NSString object from the passed AppleScript string`\n> 5. ` set theText to stringWithString_(theText) of NSString of current application`\n> 6. ` -- Call an NSString replacement method on the newly created NSString object`\n> 7. ` set theText to stringByReplacingOccurrencesOfString_withString_(theSearchString, theReplacementString) of theText`\n> 8. ` -- Convert from an NSString to an AppleScript string`\n> 9. ` return (theText as string)`\n> 10. `end findAndReplaceInText`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20findAndReplaceInText%28text%2C%20searchString%2C%20replacementString%29%20%7B%0A%20%20%20%20%2F%2F%20Create%20an%20NSString%20object%20from%20the%20passed%20string%0A%20%20%20%20var%20alteredText%20%3D%20%24%28text%29%0A%20%20%20%20%2F%2F%20Call%20an%20NSString%20replacement%20method%20on%20the%20newly%20created%20NSString%20object%0A%20%20%20%20alteredText%20%3D%20alteredText.stringByReplacingOccurrencesOfStringWithString%28searchString%2C%20replacementString%29%0A%20%20%20%20%2F%2F%20Convert%20from%20an%20NSString%20to%20a%20JavaScript%20string%0A%20%20%20%20return%20alteredText.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW42\"></a>\n> **Listing 19-14**JavaScriptObjC: Function that finds and replaces every occurrence of text in a string\n>\n> 1. `function findAndReplaceInText(text, searchString, replacementString) {`\n> 2. ` // Create an NSString object from the passed string`\n> 3. ` var alteredText = $(text)`\n> 4. ` // Call an NSString replacement method on the newly created NSString object`\n> 5. ` alteredText = alteredText.stringByReplacingOccurrencesOfStringWithString(searchString, replacementString)`\n> 6. ` // Convert from an NSString to a JavaScript string`\n> 7. ` return alteredText.js`\n> 8. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW16\"></a>\n\n### Getting the Characters of a String\n\nListing 19-15 and Listing 19-16 show how to get a list of characters in a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Acharacters%20of%20theText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW17\"></a>\n**Listing 19-15**AppleScript: Get the characters of a string\n\n1. `set theText to \"The quick brown fox jumps over a lazy dog.\"`\n2. `characters of theText`\n3. `--&gt; Result: {\"T\", \"h\", \"e\", \" \", \"q\", \"u\", \"i\", \"c\", \"k\", \" \", \"b\", \"r\", \"o\", \"w\", \"n\", \" \", \"f\", \"o\", \"x\", \" \", \"j\", \"u\", \"m\", \"p\", \"s\", \" \", \"o\", \"v\", \"e\", \"r\", \" \", \"a\", \" \", \"l\", \"a\", \"z\", \"y\", \" \", \"d\", \"o\", \"g\", \".\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Atext.split%28%22%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW43\"></a>\n**Listing 19-16**JavaScript: Get the characters of a string\n\n1. `var text = \"The quick brown fox jumps over a lazy dog.\"`\n2. `text.split(\"\")`\n3. `// Result: [\"T\", \"h\", \"e\", \" \", \"q\", \"u\", \"i\", \"c\", \"k\", \" \", \"b\", \"r\", \"o\", \"w\", \"n\", \" \", \"f\", \"o\", \"x\", \" \", \"j\", \"u\", \"m\", \"p\", \"s\", \" \", \"o\", \"v\", \"e\", \"r\", \" \", \"a\", \" \", \"l\", \"a\", \"z\", \"y\", \" \", \"d\", \"o\", \"g\", \".\"]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW18\"></a>\n\n### Getting the Length of String\n\nListing 19-17 and Listing 19-18 show how to get the length of—the number of characters in—a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Alength%20of%20theText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW19\"></a>\n**Listing 19-17**AppleScript: Get the length of a string\n\n1. `set theText to \"The quick brown fox jumps over a lazy dog.\"`\n2. `length of theText`\n3. `--&gt; Result: 42`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Atext.length)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW44\"></a>\n**Listing 19-18**JavaScript: Get the length of a string\n\n1. `var text = \"The quick brown fox jumps over a lazy dog.\"`\n2. `text.length`\n3. `// Result: 42`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW20\"></a>\n\n### Getting the Paragraphs of a String\n\nListing 19-19 and Listing 19-20 show how to get a list of paragraphs in a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22*%20Sal%0A*%20Ben%0A*%20Chris%0A*%20David%22%0Aparagraphs%20of%20theText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW21\"></a>\n**Listing 19-19**AppleScript: Get the characters of a string\n\n1. `set theText to \"* Sal`\n2. `* Ben`\n3. `* Chris`\n4. `* David\"`\n5. `paragraphs of theText`\n6. `--&gt; Result: {\"* Sal\", \"* Ben\", \"* Chris\", \"* David\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%60*%20Sal%0A*%20Ben%0A*%20Chris%0A*%20David%60%0A%0Atext.split%28%22%5Cn%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW45\"></a>\n**Listing 19-20**JavaScript: Get the characters of a string\n\n1. `` var text = `* Sal ``\n2. `* Ben`\n3. `* Chris`\n4. `` * David` ``\n6. `text.split(\"\\\\n\")`\n7. `// Result: [\"* Sal\", \"* Ben\", \"* Chris\", \"* David\"]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW22\"></a>\n\n### Getting the Position of Text in a String\n\nTo determine the position of text within a string in AppleScript, request its `offset`, as shown in Listing 19-21. This provides the character number where the first instance of the text begins.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Aoffset%20of%20%22quick%22%20in%20theText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW46\"></a>\n**Listing 19-21**AppleScript: Get the position of text in a string\n\n1. `set theText to \"The quick brown fox jumps over a lazy dog.\"`\n2. `offset of \"quick\" in theText`\n3. `--&gt; Result: 5`\n\n> **Note**\n>\n>\n> In AppleScript, character positions start at `1`; the first character in a string has an offset of `1`. If the string doesn’t include the text provided, then an offset of `0` is returned.\n\nTo determine the position of text within a string in JavaScript, call the `indexOf()` method of the text object, as shown in Listing 19-22.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Atext.indexOf%28%22quick%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW47\"></a>\n**Listing 19-22**JavaScript: Get the position of text in a string\n\n1. `var text = \"The quick brown fox jumps over a lazy dog.\"`\n2. `text.indexOf(\"quick\")`\n3. `// Result: 4`\n\n> **Note**\n>\n>\n> In JavaScript, character positions start at `0`; the first character in a string has an index of `0`. If the string doesn’t include the text provided, then an offset of `-1` is returned.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW6\"></a>\n\n### Splitting Text\n\nThe handler in Listing 19-23 splits text into a list, based on a specific delimiter.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20splitText%28theText%2C%20theDelimiter%29%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20theDelimiter%0A%20%20%20%20set%20theTextItems%20to%20every%20text%20item%20of%20theText%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%22%0A%20%20%20%20return%20theTextItems%0Aend%20splitText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW24\"></a>\n**Listing 19-23**AppleScript: Handler that splits text\n\n1. `on splitText(theText, theDelimiter)`\n2. ` set AppleScript's text item delimiters to theDelimiter`\n3. ` set theTextItems to every text item of theText`\n4. ` set AppleScript's text item delimiters to \"\"`\n5. ` return theTextItems`\n6. `end splitText`\n\nListing 19-24 shows how to call the handler in Listing 19-23.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0AsplitText%28theText%2C%20space%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW25\"></a>\n**Listing 19-24**AppleScript: Calling a handler to split text based on a delimiter\n\n1. `set theText to \"The quick brown fox jumps over a lazy dog.\"`\n2. `splitText(theText, space)`\n3. `--&gt; Result: {\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"a\", \"lazy\", \"dog.\"}`\n\nIn JavaScript, the `String` object’s `split()` method is used to split text based on a delimiter, as shown in Listing 19-25.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%22The%20quick%20brown%20fox%20jumps%20over%20a%20lazy%20dog.%22%0Atext.split%28%22%20%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW49\"></a>\n**Listing 19-25**JavaScript: Function that splits text\n\n1. `var text = \"The quick brown fox jumps over a lazy dog.\"`\n2. `text.split(\" \")`\n3. `// Result: [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"a\", \"lazy\", \"dog.\"]`\n\n> **Note**\n>\n>\n> See [Converting a List to a String](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ManipulateListsofItems.md#//apple_ref/doc/uid/TP40016239-CH48-SW11) to learn how to merge strings back together.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW2\"></a>\n\n### Trimming Text\n\nThe handlers in Listing 19-26 and Listing 19-27 trim text from the beginning or end of a string. To use these examples, provide some source text, characters to trim, and a trim direction—`beginning` (trim from the beginning), `end` (trim from the end), or `both` (trim from both the beginning and end).\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20trimText%28theText%2C%20theCharactersToTrim%2C%20theTrimDirection%29%0A%20%20%20%20set%20theTrimLength%20to%20length%20of%20theCharactersToTrim%0A%20%20%20%20if%20theTrimDirection%20is%20in%20%7B%22beginning%22%2C%20%22both%22%7D%20then%0A%20%20%20%20%20%20%20%20repeat%20while%20theText%20begins%20with%20theCharactersToTrim%0A%20%20%20%20%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theText%20to%20characters%20%28theTrimLength%20%2B%201%29%20thru%20-1%20of%20theText%20as%20string%0A%20%20%20%20%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20text%20contains%20nothing%20but%20trim%20characters%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20end%20if%0A%20%20%20%20if%20theTrimDirection%20is%20in%20%7B%22end%22%2C%20%22both%22%7D%20then%0A%20%20%20%20%20%20%20%20repeat%20while%20theText%20ends%20with%20theCharactersToTrim%0A%20%20%20%20%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theText%20to%20characters%201%20thru%20-%28theTrimLength%20%2B%201%29%20of%20theText%20as%20string%0A%20%20%20%20%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20text%20contains%20nothing%20but%20trim%20characters%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20end%20if%0A%20%20%20%20return%20theText%0Aend%20trimText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW5\"></a>\n**Listing 19-26**AppleScript: Handler that trims text\n\n1. `on trimText(theText, theCharactersToTrim, theTrimDirection)`\n2. ` set theTrimLength to length of theCharactersToTrim`\n3. ` if theTrimDirection is in {\"beginning\", \"both\"} then`\n4. ` repeat while theText begins with theCharactersToTrim`\n5. ` try`\n6. ` set theText to characters (theTrimLength + 1) thru -1 of theText as string`\n7. ` on error`\n8. ` -- text contains nothing but trim characters`\n9. ` return \"\"`\n10. ` end try`\n11. ` end repeat`\n12. ` end if`\n13. ` if theTrimDirection is in {\"end\", \"both\"} then`\n14. ` repeat while theText ends with theCharactersToTrim`\n15. ` try`\n16. ` set theText to characters 1 thru -(theTrimLength + 1) of theText as string`\n17. ` on error`\n18. ` -- text contains nothing but trim characters`\n19. ` return \"\"`\n20. ` end try`\n21. ` end repeat`\n22. ` end if`\n23. ` return theText`\n24. `end trimText`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20trimText%28text%2C%20charsToTrim%2C%20direction%29%20%7B%0A%20%20%20%20var%20result%20%3D%20text%0A%20%20%20%20var%20regexString%20%3D%20charsToTrim.replace%28%2F%5B%5C-%5C%5B%5C%5D%5C%2F%5C%7B%5C%7D%5C%28%5C%29%5C*%5C%2B%5C%3F%5C.%5C%5C%5C%5E%5C%24%5C%7C%5D%2Fg%2C%20%22%5C%5C%24%26%22%29%3B%0A%20%20%20%20if%20%28direction%20%3D%3D%3D%20%22beginning%22%20%7C%7C%20direction%20%3D%3D%3D%20%22both%22%29%20%7B%0A%20%20%20%20%20%20%20%20var%20regex%20%3D%20new%20RegExp%28%60%5E%28%3F%3A%24%7BregexString%7D%29*%60%29%0A%20%20%20%20%20%20%20%20result%20%3D%20result.replace%28regex%2C%20%22%22%29%0A%20%20%20%20%7D%0A%20%20%20%20if%20%28direction%20%3D%3D%3D%20%22end%22%20%7C%7C%20direction%20%3D%3D%3D%20%22both%22%29%20%7B%0A%20%20%20%20%20%20%20%20var%20regex%20%3D%20new%20RegExp%28%60%28%3F%3A%24%7BregexString%7D%29*%24%60%29%0A%20%20%20%20%20%20%20%20result%20%3D%20result.replace%28regex%2C%20%22%22%29%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW50\"></a>\n**Listing 19-27**JavaScript: Function that trims text\n\n1. `function trimText(text, charsToTrim, direction) {`\n2. ` var result = text`\n3. ` var regexString = charsToTrim.replace(/[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]/g, \"\\\\\\\\$&\");`\n4. ` if (direction === \"beginning\" || direction === \"both\") {`\n5. ``  var regex = new RegExp(`^(?:${regexString})*`) ``\n6. ` result = result.replace(regex, \"\")`\n7. ` }`\n8. ` if (direction === \"end\" || direction === \"both\") {`\n9. ``  var regex = new RegExp(`(?:${regexString})*$`) ``\n10. ` result = result.replace(regex, \"\")`\n11. ` }`\n12. ` return result`\n13. `}`\n\nListing 19-28 and Listing 19-29 show how to call the handlers in Listing 19-26 and Listing 19-27 to trim text from the beginning of a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%22----1----%22%2C%20%22-%22%2C%20%22beginning%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW27\"></a>\n**Listing 19-28**AppleScript: Calling a handler to trim text from the beginning of a string\n\n1. `trimText(\"----1----\", \"-\", \"beginning\")`\n2. `--&gt; Result: \"1----\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%22----1----%22%2C%20%22-%22%2C%20%22beginning%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW51\"></a>\n**Listing 19-29**JavaScript: Calling a function to trim text from the beginning of a string\n\n1. `trimText(\"----1----\", \"-\", \"beginning\")`\n2. `// Result: \"1----\"`\n\nListing 19-30 and Listing 19-31 show how to call the handlers in Listing 19-26 and Listing 19-27 to trim text from the end of a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%2212345.txt%22%2C%20%22.txt%22%2C%20%22end%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW28\"></a>\n**Listing 19-30**AppleScript: Calling a handler to trim text from the end of a string\n\n1. `trimText(\"12345.txt\", \".txt\", \"end\")`\n2. `--&gt; Result: \"12345\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%2212345.txt%22%2C%20%22.txt%22%2C%20%22end%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW52\"></a>\n**Listing 19-31**JavaScript: Calling a function to trim text from the end of a string\n\n1. `trimText(\"12345.txt\", \".txt\", \"end\")`\n2. `// Result: \"12345\"`\n\nListing 19-32 and Listing 19-33 show how to call the handlers in Listing 19-26 and Listing 19-27 to trim text from the beginning and end of a string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%22*-*-Ben*-*-%22%2C%20%22*-%22%2C%20%22both%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW29\"></a>\n**Listing 19-32**AppleScript: Calling a handler to trim text from the beginning and end of a string\n\n1. `trimText(\"*-*-Ben*-*-\", \"*-\", \"both\")`\n2. `--&gt; Result: \"Ben\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=trimText%28%22*-*-Ben*-*-%22%2C%20%22*-%22%2C%20%22both%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW53\"></a>\n**Listing 19-33**JavaScript: Calling a function to trim text from the beginning and end of a string\n\n1. `trimText(\"*-*-Ben*-*-\", \"*-\", \"both\")`\n2. `// Result: \"Ben\"`\n\n> **Note**\n>\n>\n> When you use AppleScriptObjC or JavaScriptObjC, you can use methods of the `NSString` class to remove whitespace around text. The handlers in Listing 19-34 and Listing 19-35 demonstrate how to do this.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0A%0Aon%20trimWhiteSpaceAroundString%28theText%29%0A%20%20%20%20--%20Create%20an%20NSString%20object%20from%20an%20AppleScript%20string%0A%20%20%20%20set%20theText%20to%20stringWithString_%28theText%29%20of%20NSString%20of%20current%20application%0A%20%20%20%20--%20Trim%20white%20space%20around%20the%20NSString%0A%20%20%20%20set%20theWhitespaceCharacterSet%20to%20whitespaceCharacterSet%20of%20NSCharacterSet%20of%20current%20application%0A%20%20%20%20set%20theText%20to%20stringByTrimmingCharactersInSet_%28theWhitespaceCharacterSet%29%20of%20theText%0A%20%20%20%20--%20return%20result%20coerced%20to%20an%20AppleScript%20string%0A%20%20%20%20return%20%28theText%20as%20string%29%0Aend%20trimWhiteSpaceAroundString)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW31\"></a>\n> **Listing 19-34**AppleScriptObjC: Handler that removes white space around text\n>\n> 1. `use framework \"Foundation\"`\n> 3. `on trimWhiteSpaceAroundString(theText)`\n> 4. ` -- Create an NSString object from an AppleScript string`\n> 5. ` set theText to stringWithString_(theText) of NSString of current application`\n> 6. ` -- Trim white space around the NSString`\n> 7. ` set theWhitespaceCharacterSet to whitespaceCharacterSet of NSCharacterSet of current application`\n> 8. ` set theText to stringByTrimmingCharactersInSet_(theWhitespaceCharacterSet) of theText`\n> 9. ` -- return result coerced to an AppleScript string`\n> 10. ` return (theText as string)`\n> 11. `end trimWhiteSpaceAroundString`\n>\n> **JAVASCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20trimWhiteSpaceAroundString%28text%29%20%7B%0A%20%20%20%20%2F%2F%20Create%20an%20NSString%20object%20from%20the%20text%0A%20%20%20%20var%20alteredText%20%3D%20%24%28text%29%0A%20%20%20%20%2F%2F%20Trim%20white%20space%20around%20the%20NSString%20and%20return%20the%20result%0A%20%20%20%20var%20whitespace%20%3D%20%24.NSCharacterSet.whitespaceCharacterSet%0A%20%20%20%20return%20alteredText.stringByTrimmingCharactersInSet%28whitespace%29.js%0A%7D)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW54\"></a>\n> **Listing 19-35**JavaScriptObjC: Function that removes white space around text\n>\n> 1. `function trimWhiteSpaceAroundString(text) {`\n> 2. ` // Create an NSString object from the text`\n> 3. ` var alteredText = $(text)`\n> 4. ` // Trim white space around the NSString and return the result`\n> 5. ` var whitespace = $.NSCharacterSet.whitespaceCharacterSet`\n> 6. ` return alteredText.stringByTrimmingCharactersInSet(whitespace).js`\n> 7. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW32\"></a>\n\n### Trimming Paragraphs of Text\n\nThe handlers in Listing 19-36 and Listing 19-37 remove unwanted characters from multiple paragraphs.\n\n> **Note**\n>\n>\n> This handler calls the `trimText()` handler. See [Listing 19-26](#//apple_ref/doc/uid/TP40016239-CH33-SW5).\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20trimParagraphsOfText%28theText%2C%20theCharactersToTrim%2C%20theTrimDirection%29%0A%20%20%20%20set%20theParagraphs%20to%20every%20paragraph%20of%20theText%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20paragraphs%20of%20theText%0A%20%20%20%20%20%20%20%20set%20theCurrentParagraph%20to%20item%20a%20of%20theParagraphs%0A%20%20%20%20%20%20%20%20set%20item%20a%20of%20theParagraphs%20to%20trimText%28theCurrentParagraph%2C%20theCharactersToTrim%2C%20theTrimDirection%29%0A%20%20%20%20end%20repeat%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20return%0A%20%20%20%20set%20theText%20to%20theParagraphs%20as%20string%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%22%0A%20%20%20%20return%20theText%0Aend%20trimParagraphsOfText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW33\"></a>\n**Listing 19-36**AppleScript: Handler that trims text on multiple paragraphs\n\n1. `on trimParagraphsOfText(theText, theCharactersToTrim, theTrimDirection)`\n2. ` set theParagraphs to every paragraph of theText`\n3. ` repeat with a from 1 to count of paragraphs of theText`\n4. ` set theCurrentParagraph to item a of theParagraphs`\n5. ` set item a of theParagraphs to trimText(theCurrentParagraph, theCharactersToTrim, theTrimDirection)`\n6. ` end repeat`\n7. ` set AppleScript's text item delimiters to return`\n8. ` set theText to theParagraphs as string`\n9. ` set AppleScript's text item delimiters to \"\"`\n10. ` return theText`\n11. `end trimParagraphsOfText`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20trimParagraphsOfText%28text%2C%20charsToTrim%2C%20direction%29%20%7B%0A%20%20%20%20var%20paragraphs%20%3D%20text.split%28%22%5Cn%22%29%0A%20%20%20%20for%20%28var%20i%20%3D%200%3B%20i%20%3C%20paragraphs.length%3B%20i%2B%2B%29%20%7B%0A%20%20%20%20%20%20%20%20var%20currentParagraph%20%3D%20paragraphs%5Bi%5D%0A%20%20%20%20%20%20%20%20paragraphs%5Bi%5D%20%3D%20trimText%28currentParagraph%2C%20charsToTrim%2C%20direction%29%0A%20%20%20%20%7D%0A%20%20%20%20return%20paragraphs.join%28%22%5Cn%22%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW56\"></a>\n**Listing 19-37**JavaScript: Function that trims text on multiple paragraphs\n\n1. `function trimParagraphsOfText(text, charsToTrim, direction) {`\n2. ` var paragraphs = text.split(\"\\\\n\")`\n3. ` for (var i = 0; i &lt; paragraphs.length; i++) {`\n4. ` var currentParagraph = paragraphs[i]`\n5. ` paragraphs[i] = trimText(currentParagraph, charsToTrim, direction)`\n6. ` }`\n7. ` return paragraphs.join(\"\\\\n\")`\n8. `}`\n\nListing 19-38 and Listing 19-39 show how to call the handlers in Listing 19-36 and Listing 19-37.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%22*%20Sal%0A*%20Ben%0A*%20Chris%0A*%20David%22%0AtrimParagraphsOfText%28theText%2C%20%22*%20%22%2C%20%22beginning%22%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW35\"></a>\n**Listing 19-38**AppleScript: Calling a handler to trim text from multiple paragraphs\n\n1. `set theText to \"* Sal`\n2. `* Ben`\n3. `* Chris`\n4. `* David\"`\n5. `trimParagraphsOfText(theText, \"* \", \"beginning\")`\n6. `--&gt; Result:`\n7. `(*`\n8. `\"Sal`\n9. `Ben`\n10. `Chris`\n11. `David\"`\n12. `*)`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20text%20%3D%20%60*%20Sal%0A*%20Ben%0A*%20Chris%0A*%20David%60%0AtrimParagraphsOfText%28text%2C%20%22*%20%22%2C%20%22beginning%22%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH33-SW57\"></a>\n**Listing 19-39**JavaScript: Calling a function to trim text from multiple paragraphs\n\n1. `` var text = `* Sal ``\n2. `* Ben`\n3. `* Chris`\n4. `` * David` ``\n5. `trimParagraphsOfText(text, \"* \", \"beginning\")`\n6. `// Result: \"Sal\\\\nBen\\\\nChris\\\\nDavid\"`\n\n> **Note**\n>\n>\n> In JavaScript, `\\\\n` represents a newline character.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ManipulateText.html", "sha256": "60c967c41819bcb6a82d566b550ac15ea9633dc8504bc3300426025036a2ee16", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "NavigateaScriptingDictionary.md", "title": "Navigating a Scripting Dictionary", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH77\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW1\"></a>\n\n## Navigating a Scripting Dictionary\n\nA scripting dictionary window in Script Editor contains three primary areas. See Figure 12-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW2\"></a>\n**Figure 12-1**Primary elements of a scripting dictionary window in Script Editor\n![image: ../Art/script-editor_dictionary-callouts_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_dictionary-callouts_2x.png)\n\n* **Toolbar.** Options for toggling between terminology views, setting the scripting language, entering search terms, and more.\n* **Navigation pane.** Columns of scripting terminology.\n* **Detail pane.** Definitions for any terminology selected in the navigation pane.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW13\"></a>\n\n### Types of Terminology\n\nThe navigation pane of a dictionary includes the types of terms described in Table 12-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW3\"></a>\n\n**Table 12-1**Types of scripting terminology\n\n| Type | Icon | Description |\n| --- | --- | --- |\n| Suite | image: ../Art/osa_suite_2x.png | A *suite* is a grouping of related commands and classes. Apps often have a Standard Suite, which includes terminology supported by most scriptable apps, such as an `open` command, a `quit` command, and an `application` class. |\n| Command | image: ../Art/osa_command_2x.png | A *command* is an instruction that can be sent to an app or object in order to initiate some action. For example, `delete`, `make`, `print` are commands that are found in many scriptable apps. Many commands have *parameters* that specify the target object and control the behavior of the command. |\n| Class | image: ../Art/osa_class_2x.png    image: ../Art/osa_element_2x.png | A *class* is an object within an app, or an app itself. Mail, for example, has an `application` class, a `message` class, and a `signature` class, among others. Objects within an app sometimes contain other objects as *elements*. For example, in Mail, a `mailbox` objects can contain `message` objects as elements. |\n| Property | image: ../Art/osa_property_2x.png | A *property* is an attribute of a class. For example, the `message` class in Mail has many properties, including `date received`, `read status`, and `subject`. Some properties are read-only, while others are readable and writable. |\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW14\"></a>\n\n### Key Concepts\n\nIt’s important to understand the concepts of *inheritance* and *containment* when navigating a scripting dictionary.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW15\"></a>\n\n### Inheritance\n\nIn a scriptable app, different classes often implement the same properties. For example, in Finder, the `file` and `folder` classes both have `creation date`, `modification date`, and `name` properties. Rather than defining these same properties multiple times throughout the scripting dictionary, Finder implements a generic `item` class. Since files and folders are considered types of Finder items, these classes inherit the properties of the `item` class. In other words, any properties of the `item` class also apply to the `file` and `folder` classes. There are many other items in Finder that also inherit these same properties, including the `disk`, `package`, and `alias file` classes.\n\nA class that inherits the properties of other classes can also implement its own properties. In Finder, the `file` class implements a number of file-specific properties, including `file type` and `version`. The `alias file` class implements an `original item` property.\n\nIn some cases, a class inherits properties from multiple classes. In Finder, an alias is a type of file, which is a type of item. Therefore, the `alias file` class inherits the properties of both the `file` and `item` classes, as shown in Figure 12-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW4\"></a>\n**Figure 12-2**In scripting, classes can inherit the properties of other classes\n![image: ../Art/Inheritance_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/Inheritance_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW16\"></a>\n\n### Containment\n\nClasses of a scriptable app reside within a certain containment hierarchy. The application is at the top level, with other classes nested beneath. Finder, for example, contains disks, folders, files, and other objects. While files don’t contain elements, folders and disks can contain other folders and files. See Figure 12-3. Mail is another example—the application contains accounts, which can contain mailboxes, which can contain other mailboxes and messages.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW5\"></a>\n**Figure 12-3**In scripting, classes can contain other classes as elements\n![image: ../Art/Containment_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/Containment_2x.png)\n\nWhen referencing a class, you must do so very specifically according to its containment hierarchy in order to provide the scripting system with context. To reference a file in Finder, you would specify where the file resides in the folder hierarchy. See Listing 12-1 and Listing 12-2. To reference a message in Mail, you would specify where the message resides in the mailbox and account hierarchy.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Reference%20a%20File%20by%20Containment%20Hierarchy%20in%20Finder&script=tell%20application%20%22Finder%22%0D%20%20%20%20modification%20date%20of%20file%20%22My%20File.txt%22%20of%20folder%20%22Documents%22%20of%20folder%20%22YourUserName%22%20of%20folder%20%22Users%22%20of%20startup%20disk%0Dend%20tell%0D--%3E%20Result%3A%20date%20%22Monday%2C%20September%2028%2C%202015%20at%2010%3A10%3A17%20AM%22%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW6\"></a>\n**Listing 12-1**AppleScript: Referencing a file by containment hierarchy in Finder\n\n1. `tell application \"Finder\"`\n2. ` modification date of file \"My File.txt\" of folder \"Documents\" of folder \"YourUserName\" of folder \"Users\" of startup disk`\n3. `end tell`\n4. `--&gt; Result: date \"Monday, September 28, 2015 at 10:10:17 AM\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Reference%20a%20File%20by%20Containment%20Hierarchy%20in%20Finder&script=var%20Finder%20%3D%20Application%28%22Finder%22%29%0DFinder.startupDisk.folders%5B%22Users%22%5D.folders%5B%22YourUserName%22%5D.folders%5B%22Documents%22%5D.files%5B%22My%20File.txt%22%5D.modificationDate%28%29%0D%2F%2F%20Result%3A%20Mon%20Sep%2028%202015%2017%3A10%3A17%20GMT-0700%20%28PDT%29%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW7\"></a>\n**Listing 12-2**JavaScript: Referencing a file by containment hierarchy in Finder\n\n1. `var Finder = Application(\"Finder\")`\n2. `Finder.startupDisk.folders[\"Users\"].folders[\"YourUserName\"].folders[\"Documents\"].files[\"My File.txt\"].modificationDate()`\n3. `// Result: Mon Sep 28 2015 17:10:17 GMT-0700 (PDT)`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW17\"></a>\n\n### Anatomy of a Command Definition\n\nThe definition of a command in a scripting dictionary is a recipe for using the command, as shown in Figure 12-4, Listing 12-3, and Listing 12-4.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW8\"></a>\n**Figure 12-4**Definition for the move command in the Finder scripting dictionary\n![image: ../Art/dictionary_move_command_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dictionary_move_command_2x.png)\n\nA command definition includes the following elements:\n\n* **Command name.** The name of the command.\n* **Direct parameter.** An object to be targeted by the command. For the `move` command in Finder, this is the object to be moved. If a command definition doesn’t specify a direct parameter, then the target object is the application. A direct parameter immediately follows the command.\n* **Labeled parameters.** Control some aspect of the command’s behavior and are required or optional. Optional parameters are surrounded by brackets. Since these parameters are identified by label, they can be placed in any order when you write your script. The command definition denotes the value type for each labeled parameter. For example, the optional `replacing` parameter for the `move` command in Finder takes a boolean value.\n* **Result.** The result of the command, if any. Often, this is a reference to a newly created or modified object. For the `move` command in Finder, it’s a reference to the moved object.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Example%20Usage%20of%20the%20Move%20Command%20in%20Finder&script=tell%20application%20%22Finder%22%0D%20%20%20%20move%20folder%20someFolder%20to%20someOtherFolder%20replacing%20true%0Dend%20tell%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW9\"></a>\n**Listing 12-3**AppleScript: Example usage of the move command in Finder\n\n1. `tell application \"Finder\"`\n2. ` move folder someFolder to someOtherFolder replacing true`\n3. `end tell`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Example%20Usage%20of%20the%20Move%20Command%20in%20Finder&script=var%20Finder%20%3D%20Application%28%22Finder%22%29%0DFinder.move%28someFolder%2C%20%7B%0D%20%20to%3A%20someOtherFolder%2C%0D%20%20replacing%3A%20true%0D%7D%29%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW10\"></a>\n**Listing 12-4**JavaScript: Example usage of the move command in Finder\n\n1. `var Finder = Application(\"Finder\")`\n2. `Finder.move(someFolder, {`\n3. ` to: someOtherFolder,`\n4. ` replacing: true`\n5. `})`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW18\"></a>\n\n### Anatomy of a Class Definition\n\nA class definition describes a class, as shown in Figure 12-5.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW12\"></a>\n**Figure 12-5**Definition for the mailbox class in the Mail scripting dictionary\n![image: ../Art/dictionary_mailbox_class_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dictionary_mailbox_class_2x.png)\n\nA class definition includes the following elements:\n\n* **Class name.** The name of the class.\n* **Inheritance details.** A list of other classes from which properties are inherited, if any. Each class is a hyperlink—clicking it takes you to the definition for the corresponding class.\n* **Containment details.** A list of contained classes, if any. May also list other classes containing the class, if any.\n* **Properties.** Any properties for the class, along with their data types. Read-only properties include an `r/o` indicator.\n\nTo view inherited properties, as well as containing classes in the Script Editor dictionary viewer, select Show inherited items in Preferences &gt; General. See Figure 12-6.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH77-SW11\"></a>\n**Figure 12-6**Enabling inherited item dictionary details in Script Editor\n![image: ../Art/script-editor_preferences_window_showinheriteditems_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_preferences_window_showinheriteditems_2x.png)\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/NavigateaScriptingDictionary.html", "sha256": "9ace12c4bae7d4b47c2ddaba2bbe92449ee00e6d96992efc00372f310de9475b", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "OpenaScriptingDictionary.md", "title": "Opening a Scripting Dictionary", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH76\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW1\"></a>\n\n## Opening a Scripting Dictionary\n\nScript Editor can open dictionaries and display their contents for you to consult while writing scripts.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW2\"></a>\n\n**To open a scripting dictionary in Script Editor**\n\nDo one of the following:\n\n* Drag an app or scripting addition onto Script Editor in the Dock or in the Finder.\n\n  <a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW3\"></a>\n\n  ![image: ../Art/open_dictionary_drop_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/open_dictionary_drop_2x.png)\n* Choose File &gt; Open Dictionary (or press Shift-Command-O), and select a scriptable app or scripting addition.\n\n  <a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW4\"></a>\n\n  ![image: ../Art/script-editor_open-dictionary_menu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_open-dictionary_menu_2x.png)\n* Double-click an app or scripting addition in the Library palette. If the Library palette isn’t visible, choose Window &gt; Library (or press Shift-Command-L) to display it. Click the Add button (+) in the Library palette to add a new app or scripting addition to the list for quick access in the future.\n\n  <a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW5\"></a>\n\n  ![image: ../Art/script-editor_library_palette_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_library_palette_2x.png)\n\nAn error message is displayed if you attempt to open an app without scripting terminology—a nonscriptable app.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH76-SW6\"></a>\n\n![image: ../Art/script-editor_dictionary-error_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_dictionary-error_2x.png)\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/OpenaScriptingDictionary.html", "sha256": "7d31bc9444f9b08cff8e7067d03c8d07448b812b8f76ce6d229798b189d0097c", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ParseHTML.md", "title": "Parsing HTML", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH50\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW1\"></a>\n\n## Parsing HTML\n\nThe process of reading an HTML file is no different than the process of reading a standard text file—see [Reading a File](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ReadandWriteFiles.md#//apple_ref/doc/uid/TP40016239-CH58-SW2) to learn how to do it. However, it’s often necessary to extract specific bits of information from HTML files, such as links, images, and table data, for further processing.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW6\"></a>\n\n### Parsing an HTML File\n\nThe handler in Listing 33-1 extracts specific tags and their content from HTML text. Provide an HTML file to read, a closing and ending tag, and indicate whether to return only content between the tags, or the tags with their enclosed content. If no closing tag is provided, the handler extracts the opening tag data only. This feature could be used to extract image tags from HTML content, for example, which don’t have a separate closing tag.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20parseHTMLFile%28theFile%2C%20theOpeningTag%2C%20theClosingTag%2C%20returnContentsOnly%29%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%20%20%20%20%20%20%20%20set%20theFile%20to%20open%20for%20access%20file%20theFile%0A%20%20%20%20%20%20%20%20set%20theCombinedResults%20to%20%22%22%0A%20%20%20%20%20%20%20%20set%20theCurrentOpeningTag%20to%20%22%22%0A%20%20%20%20%20%20%20%20repeat%0A%20%20%20%20%20%20%20%20%20%20%20%20read%20theFile%20before%20%22%3C%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theCurrentTag%20to%20read%20theFile%20until%20%22%3E%22%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theCurrentTag%20does%20not%20start%20with%20%22%3C%22%20then%20set%20theCurrentTag%20to%20%28%22%3C%22%20%26%20theCurrentTag%29%20as%20string%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20theCurrentTag%20begins%20with%20theOpeningTag%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCurrentOpeningTag%20to%20theCurrentTag%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theClosingTag%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theCombinedResults%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCombinedResults%20to%20theCombinedResults%20%26%20theCurrentOpeningTag%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCombinedResults%20to%20theCombinedResults%20%26%20return%20%26%20theCurrentOpeningTag%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theTextBuffer%20to%20%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20repeat%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theTextBuffer%20to%20theTextBuffer%20%26%20%28read%20theFile%20before%20%22%3C%22%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theTagBuffer%20to%20read%20theFile%20until%20%22%3E%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theTagBuffer%20does%20not%20start%20with%20%22%3C%22%20then%20set%20theTagBuffer%20to%20%28%22%3C%22%20%26%20theTagBuffer%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theTagBuffer%20is%20theClosingTag%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20returnContentsOnly%20is%20false%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theTextBuffer%20to%20theCurrentOpeningTag%20%26%20theTextBuffer%20%26%20theTagBuffer%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20theCombinedResults%20is%20%22%22%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCombinedResults%20to%20theCombinedResults%20%26%20theTextBuffer%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCombinedResults%20to%20theCombinedResults%20%26%20return%20%26%20theTextBuffer%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exit%20repeat%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theTextBuffer%20to%20theTextBuffer%20%26%20theTagBuffer%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20%20%20%20%20close%20access%20theFile%0A%20%20%20%20on%20error%20theErrorMessage%20number%20theErrorNumber%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20close%20access%20theFile%0A%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20%20%20%20%20if%20theErrorNumber%20is%20not%20-39%20then%20return%20false%0A%20%20%20%20end%20try%0A%20%20%20%20return%20theCombinedResults%0Aend%20parseHTMLFile%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW2\"></a>\n**Listing 33-1**AppleScript: Handler that parses an HTML file for specific tagged content\n\n1. `on parseHTMLFile(theFile, theOpeningTag, theClosingTag, returnContentsOnly)`\n2. ` try`\n3. ` set theFile to theFile as string`\n4. ` set theFile to open for access file theFile`\n5. ` set theCombinedResults to \"\"`\n6. ` set theCurrentOpeningTag to \"\"`\n7. ` repeat`\n8. ` read theFile before \"&lt;\"`\n9. ` set theCurrentTag to read theFile until \"&gt;\"`\n10. ` if theCurrentTag does not start with \"&lt;\" then set theCurrentTag to (\"&lt;\" & theCurrentTag) as string`\n11. ` if theCurrentTag begins with theOpeningTag then`\n12. ` set theCurrentOpeningTag to theCurrentTag`\n13. ` if theClosingTag is \"\" then`\n14. ` if theCombinedResults is \"\" then`\n15. ` set theCombinedResults to theCombinedResults & theCurrentOpeningTag`\n16. ` else`\n17. ` set theCombinedResults to theCombinedResults & return & theCurrentOpeningTag`\n18. ` end if`\n19. ` else`\n20. ` set theTextBuffer to \"\"`\n21. ` repeat`\n22. ` set theTextBuffer to theTextBuffer & (read theFile before \"&lt;\")`\n23. ` set theTagBuffer to read theFile until \"&gt;\"`\n24. ` if theTagBuffer does not start with \"&lt;\" then set theTagBuffer to (\"&lt;\" & theTagBuffer)`\n25. ` if theTagBuffer is theClosingTag then`\n26. ` if returnContentsOnly is false then`\n27. ` set theTextBuffer to theCurrentOpeningTag & theTextBuffer & theTagBuffer`\n28. ` end if`\n29. ` if theCombinedResults is \"\" then`\n30. ` set theCombinedResults to theCombinedResults & theTextBuffer`\n31. ` else`\n32. ` set theCombinedResults to theCombinedResults & return & theTextBuffer`\n33. ` end if`\n34. ` exit repeat`\n35. ` else`\n36. ` set theTextBuffer to theTextBuffer & theTagBuffer`\n37. ` end if`\n38. ` end repeat`\n39. ` end if`\n40. ` end if`\n41. ` end repeat`\n42. ` close access theFile`\n43. ` on error theErrorMessage number theErrorNumber`\n44. ` try`\n45. ` close access theFile`\n46. ` end try`\n47. ` if theErrorNumber is not -39 then return false`\n48. ` end try`\n49. ` return theCombinedResults`\n50. `end parseHTMLFile`\n\nListing 33-2 shows how to call the handler in Listing 33-1 to extract all hyperlinks within a chosen HTML file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20with%20prompt%20%22Select%20an%20HTML%20file%3A%22%0AparseHTMLFile%28theFile%2C%20%22%3CA%20HREF%3D%22%2C%20%22%3C%2FA%3E%22%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW3\"></a>\n**Listing 33-2**AppleScript: Calling a handler to parse an HTML file for URLs\n\n1. `set theFile to choose file with prompt \"Select an HTML file:\"`\n2. `parseHTMLFile(theFile, \"&lt;A HREF=\", \"&lt;/A&gt;\", false)`\n3. `--&gt; Example of Result: \"&lt;A HREF=\"http://www.apple.com/fileA.html\"&gt;Click here to view fileA.&lt;/A&gt;`\n4. `&lt;A HREF=\"http://www.apple.com/fileB.html\"&gt;Click here to view fileB.&lt;/A&gt;\"`\n\nListing 33-3 shows how to call the handler in Listing 33-1 to extract the destinations of all hyperlinks within a chosen HTML file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20with%20prompt%20%22Select%20an%20HTML%20file%3A%22%0AparseHTMLFile%28theFile%2C%20%22%3CA%20HREF%3D%22%2C%20%22%3C%2FA%3E%22%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW7\"></a>\n**Listing 33-3**AppleScript: Calling a handler to parse an HTML file for URLs\n\n1. `set theFile to choose file with prompt \"Select an HTML file:\"`\n2. `parseHTMLFile(theFile, \"&lt;A HREF=\", \"&lt;/A&gt;\", true)`\n3. `--&gt; Example of Result: \"Click here to view fileA.`\n4. `Click here to view fileB.\"`\n\nListing 33-4 shows how to call the handler in Listing 33-1 to extract all images within a chosen HTML file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20with%20prompt%20%22Select%20an%20HTML%20file%3A%22%0AparseHTMLFile%28theFile%2C%20%22%3CIMG%20%22%2C%20%22%22%2C%20false%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW4\"></a>\n**Listing 33-4**AppleScript: Calling a handler to parse an HTML file for images\n\n1. `set theFile to choose file with prompt \"Select an HTML file:\"`\n2. `parseHTMLFile(theFile, \"&lt;IMG \", \"\", false)`\n3. `--&gt; Example of Result: \"&lt;IMG SRC=\"gfx/clipboard.gif\" BORDER=\"0\"&gt;`\n4. `&lt;IMG SRC=\"printer_stopped.gif\" ALIGN=TOP WIDTH=\"32\" HEIGHT=\"32\" BORDER=\"0\"&gt;`\n5. `&lt;IMG SRC=\"printer_on.gif\" ALIGN=TOP WIDTH=\"32\" HEIGHT=\"32\" BORDER=\"0\"&gt;\"`\n\nListing 33-5 shows how to call the handler in Listing 33-1 to extract any tables within a file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20with%20prompt%20%22Select%20an%20HTML%20file%3A%22%0AparseHTMLFile%28theFile%2C%20%22%3CTABLE%22%2C%20%22%3C%2FTABLE%3E%22%2C%20false%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW5\"></a>\n**Listing 33-5**AppleScript: Calling a handler to parse an HTML file for tables\n\n1. `set theFile to choose file with prompt \"Select an HTML file:\"`\n2. `parseHTMLFile(theFile, \"&lt;TABLE\", \"&lt;/TABLE&gt;\", false)`\n3. `--&gt; Example of Result:\"&lt;TABLE WIDTH=\"440\"&gt;`\n4. `&lt;TR&gt;`\n5. `&lt;TD ALIGN=\"CENTER\" VALIGN=\"TOP\"&gt;`\n6. `&lt;IMG SRC=\"gfx/clipboard.gif\" BORDER=\"0\"&gt;`\n7. `&lt;/TD&gt;`\n8. `&lt;/TR&gt;`\n9. `&lt;/TABLE&gt;\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW8\"></a>\n\n### Parsing an HTML Tag\n\nThe handler in Listing 33-6 extracts the contents—first instance of text contained within quotes—of an HTML tag.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20parseHTMLTag%28theHTMLTag%29%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%5C%22%22%0A%20%20%20%20set%20theHTMLTagElements%20to%20text%20items%20of%20theHTMLTag%0A%20%20%20%20set%20AppleScript%27s%20text%20item%20delimiters%20to%20%22%22%0A%20%20%20%20if%20length%20of%20theHTMLTagElements%20is%20greater%20than%201%20then%20return%20item%202%20of%20theHTMLTagElements%0A%20%20%20%20return%20%22%22%0Aend%20parseHTMLTag)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW9\"></a>\n**Listing 33-6**AppleScript: Handler that parses an HTML tag for content\n\n1. `on parseHTMLTag(theHTMLTag)`\n2. ` set AppleScript's text item delimiters to \"\\\\\"\"`\n3. ` set theHTMLTagElements to text items of theHTMLTag`\n4. ` set AppleScript's text item delimiters to \"\"`\n5. ` if length of theHTMLTagElements is greater than 1 then return item 2 of theHTMLTagElements`\n6. ` return \"\"`\n7. `end parseHTMLTag`\n\nListing 33-7 shows how to call the handler in Listing 33-6 to extract the destination of a hyperlink tag.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theHTMLTag%20to%20%22%3CA%20HREF%3D%5C%22http%3A%2F%2Fwww.apple.com%2FfileA.html%5C%22%3EClick%20here%20to%20view%20fileA.%3C%2FA%3E%22%0AparseHTMLTag%28theHTMLTag%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH50-SW10\"></a>\n**Listing 33-7**AppleScript: Calling a handler to parse an HTML tag for content\n\n1. `set theHTMLTag to \"&lt;A HREF=\\\\\"http://www.apple.com/fileA.html\\\\\"&gt;Click here to view fileA.&lt;/A&gt;\"`\n2. `parseHTMLTag(theHTMLTag)`\n3. `--&gt; Result: \"http://www.apple.com/fileA.html\"`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ParseHTML.html", "sha256": "f8b6fabd1c9e989872b6228cf61f49b7e9ec481144a6b2be19709459e5224688", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ProcessDroppedFilesandFolders.md", "title": "Processing Dropped Files and Folders", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH53\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW1\"></a>\n\n## Processing Dropped Files and Folders\n\nDroplets are applets configured to process dropped files and folders. A droplet is distinguishable from a normal applet because its icon includes a downward pointing arrow, as shown in Figure 17-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW2\"></a>\n**Figure 17-1**A script droplet icon\n![image: ../Art/icon_droplet_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_droplet_2x.png)\n\nTo create an AppleScript droplet, include an `open` event handler in your script and save the script as an application. To create a JavaScript droplet, include an `openDocuments` function in your script and save the script as an application. The presence of this handler or function automatically renders the saved application as a droplet, allowing it to accept dropped files and folders in the Finder. The `open` handler and `openDocuments` function accept a single parameter—a list of dropped files or folders—which are passed to the handler when the script is activated by dropping something onto it. In AppleScript, these dropped files and folders are `alias` objects. In JavaScript, they’re `Path` objects. For more information about these types of objects, see [Referencing Files and Folders](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ReferenceFilesandFolders.md#//apple_ref/doc/uid/TP40016239-CH34-SW1).\n\nAn AppleScript `open` handler is formatted as shown in Listing 17-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20open%20theDroppedItems%0A%20%20%20%20--%20Process%20the%20dropped%20items%20here%0Aend%20open)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW3\"></a>\n**Listing 17-1**AppleScript: Structure of an `open` handler\n\n1. `on open theDroppedItems`\n2. ` -- Process the dropped items here`\n3. `end open`\n\nA JavaScript `openDocuments` function is formatted as shown in Listing 17-2.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20openDocuments%28droppedItems%29%20%7B%0A%20%20%20%20%2F%2F%20Process%20the%20dropped%20items%20here%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW12\"></a>\n**Listing 17-2**JavaScript: Structure of an `openDocuments` function\n\n1. `function openDocuments(droppedItems) {`\n2. ` // Process the dropped items here`\n3. `}`\n\nTypically, a droplet loops through items dropped onto it, processing them individually, as in Listing 17-3 and Listing 17-4.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20open%20theDroppedItems%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20length%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20set%20theCurrentDroppedItem%20to%20item%20a%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20--%20Process%20each%20dropped%20item%20here%0A%20%20%20%20end%20repeat%0Aend%20open)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW4\"></a>\n**Listing 17-3**AppleScript: An `open` handler that loops through dropped items\n\n1. `on open theDroppedItems`\n2. ` repeat with a from 1 to length of theDroppedItems`\n3. ` set theCurrentDroppedItem to item a of theDroppedItems`\n4. ` -- Process each dropped item here`\n5. ` end repeat`\n6. `end open`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20openDocuments%28droppedItems%29%20%7B%0A%20%20%20%20for%20%28var%20item%20of%20droppedItems%29%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20each%20dropped%20item%20here%0A%20%20%20%20%7D%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW14\"></a>\n**Listing 17-4**JavaScript: An `openDocuments` function that loops through dropped items\n\n1. `function openDocuments(droppedItems) {`\n2. ` for (var item of droppedItems) {`\n3. ` // Process each dropped item here`\n4. ` }`\n5. `}`\n\nTo run a droplet, drop files or folders onto it in the Finder. To test a droplet in Script Editor, add the following line(s) of code to the root level—the `run` handler portion—of the script. Listing 17-5 and Listing 17-6 prompt you to select a file and then passes it to the `open` handler or `openDocuments` function.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=open%20%7Bchoose%20file%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW5\"></a>\n**Listing 17-5**AppleScript: Calling the `open` handler to test a droplet within Script Editor\n\n1. `open {choose file}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0Avar%20file%20%3D%20app.chooseFile%28%29%0AopenDocuments%28%5Bfile%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW15\"></a>\n**Listing 17-6**JavaScript: Calling the `openDocuments` handler to test a droplet within Script Editor\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n3. `var file = app.chooseFile()`\n4. `openDocuments([file])`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW6\"></a>\n\n### Creating an AppleScript Droplet from a Script Editor Template\n\nScript Editor includes several preconfigured AppleScript droplet templates, which solve the majority of droplet use cases.\n\n> **Note**\n>\n>\n> Script Editor does not include JavaScript templates at this time.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW7\"></a>\n\n**To create a droplet from a Script Editor template**\n\n1. Launch Script Editor from `/Applications/Utilities/`.\n2. Select File &gt; New from Template &gt; Droplets.\n3. Choose a droplet template.\n\n   Options include:\n\n   * **Droplet with Settable Properties**—This template processes dropped files based on file type, extension, or type identifier. It also demonstrates how to include a user-configurable setting, which affects the behavior of the script.\n   * **Recursive File Processing Droplet**—This template processes dropped files based on file type, extension, or type identifier. It is configured to detect files within dropped folders and their subfolders.\n   * **Recursive Image File Processing Droplet**—This template processes image files matching specific file types, extensions, or type identifiers. It is configured to detect images within dropped folders and their subfolders.\n\n   All of these templates are designed to serve as starting points for creating a droplet, and can be customized, as needed.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW8\"></a>\n\n### Creating a Droplet to Process Files\n\nIn Listing 17-7 and Listing 17-8, the `open` handler and `openDocuments` function process dropped files based on file type, extension, or type identifier. The file types, extensions, and type identifiers supported by the handler are configurable in properties at the top of the script. If a dropped file matches the criteria you configure, then the file is passed to the `processItem()` handler, where you can add custom file processing code. These examples are not configured to process dropped folders.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=property%20theFileTypesToProcess%20%3A%20%7B%7D%20--%20For%20example%3A%20%7B%22PICT%22%2C%20%22JPEG%22%2C%20%22TIFF%22%2C%20%22GIFf%22%7D%0Aproperty%20theExtensionsToProcess%20%3A%20%7B%7D%20--%20For%20example%3A%20%7B%22txt%22%2C%20%22text%22%2C%20%22jpg%22%2C%20%22jpeg%22%7D%2C%20NOT%3A%20%7B%22.txt%22%2C%20%22.text%22%2C%20%22.jpg%22%2C%20%22.jpeg%22%7D%0Aproperty%20theTypeIdentifiersToProcess%20%3A%20%7B%7D%20--%20For%20example%3A%20%7B%22public.jpeg%22%2C%20%22public.tiff%22%2C%20%22public.png%22%7D%0A%0Aon%20open%20theDroppedItems%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theExtension%20to%20name%20extension%20of%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theFileType%20to%20file%20type%20of%20theCurrentItem%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theTypeIdentifier%20to%20type%20identifier%20of%20theCurrentItem%0A%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20if%20%28%28theFileTypesToProcess%20contains%20theFileType%29%20or%20%28theExtensionsToProcess%20contains%20theExtension%29%20or%20%28theTypeIdentifiersToProcess%20contains%20theTypeIdentifier%29%29%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20processItem%28theCurrentItem%29%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0Aend%20open%0A%0Aon%20processItem%28theItem%29%0A%20%20%20%20--%20NOTE%3A%20The%20variable%20theItem%20is%20a%20file%20reference%20in%20AppleScript%20alias%20format%0A%20%20%20%20--%20Add%20item%20processing%20code%20here%0Aend%20processItem)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW9\"></a>\n**Listing 17-7**Handler that processes dropped files matching specific file types, extensions, or type identifiers\n\n1. `property theFileTypesToProcess : {} -- For example: {\"PICT\", \"JPEG\", \"TIFF\", \"GIFf\"}`\n2. `property theExtensionsToProcess : {} -- For example: {\"txt\", \"text\", \"jpg\", \"jpeg\"}, NOT: {\".txt\", \".text\", \".jpg\", \".jpeg\"}`\n3. `property theTypeIdentifiersToProcess : {} -- For example: {\"public.jpeg\", \"public.tiff\", \"public.png\"}`\n5. `on open theDroppedItems`\n6. ` repeat with a from 1 to count of theDroppedItems`\n7. ` set theCurrentItem to item a of theDroppedItems`\n8. ` tell application \"System Events\"`\n9. ` set theExtension to name extension of theCurrentItem`\n10. ` set theFileType to file type of theCurrentItem`\n11. ` set theTypeIdentifier to type identifier of theCurrentItem`\n12. ` end tell`\n13. ` if ((theFileTypesToProcess contains theFileType) or (theExtensionsToProcess contains theExtension) or (theTypeIdentifiersToProcess contains theTypeIdentifier)) then`\n14. ` processItem(theCurrentItem)`\n15. ` end if`\n16. ` end repeat`\n17. `end open`\n19. `on processItem(theItem)`\n20. ` -- NOTE: The variable theItem is a file reference in AppleScript alias format`\n21. ` -- Add item processing code here`\n22. `end processItem`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20SystemEvents%20%3D%20Application%28%22System%20Events%22%29%0Avar%20fileTypesToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22PICT%22%2C%20%22JPEG%22%2C%20%22TIFF%22%2C%20%22GIFf%22%7D%0Avar%20extensionsToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22txt%22%2C%20%22text%22%2C%20%22jpg%22%2C%20%22jpeg%22%7D%2C%20NOT%3A%20%7B%22.txt%22%2C%20%22.text%22%2C%20%22.jpg%22%2C%20%22.jpeg%22%7D%0Avar%20typeIdentifiersToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22public.jpeg%22%2C%20%22public.tiff%22%2C%20%22public.png%22%7D%0A%0Afunction%20openDocuments%28droppedItems%29%20%7B%0A%20%20%20%20for%20%28var%20item%20of%20droppedItems%29%20%7B%0A%20%20%20%20%20%20%20%20var%20alias%20%3D%20SystemEvents.aliases.byName%28item.toString%28%29%29%0A%20%20%20%20%20%20%20%20var%20extension%20%3D%20alias.nameExtension%28%29%0A%20%20%20%20%20%20%20%20var%20fileType%20%3D%20alias.fileType%28%29%0A%20%20%20%20%20%20%20%20var%20typeIdentifier%20%3D%20alias.typeIdentifier%28%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28fileTypesToProcess.includes%28fileType%29%20%7C%7C%20extensionsToProcess.includes%28extension%29%20%7C%7C%20typeIdentifiersToProcess.includes%28typeIdentifier%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20processItem%28item%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afunction%20processItem%28item%29%20%7B%0A%20%20%20%20%2F%2F%20NOTE%3A%20The%20variable%20item%20is%20an%20instance%20of%20the%20Path%20object%0A%20%20%20%20%2F%2F%20Add%20item%20processing%20code%20here%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW16\"></a>\n**Listing 17-8**Function that processes dropped files matching specific file types, extensions, or type identifiers\n\n1. `var SystemEvents = Application(\"System Events\")`\n2. `var fileTypesToProcess = [] // For example: {\"PICT\", \"JPEG\", \"TIFF\", \"GIFf\"}`\n3. `var extensionsToProcess = [] // For example: {\"txt\", \"text\", \"jpg\", \"jpeg\"}, NOT: {\".txt\", \".text\", \".jpg\", \".jpeg\"}`\n4. `var typeIdentifiersToProcess = [] // For example: {\"public.jpeg\", \"public.tiff\", \"public.png\"}`\n6. `function openDocuments(droppedItems) {`\n7. ` for (var item of droppedItems) {`\n8. ` var alias = SystemEvents.aliases.byName(item.toString())`\n9. ` var extension = alias.nameExtension()`\n10. ` var fileType = alias.fileType()`\n11. ` var typeIdentifier = alias.typeIdentifier()`\n12. ` if (fileTypesToProcess.includes(fileType) || extensionsToProcess.includes(extension) || typeIdentifiersToProcess.includes(typeIdentifier)) {`\n13. ` processItem(item)`\n14. ` }`\n15. ` }`\n16. `}`\n18. `function processItem(item) {`\n19. ` // NOTE: The variable item is an instance of the Path object`\n20. ` // Add item processing code here`\n21. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW10\"></a>\n\n### Creating a Droplet to Process Files and Folders\n\nIn Listing 17-9 and Listing 17-10, the `open` handler and `openDocuments` function loop through any dropped files and folders.\n\nFor each dropped file, the script calls the `processFile()` handler, which determines whether the file matches specific file types, extensions, and type identifiers. The file types, extensions, and type identifiers supported by the handler are configurable in properties at the top of the script. If there’s a match, then any custom file processing code you add runs.\n\nThe script passes each dropped folder to the `processFolder()`, which retrieves a list of files and subfolders within the dropped folder. The `processFolder()` handler recursively calls itself to process any additional subfolders. It calls the `processFile()` handler to process any detected files. If necessary, you can add custom folder processing code to the `processFolder()` handler.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=property%20theFileTypesToProcess%20%3A%20%7B%7D%20--%20I.e.%20%7B%22PICT%22%2C%20%22JPEG%22%2C%20%22TIFF%22%2C%20%22GIFf%22%7D%0Aproperty%20theExtensionsToProcess%20%3A%20%7B%7D%20--%20I.e.%20%7B%22txt%22%2C%20%22text%22%2C%20%22jpg%22%2C%20%22jpeg%22%7D%2C%20NOT%3A%20%7B%22.txt%22%2C%20%22.text%22%2C%20%22.jpg%22%2C%20%22.jpeg%22%7D%0Aproperty%20theTypeIdentifiersToProcess%20%3A%20%7B%7D%20--%20I.e.%20%7B%22public.jpeg%22%2C%20%22public.tiff%22%2C%20%22public.png%22%7D%0A%0Aon%20open%20theDroppedItems%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20item%20a%20of%20theDroppedItems%0A%20%20%20%20%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20isFolder%20to%20folder%20%28theCurrentItem%20as%20string%29%20exists%0A%20%20%20%20%20%20%20%20end%20tell%0A%0A%20%20%20%20%20%20%20--%20Process%20a%20dropped%20folder%0A%20%20%20%20%20%20%20if%20isFolder%20%3D%20true%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20processFolder%28theCurrentItem%29%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Process%20a%20dropped%20file%0A%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20processFile%28theCurrentItem%29%0A%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0Aend%20open%0A%0Aon%20processFolder%28theFolder%29%0A%20%20%20%20--%20NOTE%3A%20The%20variable%20theFolder%20is%20a%20folder%20reference%20in%20AppleScript%20alias%20format%0A%20%20%20%20--%20Retrieve%20a%20list%20of%20any%20visible%20items%20in%20the%20folder%0A%20%20%20%20set%20theFolderItems%20to%20list%20folder%20theFolder%20without%20invisibles%0A%0A%20%20%20%20--%20Loop%20through%20the%20visible%20folder%20items%0A%20%20%20%20repeat%20with%20a%20from%201%20to%20count%20of%20theFolderItems%0A%20%20%20%20%20%20%20%20set%20theCurrentItem%20to%20%28%28theFolder%20as%20string%29%20%26%20%28item%20a%20of%20theFolderItems%29%29%20as%20alias%0A%20%20%20%20%20%20%20%20open%20%7BtheCurrentItem%7D%0A%20%20%20%20end%20repeat%0A%20%20%20%20--%20Add%20additional%20folder%20processing%20code%20here%0Aend%20processFolder%0A%0Aon%20processFile%28theItem%29%0A%20%20%20%20--%20NOTE%3A%20variable%20theItem%20is%20a%20file%20reference%20in%20AppleScript%20alias%20format%0A%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20set%20theExtension%20to%20name%20extension%20of%20theItem%0A%20%20%20%20%20%20%20%20set%20theFileType%20to%20file%20type%20of%20theItem%0A%20%20%20%20%20%20%20%20set%20theTypeIdentifier%20to%20type%20identifier%20of%20theItem%0A%20%20%20%20end%20tell%0A%20%20%20%20if%20%28%28theFileTypesToProcess%20contains%20theFileType%29%20or%20%28theExtensionsToProcess%20contains%20theExtension%29%20or%20%28theTypeIdentifiersToProcess%20contains%20theTypeIdentifier%29%29%20then%0A%20%20%20%20%20%20%20%20--%20Add%20file%20processing%20code%20here%0A%20%20%20%20%20%20%20%20display%20dialog%20theItem%20as%20string%0A%20%20%20%20end%20if%0Aend%20processFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW11\"></a>\n**Listing 17-9**Handler that processes dropped folders and files\n\n1. `property theFileTypesToProcess : {} -- I.e. {\"PICT\", \"JPEG\", \"TIFF\", \"GIFf\"}`\n2. `property theExtensionsToProcess : {} -- I.e. {\"txt\", \"text\", \"jpg\", \"jpeg\"}, NOT: {\".txt\", \".text\", \".jpg\", \".jpeg\"}`\n3. `property theTypeIdentifiersToProcess : {} -- I.e. {\"public.jpeg\", \"public.tiff\", \"public.png\"}`\n5. `on open theDroppedItems`\n6. ` repeat with a from 1 to count of theDroppedItems`\n7. ` set theCurrentItem to item a of theDroppedItems`\n8. ` tell application \"Finder\"`\n9. ` set isFolder to folder (theCurrentItem as string) exists`\n10. ` end tell`\n12. ` -- Process a dropped folder`\n13. ` if isFolder = true then`\n14. ` processFolder(theCurrentItem)`\n16. ` -- Process a dropped file`\n17. ` else`\n18. ` processFile(theCurrentItem)`\n19. ` end if`\n20. ` end repeat`\n21. `end open`\n23. `on processFolder(theFolder)`\n24. ` -- NOTE: The variable theFolder is a folder reference in AppleScript alias format`\n25. ` -- Retrieve a list of any visible items in the folder`\n26. ` set theFolderItems to list folder theFolder without invisibles`\n28. ` -- Loop through the visible folder items`\n29. ` repeat with a from 1 to count of theFolderItems`\n30. ` set theCurrentItem to ((theFolder as string) & (item a of theFolderItems)) as alias`\n31. ` open {theCurrentItem}`\n32. ` end repeat`\n33. ` -- Add additional folder processing code here`\n34. `end processFolder`\n36. `on processFile(theItem)`\n37. ` -- NOTE: variable theItem is a file reference in AppleScript alias format`\n38. ` tell application \"System Events\"`\n39. ` set theExtension to name extension of theItem`\n40. ` set theFileType to file type of theItem`\n41. ` set theTypeIdentifier to type identifier of theItem`\n42. ` end tell`\n43. ` if ((theFileTypesToProcess contains theFileType) or (theExtensionsToProcess contains theExtension) or (theTypeIdentifiersToProcess contains theTypeIdentifier)) then`\n44. ` -- Add file processing code here`\n45. ` display dialog theItem as string`\n46. ` end if`\n47. `end processFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20SystemEvents%20%3D%20Application%28%22System%20Events%22%29%0Avar%20fileManager%20%3D%20%24.NSFileManager.defaultManager%0Avar%20currentApp%20%3D%20Application.currentApplication%28%29%0AcurrentApp.includeStandardAdditions%20%3D%20true%0A%0Avar%20fileTypesToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22PICT%22%2C%20%22JPEG%22%2C%20%22TIFF%22%2C%20%22GIFf%22%7D%0Avar%20extensionsToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22txt%22%2C%20%22text%22%2C%20%22jpg%22%2C%20%22jpeg%22%7D%2C%20NOT%3A%20%7B%22.txt%22%2C%20%22.text%22%2C%20%22.jpg%22%2C%20%22.jpeg%22%7D%0Avar%20typeIdentifiersToProcess%20%3D%20%5B%5D%20%2F%2F%20For%20example%3A%20%7B%22public.jpeg%22%2C%20%22public.tiff%22%2C%20%22public.png%22%7D%0A%0Afunction%20openDocuments%28droppedItems%29%20%7B%0A%20%20%20%20for%20%28var%20item%20of%20droppedItems%29%20%7B%0A%20%20%20%20%20%20%20%20var%20isDir%20%3D%20Ref%28%29%0A%20%20%20%20%20%20%20%20if%20%28fileManager.fileExistsAtPathIsDirectory%28item.toString%28%29%2C%20isDir%29%20%26%26%20isDir%5B0%5D%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20processFolder%28item%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20processFile%28item%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afunction%20processFolder%28folder%29%20%7B%0A%20%20%20%20%2F%2F%20NOTE%3A%20The%20variable%20folder%20is%20an%20instance%20of%20the%20Path%20object%0A%20%20%20%20var%20folderString%20%3D%20folder.toString%28%29%0A%0A%20%20%20%20%2F%2F%20Retrieve%20a%20list%20of%20any%20visible%20items%20in%20the%20folder%0A%20%20%20%20var%20folderItems%20%3D%20currentApp.listFolder%28folder%2C%20%7B%20invisibles%3A%20false%20%7D%29%0A%0A%20%20%20%20%2F%2F%20Loop%20through%20the%20visible%20folder%20items%0A%20%20%20%20for%20%28var%20item%20of%20folderItems%29%20%7B%0A%20%20%20%20%20%20%20%20var%20currentItem%20%3D%20%60%24%7BfolderString%7D%2F%24%7Bitem%7D%60%0A%20%20%20%20%20%20%20%20openDocuments%28%5BcurrentItem%5D%29%0A%20%20%20%20%7D%0A%20%20%20%20%2F%2F%20Add%20additional%20folder%20processing%20code%20here%0A%7D%0A%0Afunction%20processFile%28file%29%20%7B%0A%20%20%20%20%2F%2F%20NOTE%3A%20The%20variable%20file%20is%20an%20instance%20of%20the%20Path%20object%0A%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%20%20%20%20var%20alias%20%3D%20SystemEvents.aliases.byName%28fileString%29%0A%20%20%20%20var%20extension%20%3D%20alias.nameExtension%28%29%0A%20%20%20%20var%20fileType%20%3D%20alias.fileType%28%29%0A%20%20%20%20var%20typeIdentifier%20%3D%20alias.typeIdentifier%28%29%0A%20%20%20%20if%20%28fileTypesToProcess.includes%28fileType%29%20%7C%7C%20extensionsToProcess.includes%28extension%29%20%7C%7C%20typeIdentifiersToProcess.includes%28typeIdentifier%29%29%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Add%20file%20processing%20code%20here%0A%20%20%20%20%7D%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH53-SW17\"></a>\n**Listing 17-10**Function that processes dropped folders and files\n\n1. `var SystemEvents = Application(\"System Events\")`\n2. `var fileManager = $.NSFileManager.defaultManager`\n3. `var currentApp = Application.currentApplication()`\n4. `currentApp.includeStandardAdditions = true`\n6. `var fileTypesToProcess = [] // For example: {\"PICT\", \"JPEG\", \"TIFF\", \"GIFf\"}`\n7. `var extensionsToProcess = [] // For example: {\"txt\", \"text\", \"jpg\", \"jpeg\"}, NOT: {\".txt\", \".text\", \".jpg\", \".jpeg\"}`\n8. `var typeIdentifiersToProcess = [] // For example: {\"public.jpeg\", \"public.tiff\", \"public.png\"}`\n10. `function openDocuments(droppedItems) {`\n11. ` for (var item of droppedItems) {`\n12. ` var isDir = Ref()`\n13. ` if (fileManager.fileExistsAtPathIsDirectory(item.toString(), isDir) && isDir[0]) {`\n14. ` processFolder(item)`\n15. ` }`\n16. ` else {`\n17. ` processFile(item)`\n18. ` }`\n19. ` }`\n20. `}`\n22. `function processFolder(folder) {`\n23. ` // NOTE: The variable folder is an instance of the Path object`\n24. ` var folderString = folder.toString()`\n26. ` // Retrieve a list of any visible items in the folder`\n27. ` var folderItems = currentApp.listFolder(folder, { invisibles: false })`\n29. ` // Loop through the visible folder items`\n30. ` for (var item of folderItems) {`\n31. ``  var currentItem = `${folderString}/${item}` ``\n32. ` openDocuments([currentItem])`\n33. ` }`\n34. ` // Add additional folder processing code here`\n35. `}`\n37. `function processFile(file) {`\n38. ` // NOTE: The variable file is an instance of the Path object`\n39. ` var fileString = file.toString()`\n40. ` var alias = SystemEvents.aliases.byName(fileString)`\n41. ` var extension = alias.nameExtension()`\n42. ` var fileType = alias.fileType()`\n43. ` var typeIdentifier = alias.typeIdentifier()`\n44. ` if (fileTypesToProcess.includes(fileType) || extensionsToProcess.includes(extension) || typeIdentifiersToProcess.includes(typeIdentifier)) {`\n45. ` // Add file processing code here`\n46. ` }`\n47. `}`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ProcessDroppedFilesandFolders.html", "sha256": "cbfb7b6e82dae3464575d0ca295f7c23086d2afb6f87094960ab16a78960d540", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "PromptforText.md", "title": "Prompting for Text", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH80\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW1\"></a>\n\n## Prompting for Text\n\nUse the `display dialog` command’s optional `default answer` parameter to collect text, such as a username or email address, as your script runs. As demonstrated by Figure 23-1, Listing 23-1, and Listing 23-2, the inclusion of the `default answer` parameter automatically adds a text entry field to the resulting dialog. Any string you provide for the parameter appears in the text field when the dialog displays. Providing an empty string (`\"\"`) produces an empty text field. When the dialog dismisses, any text from the field is returned in a `text returned` property of the `display dialog` command’s result.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW3\"></a>\n**Figure 23-1**A dialog prompting for text input\n![image: ../Art/dialog_promptfortext_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dialog_promptfortext_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theResponse%20to%20display%20dialog%20%22What%27s%20your%20name%3F%22%20default%20answer%20%22%22%20with%20icon%20note%20buttons%20%7B%22Cancel%22%2C%20%22Continue%22%7D%20default%20button%20%22Continue%22%0A--%3E%20%7Bbutton%20returned%3A%22Continue%22%2C%20text%20returned%3A%22Jen%22%7D%0Adisplay%20dialog%20%22Hello%2C%20%22%20%26%20%28text%20returned%20of%20theResponse%29%20%26%20%22.%22%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW4\"></a>\n**Listing 23-1**AppleScript: Prompting for text input\n\n1. `set theResponse to display dialog \"What's your name?\" default answer \"\" with icon note buttons {\"Cancel\", \"Continue\"} default button \"Continue\"`\n2. `--&gt; {button returned:\"Continue\", text returned:\"Jen\"}`\n3. `display dialog \"Hello, \" & (text returned of theResponse) & \".\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20response%20%3D%20app.displayDialog%28%22What%27s%20your%20name%3F%22%2C%20%7B%0A%20%20%20%20defaultAnswer%3A%20%22%22%2C%0A%20%20%20%20withIcon%3A%20%22note%22%2C%0A%20%20%20%20buttons%3A%20%5B%22Cancel%22%2C%20%22Continue%22%5D%2C%0A%20%20%20%20defaultButton%3A%20%22Continue%22%0A%7D%29%0A%2F%2F%20Result%3A%20%7B%22buttonReturned%22%3A%22Continue%22%2C%20%22textReturned%22%3A%22Jen%22%7D%0Aapp.displayDialog%28%22Hello%2C%20%22%20%2B%20%28response.textReturned%29%20%2B%20%22.%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW5\"></a>\n**Listing 23-2**JavaScript: Prompting for text input\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var response = app.displayDialog(\"What's your name?\", {`\n5. ` defaultAnswer: \"\",`\n6. ` withIcon: \"note\",`\n7. ` buttons: [\"Cancel\", \"Continue\"],`\n8. ` defaultButton: \"Continue\"`\n9. `})`\n10. `// Result: {\"buttonReturned\":\"Continue\", \"textReturned\":\"Jen\"}`\n11. `app.displayDialog(\"Hello, \" + (response.textReturned) + \".\")`\n\n> **Note**\n>\n>\n> Additional information about the `display dialog` command can be found in [Displaying Dialogs and Alerts](https://developer.apple.com/library/archive/mac-automation-scripting-guide/DisplayDialogsandAlerts.md#//apple_ref/doc/uid/TP40016239-CH15-SW1). For complete information about the command and its parameters, launch Script Editor, open the Standard Additions scripting addition’s dictionary, and navigate to the command’s definition.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW9\"></a>\n\n### Prompting for Hidden Text\n\nProtect potentially sensitive information from prying eyes by using the `display dialog` command’s `default answer` parameter in conjunction with the `hidden answer` parameter to show bullets instead of plain text in the dialog’s text field. See Figure 23-2, Listing 23-3, and Listing 23-4.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW6\"></a>\n**Figure 23-2**A dialog prompting for hidden text input\n![image: ../Art/dialog_promptforhiddentext_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dialog_promptforhiddentext_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20dialog%20%22Please%20enter%20a%20passphrase%20to%20use%20this%20script.%22%20default%20answer%20%22%22%20with%20icon%20stop%20buttons%20%7B%22Cancel%22%2C%20%22Continue%22%7D%20default%20button%20%22Continue%22%20with%20hidden%20answer%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW7\"></a>\n**Listing 23-3**AppleScript: Prompting for hidden text input\n\n1. `display dialog \"Please enter a passphrase to use this script.\" default answer \"\" with icon stop buttons {\"Cancel\", \"Continue\"} default button \"Continue\" with hidden answer`\n2. `--&gt; Result: {button returned:\"Continue\", text returned:\"MySecretPassphrase\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Aapp.displayDialog%28%22Please%20enter%20a%20passphrase%20to%20use%20this%20script.%22%2C%20%7B%0A%20%20%20%20defaultAnswer%3A%20%22%22%2C%0A%20%20%20%20withIcon%3A%20%22stop%22%2C%0A%20%20%20%20buttons%3A%20%5B%22Cancel%22%2C%20%22Continue%22%5D%2C%0A%20%20%20%20defaultButton%3A%20%22Continue%22%2C%0A%20%20%20%20hiddenAnswer%3A%20true%0A%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-SW8\"></a>\n**Listing 23-4**JavaScript: Prompting for hidden text input\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `app.displayDialog(\"Please enter a passphrase to use this script.\", {`\n5. ` defaultAnswer: \"\",`\n6. ` withIcon: \"stop\",`\n7. ` buttons: [\"Cancel\", \"Continue\"],`\n8. ` defaultButton: \"Continue\",`\n9. ` hiddenAnswer: true`\n10. `})`\n11. `// Result: {\"buttonReturned\":\"Continue\", \"textReturned\":\"MySecretPassphrase\"}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH80-DontLinkElementID_8\"></a>\n\n\nWarning\n\nAlways be cautious when requesting sensitive data, such as passwords. Hidden text is returned by the `display dialog` command as plain, unencrypted text, so this command offers limited security.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/PromptforText.html", "sha256": "ddf6fc1ff65c1468dd13646d3eb7e3cfc59674f3e0eff104c2fec972acbafb22", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "PromptforaChoicefromaList.md", "title": "Prompting for a Choice from a List", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH83\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH83-SW1\"></a>\n\n## Prompting for a Choice from a List\n\nUse the Standard Additions scripting addition’s `choose from list` command to prompt the user to select from a list of strings. Listing 28-1 and Listing 28-2 ask the user to select a favorite fruit, as seen in Figure 28-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH83-SW4\"></a>\n**Figure 28-1**Prompting the user to choose from a list of items\n![image: ../Art/choosefromlist_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/choosefromlist_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFruitChoices%20to%20%7B%22Apple%22%2C%20%22Banana%22%2C%20%22Orange%22%7D%0Aset%20theFavoriteFruit%20to%20choose%20from%20list%20theFruitChoices%20with%20prompt%20%22Select%20your%20favorite%20fruit%3A%22%20default%20items%20%7B%22Apple%22%7D%0AtheFavoriteFruit)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH83-SW2\"></a>\n**Listing 28-1**AppleScript: Prompting the user to choose from a list of items\n\n1. `set theFruitChoices to {\"Apple\", \"Banana\", \"Orange\"}`\n2. `set theFavoriteFruit to choose from list theFruitChoices with prompt \"Select your favorite fruit:\" default items {\"Apple\"}`\n3. `theFavoriteFruit`\n4. `--&gt; Result: {\"Apple\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20fruitChoices%20%3D%20%5B%22Apple%22%2C%20%22Banana%22%2C%20%22Orange%22%5D%0Avar%20favoriteFruit%20%3D%20app.chooseFromList%28fruitChoices%2C%20%7B%0A%20%20%20%20withPrompt%3A%20%22Select%20your%20favorite%20fruit%3A%22%2C%0A%20%20%20%20defaultItems%3A%20%5B%22Apple%22%5D%0A%7D%29%0AfavoriteFruit)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH83-SW3\"></a>\n**Listing 28-2**JavaScript: Prompting the user to choose from a list of items\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var fruitChoices = [\"Apple\", \"Banana\", \"Orange\"]`\n5. `var favoriteFruit = app.chooseFromList(fruitChoices, {`\n6. ` withPrompt: \"Select your favorite fruit:\",`\n7. ` defaultItems: [\"Apple\"]`\n8. `})`\n9. `favoriteFruit`\n10. `// Result: [\"Apple\"]`\n\nThe `choose from list` command can optionally let the user choose multiple items by setting the `multiple selections allowed` parameter to `true`. For this reason, the result of the command is always a list of selected strings. This list may be empty if the `empty selection allowed` parameter has been specified and the user dismissed the dialog without making a selection.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/PromptforaChoicefromaList.html", "sha256": "27384f0bef3676e238145c021d8e679259bc099f8be696d750c4cf5acbac8eec", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "PromptforaColor.md", "title": "Prompting for a Color", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH86\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH86-SW1\"></a>\n\n## Prompting for a Color\n\nUse the Standard Additions scripting addition’s `choose color` command to ask the user to select a color from a color picker dialog like the one shown in Figure 29-1. The command accepts an optional `default color` parameter, and produces an RGB color value as its result. Listing 29-1 and Listing 29-2 display a color picker, create a TextEdit document containing some text, and apply the chosen color to the text.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH86-SW2\"></a>\n**Figure 29-1**A color picker dialog\n![image: ../Art/colorpicker_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/colorpicker_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theColor%20to%20choose%20color%20default%20color%20%7B0%2C%2065535%2C%200%7D%0A--%3E%20Result%3A%20%7B256%2C%2040421%2C%20398%7D%0A%0Atell%20application%20%22TextEdit%22%0A%20%20%20%20set%20theDocument%20to%20make%20new%20document%0A%20%20%20%20set%20text%20of%20document%201%20to%20%22Colored%20Text%22%0A%20%20%20%20set%20color%20of%20text%20of%20document%201%20to%20theColor%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH86-SW3\"></a>\n**Listing 29-1**AppleScript: Adding colored text to a new TextEdit document\n\n1. `set theColor to choose color default color {0, 65535, 0}`\n2. `--&gt; Result: {256, 40421, 398}`\n4. `tell application \"TextEdit\"`\n5. ` set theDocument to make new document`\n6. ` set text of document 1 to \"Colored Text\"`\n7. ` set color of text of document 1 to theColor`\n8. `end tell`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20color%20%3D%20app.chooseColor%28%7BdefaultColor%3A%20%5B0%2C%201%2C%200%5D%7D%29%0A%2F%2F%20Result%3A%20%5B0.003753719385713339%2C%200.7206835746765137%2C%200.005828946363180876%5D%0A%0Acolor%20%3D%20%5BMath.trunc%28color%5B0%5D%20*%2065535%29%2C%20Math.trunc%28color%5B1%5D%20*%2065535%29%2C%20Math.trunc%28color%5B2%5D%20*%2065535%29%5D%0A%0Avar%20textedit%20%3D%20Application%28%22TextEdit%22%29%0Avar%20document%20%3D%20textedit.make%28%7Bnew%3A%20%22document%22%7D%29%0Adocument.text%20%3D%20%22Colored%20Text%22%0Adocument.text.color%20%3D%20%5B256%2C%2040421%2C%20398%5D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH86-SW4\"></a>\n**Listing 29-2**JavaScript: Adding colored text to a new TextEdit document\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var color = app.chooseColor({defaultColor: [0, 1, 0]})`\n5. `// Result: [0.003753719385713339, 0.7206835746765137, 0.005828946363180876]`\n7. `color = [Math.trunc(color[0] * 65535), Math.trunc(color[1] * 65535), Math.trunc(color[2] * 65535)]`\n9. `var textedit = Application(\"TextEdit\")`\n10. `var document = textedit.make({new: \"document\"})`\n11. `document.text = \"Colored Text\"`\n12. `document.text.color = [256, 40421, 398]`\n\n> **Note**\n>\n>\n> In AppleScript, the `choose color` command produces RGB values ranging from `0` through `65535`. In JavaScript, the RGB values range between `0` and `1`. These values must be converted to match the AppleScript values to be used. Listing 29-2 demonstrates this conversion.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/PromptforaColor.html", "sha256": "f3a840d8185bbdf3e05df86bdf97b7050c4b2ab17d2e7bbbd648a8b7553f2a09", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "PromptforaFileName.md", "title": "Prompting for a File Name", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH82\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW1\"></a>\n\n## Prompting for a File Name\n\nUse the Standard Additions scripting addition’s `choose file name` command to display a save dialog that lets the user enter a file name and choose an output folder, such as the one produced by Listing 27-1 and Listing 27-2, shown in Figure 27-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW2\"></a>\n**Figure 27-1**Prompting for a file name\n![image: ../Art/choosefilename_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/choosefilename_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theNewFilePath%20to%20choose%20file%20name%20with%20prompt%20%22Save%20the%20document%20as%3A%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW3\"></a>\n**Listing 27-1**AppleScript: Prompting for a file name\n\n1. `set theNewFilePath to choose file name with prompt \"Save the document as:\"`\n2. `--&gt; Result: file \"Macintosh HD:Users:yourUserName:Desktop:ImportantDocument\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20newFilePath%20%3D%20app.chooseFileName%28%7B%0A%20%20%20%20withPrompt%3A%20%22Save%20the%20document%20as%3A%22%0A%7D%29%0AnewFilePath)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW4\"></a>\n**Listing 27-2**JavaScript: Prompting for a file name\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var newFilePath = app.chooseFileName({`\n5. ` withPrompt: \"Save the document as:\"`\n6. `})`\n7. `newFilePath`\n8. `// Result: Path(\"/Users/yourUserName/Desktop/ImportantDocument\")`\n\nIf the specified file name already exists in the output folder when the user clicks the Save button, the user is prompted to replace it, as shown in Figure 27-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW5\"></a>\n**Figure 27-2**Prompting to replace an existing file\n![image: ../Art/choosefilename_replacing_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/choosefilename_replacing_2x.png)\n\nThe result of the `choose file name` command is a path to a potential file. This file may or may not already exist. However, if it does exist, you can assume the user wants to replace it. Your script can now safely write or save a file to the path.\n\nListing 27-3 and Listing 27-4 ask the user to type some text as a note and choose an file name and output folder, and then save the note in the specified file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theResponse%20to%20display%20dialog%20%22Enter%20a%20note%3A%22%20default%20answer%20%22%22%0Aset%20theNote%20to%20text%20returned%20of%20theResponse%0A%0Aset%20theNewFilePath%20to%20choose%20file%20name%20with%20prompt%20%22Save%20the%20document%20as%3A%22%0A%0AwriteTextToFile%28theNote%2C%20theNewFilePath%2C%20true%29%0A%0Aon%20writeTextToFile%28theText%2C%20theFile%2C%20overwriteExistingContent%29%0A%20%20%20%20try%0A%0A%20%20%20%20%20%20%20%20--%20Convert%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20%20%20%20%20--%20Open%20file%20for%20writing%0A%20%20%20%20%20%20%20%20set%20theOpenedFile%20to%20open%20for%20access%20file%20theFile%20with%20write%20permission%0A%0A%20%20%20%20%20%20%20%20--%20Clear%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20overwriteExistingContent%20is%20true%20then%20set%20eof%20of%20theOpenedFile%20to%200%0A%0A%20%20%20%20%20%20%20%20--%20Write%20new%20content%20to%20file%0A%20%20%20%20%20%20%20%20write%20theText%20to%20theOpenedFile%20starting%20at%20eof%0A%0A%20%20%20%20%20%20%20%20--%20Close%20file%0A%20%20%20%20%20%20%20%20close%20access%20theOpenedFile%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%0A%20%20%20%20%20%20%20%20--%20Handle%20a%20write%20error%0A%20%20%20%20on%20error%0A%0A%20%20%20%20%20%20%20%20--%20Close%20file%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20close%20access%20file%20theFile%0A%20%20%20%20%20%20%20%20end%20try%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20failed%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20try%0Aend%20writeTextToFile%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW6\"></a>\n**Listing 27-3**AppleScript: Saving content in a specified file\n\n1. `set theResponse to display dialog \"Enter a note:\" default answer \"\"`\n2. `set theNote to text returned of theResponse`\n4. `set theNewFilePath to choose file name with prompt \"Save the document as:\"`\n6. `writeTextToFile(theNote, theNewFilePath, true)`\n8. `on writeTextToFile(theText, theFile, overwriteExistingContent)`\n9. ` try`\n11. ` -- Convert file to a string`\n12. ` set theFile to theFile as string`\n14. ` -- Open file for writing`\n15. ` set theOpenedFile to open for access file theFile with write permission`\n17. ` -- Clear file if content should be overwritten`\n18. ` if overwriteExistingContent is true then set eof of theOpenedFile to 0`\n20. ` -- Write new content to file`\n21. ` write theText to theOpenedFile starting at eof`\n23. ` -- Close file`\n24. ` close access theOpenedFile`\n26. ` -- Return a boolean indicating that writing was successful`\n27. ` return true`\n29. ` -- Handle a write error`\n30. ` on error`\n32. ` -- Close file`\n33. ` try`\n34. ` close access file theFile`\n35. ` end try`\n37. ` -- Return a boolean indicating that writing failed`\n38. ` return false`\n39. ` end try`\n40. `end writeTextToFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20response%20%3D%20app.displayDialog%28%22Enter%20a%20note%3A%22%2C%20%7B%0A%20%20%20%20defaultAnswer%3A%20%22%22%0A%7D%29%0Avar%20note%20%3D%20response.textReturned%0A%0Avar%20newFilePath%20%3D%20app.chooseFileName%28%7B%0A%20%20%20%20withPrompt%3A%20%22Save%20document%20as%3A%22%0A%7D%29%0AwriteTextToFile%28note%2C%20newFilePath%2C%20true%29%0A%0Afunction%20writeTextToFile%28text%2C%20file%2C%20overwriteExistingContent%29%20%7B%0A%20%20%20%20try%20%7B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Convert%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Open%20file%20for%20writing%0A%20%20%20%20%20%20%20%20var%20openedFile%20%3D%20app.openForAccess%28Path%28fileString%29%2C%20%7B%20writePermission%3A%20true%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Clear%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20%28overwriteExistingContent%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20app.setEof%28openedFile%2C%20%7B%20to%3A%200%20%7D%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Write%20new%20content%20to%20file%0A%20%20%20%20%20%20%20%20app.write%28text%2C%20%7B%20to%3A%20openedFile%2C%20startingAt%3A%20app.getEof%28openedFile%29%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Close%20file%0A%20%20%20%20%20%20%20%20app.closeAccess%28openedFile%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20%7D%0A%20%20%20%20catch%20%28error%29%20%7B%0A%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Close%20file%0A%20%20%20%20%20%20%20%20%20%20%20%20app.closeAccess%28file%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20catch%28error%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Report%20error%20is%20closing%20failed%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log%28%60Couldn%27t%20close%20file%3A%20%24%7Berror%7D%60%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20%7D%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH82-SW7\"></a>\n**Listing 27-4**JavaScript: Saving content in a specified file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var response = app.displayDialog(\"Enter a note:\", {`\n5. ` defaultAnswer: \"\"`\n6. `})`\n7. `var note = response.textReturned`\n9. `var newFilePath = app.chooseFileName({`\n10. ` withPrompt: \"Save document as:\"`\n11. `})`\n12. `writeTextToFile(note, newFilePath, true)`\n14. `function writeTextToFile(text, file, overwriteExistingContent) {`\n15. ` try {`\n17. ` // Convert file to a string`\n18. ` var fileString = file.toString()`\n20. ` // Open file for writing`\n21. ` var openedFile = app.openForAccess(Path(fileString), { writePermission: true })`\n23. ` // Clear file if content should be overwritten`\n24. ` if (overwriteExistingContent) {`\n25. ` app.setEof(openedFile, { to: 0 })`\n26. ` }`\n28. ` // Write new content to file`\n29. ` app.write(text, { to: openedFile, startingAt: app.getEof(openedFile) })`\n31. ` // Close file`\n32. ` app.closeAccess(openedFile)`\n34. ` // Return a boolean indicating that writing was successful`\n35. ` return true`\n36. ` }`\n37. ` catch (error) {`\n39. ` try {`\n40. ` // Close file`\n41. ` app.closeAccess(file)`\n42. ` }`\n43. ` catch(error) {`\n44. ` // Report error is closing failed`\n45. ``  console.log(`Couldn't close file: ${error}`) ``\n46. ` }`\n48. ` // Return a boolean indicating that writing was successful`\n49. ` return false`\n50. ` }`\n51. `}`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/PromptforaFileName.html", "sha256": "762ac8d4b56d0af280e73929e474613cae6068bf748e12b64d0eb5a126e3ee8d", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "PromptforaFileorFolder.md", "title": "Prompting for Files or Folders", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH81\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW1\"></a>\n\n## Prompting for Files or Folders\n\nIt’s generally good practice to avoid hard-coding file and folder paths in a script. Prompting the user to select files and folders makes for a more dynamic script that won’t break when paths change.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW16\"></a>\n\n### Prompting for a File\n\nUse the Standard Additions scripting addition’s `choose file` command to prompt the user to select a file. Listing 26-1 and Listing 26-2 demonstrate how to use this command to display the simple file selection dialog with a custom prompt shown in Figure 26-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW4\"></a>\n**Figure 26-1**Prompting for a file\n![image: ../Art/choosefile_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/choosefile_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theDocument%20to%20choose%20file%20with%20prompt%20%22Please%20select%20a%20document%20to%20process%3A%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW3\"></a>\n**Listing 26-1**AppleScript: Prompting for a file\n\n1. `set theDocument to choose file with prompt \"Please select a document to process:\"`\n2. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Documents:ImportantDoc.pages\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20document%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20a%20document%20to%20process%3A%22%0A%7D%29%0Adocument%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW5\"></a>\n**Listing 26-2**JavaScript: Prompting for a file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var document = app.chooseFile({`\n5. ` withPrompt: \"Please select a document to process:\"`\n6. `})`\n7. `document`\n8. `// Result: Path(\"/Users/yourUserName/Documents/ImportantDoc.pages\")`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW17\"></a>\n\n### Prompting for a Specific Type of File\n\nIf your script requires specific types of files for processing, you can use the `choose file` command’s optional `of type` parameter to provide a list of acceptable types. Types may be specified as extension strings without the leading period (such as `\"jpg\"` or `\"png\"`) or as uniform type identifiers (such as `\"public.image\"` or `\"com.apple.iwork.pages.sffpages\"`). Listing 26-3 and Listing 26-4 show how to prompt for an image.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theImage%20to%20choose%20file%20with%20prompt%20%22Please%20select%20an%20image%20to%20process%3A%22%20of%20type%20%7B%22public.image%22%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW6\"></a>\n**Listing 26-3**AppleScript: Prompting for an image\n\n1. `set theImage to choose file with prompt \"Please select an image to process:\" of type {\"public.image\"}`\n2. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Pictures:IMG_0024.jpg\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20image%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20an%20image%20to%20process%3A%22%2C%0A%20%20%20%20ofType%3A%20%5B%22public.image%22%5D%0A%7D%29%0Aimage)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW7\"></a>\n**Listing 26-4**JavaScript: Prompting for an image\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var image = app.chooseFile({`\n5. ` withPrompt: \"Please select an image to process:\",`\n6. ` ofType: [\"public.image\"]`\n7. `})`\n8. `image`\n9. `// Result: Path(\"/Users/yourUserName/Pictures/IMG_0024.jpg\")`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW18\"></a>\n\n### Prompting for Multiple Files\n\nTo let the user choose more than one file, include the `choose file` command’s optional `multiple selections allowed` parameter. Listing 26-5 and Listing 26-6 display a prompt asking for multiple images, as shown in Figure 26-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW10\"></a>\n**Figure 26-2**Prompting for multiple images\n![image: ../Art/chooseimages_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/chooseimages_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theImages%20to%20choose%20file%20with%20prompt%20%22Please%20select%20some%20images%20to%20process%3A%22%20of%20type%20%7B%22public.image%22%7D%20with%20multiple%20selections%20allowed)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW8\"></a>\n**Listing 26-5**AppleScript: Prompting for multiple images\n\n1. `set theImages to choose file with prompt \"Please select some images to process:\" of type {\"public.image\"} with multiple selections allowed`\n2. `--&gt; Result: {alias \"Macintosh HD:Users:yourUserName:Pictures:IMG_0024.jpg\", alias \"Macintosh HD:Users:yourUserName:Pictures:IMG_0025.jpg\", alias \"Macintosh HD:Users:yourUserName:Pictures:IMG_0026.jpg\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20images%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20some%20images%20to%20process%3A%22%2C%0A%20%20%20%20ofType%3A%20%5B%22public.image%22%5D%2C%0A%20%20%20%20multipleSelectionsAllowed%3A%20true%0A%7D%29%0Aimages)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW9\"></a>\n**Listing 26-6**JavaScript: Prompting for multiple images\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var images = app.chooseFile({`\n5. ` withPrompt: \"Please select some images to process:\",`\n6. ` ofType: [\"public.image\"],`\n7. ` multipleSelectionsAllowed: true`\n8. `})`\n9. `images`\n10. `// Result: [Path(\"/Users/yourUserName/Pictures/IMG_0024.jpg\"), Path(\"/Users/yourUserName/Pictures/IMG_0025.jpg\"), Path(\"/Users/yourUserName/Pictures/IMG_0026.jpg\")]`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW2\"></a>\n\n### Prompting for a Folder\n\nUse the Standard Additions scripting addition’s `choose folder` command to prompt the user to select a folder, such as an output folder or folder of images to process. Listing 26-7 and Listing 26-8 demonstrate how to use this command to display the simple folder selection dialog with a custom prompt shown in Figure 26-3.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW13\"></a>\n**Figure 26-3**Prompting for a folder\n![image: ../Art/choosefolder_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/choosefolder_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theOutputFolder%20to%20choose%20folder%20with%20prompt%20%22Please%20select%20an%20output%20folder%3A%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW11\"></a>\n**Listing 26-7**AppleScript: Prompting for a folder\n\n1. `set theOutputFolder to choose folder with prompt \"Please select an output folder:\"`\n2. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20outputFolder%20%3D%20app.chooseFolder%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20an%20output%20folder%3A%22%0A%7D%29%0AoutputFolder)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW12\"></a>\n**Listing 26-8**JavaScript: Prompting for a folder\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var outputFolder = app.chooseFolder({`\n5. ` withPrompt: \"Please select an output folder:\"`\n6. `})`\n7. `outputFolder`\n8. `// Result: Path(\"/Users/yourUserName/Desktop\")`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW19\"></a>\n\n### Prompting for Multiple Folders\n\nTo let the user choose more than one folder, include the `choose folder` command’s optional `multiple selections allowed` parameter, as shown in Listing 26-9 and Listing 26-10.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFoldersToProcess%20to%20choose%20folder%20with%20prompt%20%22Please%20select%20the%20folders%20containing%20images%20to%20process%3A%22%20with%20multiple%20selections%20allowed)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW14\"></a>\n**Listing 26-9**AppleScript: Prompting for multiple folders\n\n1. `set theFoldersToProcess to choose folder with prompt \"Please select the folders containing images to process:\" with multiple selections allowed`\n2. `--&gt; Result: {alias \"Macintosh HD:Users:yourUserName:Desktop:\", alias \"Macintosh HD:Users:yourUserName:Documents:\"}`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20foldersToProcess%20%3D%20app.chooseFolder%28%7B%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20an%20output%20folder%3A%22%2C%0A%20%20%20%20multipleSelectionsAllowed%3A%20true%0A%7D%29%0AfoldersToProcess)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH81-SW15\"></a>\n**Listing 26-10**JavaScript: Prompting for multiple folders\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var foldersToProcess = app.chooseFolder({`\n5. ` withPrompt: \"Please select an output folder:\",`\n6. ` multipleSelectionsAllowed: true`\n7. `})`\n8. `foldersToProcess`\n9. `// Result: [Path(\"/Users/yourUserName/Desktop\"), Path(\"/Users/yourUserName/Documents\")]`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/PromptforaFileorFolder.html", "sha256": "99c39515508fa9b9da1e12fbf9ee0fcd936a9e396825185333e5c21602e041c8", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ReadandWriteFiles.md", "title": "Reading and Writing Files", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH58\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW1\"></a>\n\n## Reading and Writing Files\n\nScripts are often designed to write data to files such as logs or backups. The Standard Additions scripting addition contains a number of commands that make it possible to read and write files.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW3\"></a>\n\n### Writing to a File\n\nThe handlers in Listing 16-1 and Listing 16-2 safely write data to disk, creating a new file if the targeted file doesn’t already exist. Provide the text to write, a target file path, and indicate whether to overwrite existing content. If you choose not to overwrite existing content, then the text provided is appended to any existing content.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20writeTextToFile%28theText%2C%20theFile%2C%20overwriteExistingContent%29%0A%20%20%20%20try%0A%0A%20%20%20%20%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20%20%20%20%20--%20Open%20the%20file%20for%20writing%0A%20%20%20%20%20%20%20%20set%20theOpenedFile%20to%20open%20for%20access%20file%20theFile%20with%20write%20permission%0A%0A%20%20%20%20%20%20%20%20--%20Clear%20the%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20overwriteExistingContent%20is%20true%20then%20set%20eof%20of%20theOpenedFile%20to%200%0A%0A%20%20%20%20%20%20%20%20--%20Write%20the%20new%20content%20to%20the%20file%0A%20%20%20%20%20%20%20%20write%20theText%20to%20theOpenedFile%20starting%20at%20eof%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20file%0A%20%20%20%20%20%20%20%20close%20access%20theOpenedFile%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%0A%20%20%20%20%20%20%20%20--%20Handle%20a%20write%20error%0A%20%20%20%20on%20error%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20file%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20close%20access%20file%20theFile%0A%20%20%20%20%20%20%20%20end%20try%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20failed%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20try%0Aend%20writeTextToFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW4\"></a>\n**Listing 16-1**AppleScript: Handler that writes text to a file\n\n1. `on writeTextToFile(theText, theFile, overwriteExistingContent)`\n2. ` try`\n4. ` -- Convert the file to a string`\n5. ` set theFile to theFile as string`\n7. ` -- Open the file for writing`\n8. ` set theOpenedFile to open for access file theFile with write permission`\n10. ` -- Clear the file if content should be overwritten`\n11. ` if overwriteExistingContent is true then set eof of theOpenedFile to 0`\n13. ` -- Write the new content to the file`\n14. ` write theText to theOpenedFile starting at eof`\n16. ` -- Close the file`\n17. ` close access theOpenedFile`\n19. ` -- Return a boolean indicating that writing was successful`\n20. ` return true`\n22. ` -- Handle a write error`\n23. ` on error`\n25. ` -- Close the file`\n26. ` try`\n27. ` close access file theFile`\n28. ` end try`\n30. ` -- Return a boolean indicating that writing failed`\n31. ` return false`\n32. ` end try`\n33. `end writeTextToFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20writeTextToFile%28text%2C%20file%2C%20overwriteExistingContent%29%20%7B%0A%20%20%20%20try%20%7B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Open%20the%20file%20for%20writing%0A%20%20%20%20%20%20%20%20var%20openedFile%20%3D%20app.openForAccess%28Path%28fileString%29%2C%20%7B%20writePermission%3A%20true%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Clear%20the%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20%28overwriteExistingContent%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20app.setEof%28openedFile%2C%20%7B%20to%3A%200%20%7D%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Write%20the%20new%20content%20to%20the%20file%0A%20%20%20%20%20%20%20%20app.write%28text%2C%20%7B%20to%3A%20openedFile%2C%20startingAt%3A%20app.getEof%28openedFile%29%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Close%20the%20file%0A%20%20%20%20%20%20%20%20app.closeAccess%28openedFile%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20%7D%0A%20%20%20%20%C5%93%20%28error%29%20%7B%0A%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Close%20the%20file%0A%20%20%20%20%20%20%20%20%20%20%20%20app.closeAccess%28file%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20catch%28error%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Report%20the%20error%20is%20closing%20failed%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log%28%60Couldn%27t%20close%20file%3A%20%24%7Berror%7D%60%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20%7D%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW13\"></a>\n**Listing 16-2**JavaScript: Function that writes text to a file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function writeTextToFile(text, file, overwriteExistingContent) {`\n5. ` try {`\n7. ` // Convert the file to a string`\n8. ` var fileString = file.toString()`\n10. ` // Open the file for writing`\n11. ` var openedFile = app.openForAccess(Path(fileString), { writePermission: true })`\n13. ` // Clear the file if content should be overwritten`\n14. ` if (overwriteExistingContent) {`\n15. ` app.setEof(openedFile, { to: 0 })`\n16. ` }`\n18. ` // Write the new content to the file`\n19. ` app.write(text, { to: openedFile, startingAt: app.getEof(openedFile) })`\n21. ` // Close the file`\n22. ` app.closeAccess(openedFile)`\n24. ` // Return a boolean indicating that writing was successful`\n25. ` return true`\n26. ` }`\n27. ` catch(error) {`\n29. ` try {`\n30. ` // Close the file`\n31. ` app.closeAccess(file)`\n32. ` }`\n33. ` catch(error) {`\n34. ` // Report the error is closing failed`\n35. ``  console.log(`Couldn't close file: ${error}`) ``\n36. ` }`\n38. ` // Return a boolean indicating that writing was successful`\n39. ` return false`\n40. ` }`\n41. `}`\n\nListing 16-3 and Listing 16-4 show how to call the handlers in Listing 16-1 and Listing 16-2 to write text content to a file on the Desktop, replacing any existing content in the file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20this_story%20to%20%22Once%20upon%20a%20time%20in%20Silicon%20Valley...%22%0Aset%20theFile%20to%20%28%28%28path%20to%20desktop%20folder%29%20as%20string%29%20%26%20%22MY%20STORY.txt%22%29%0AwriteTextToFile%28this_story%2C%20theFile%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW5\"></a>\n**Listing 16-3**AppleScript: Calling a handler to write text to a file\n\n1. `set this_story to \"Once upon a time in Silicon Valley...\"`\n2. `set theFile to (((path to desktop folder) as string) & \"MY STORY.txt\")`\n3. `writeTextToFile(this_story, theFile, true)`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20story%20%3D%20%22Once%20upon%20a%20time%20in%20Silicon%20Valley...%22%0Avar%20desktopString%20%3D%20app.pathTo%28%22desktop%22%29.toString%28%29%0Avar%20file%20%3D%20%60%24%7BdesktopString%7D%2FMY%20STORY.txt%60%0AwriteTextToFile%28story%2C%20file%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW14\"></a>\n**Listing 16-4**JavaScript: Calling a function to write text to a file\n\n1. `var story = \"Once upon a time in Silicon Valley...\"`\n2. `var desktopString = app.pathTo(\"desktop\").toString()`\n3. `` var file = `${desktopString}/MY STORY.txt` ``\n4. `writeTextToFile(story, file, true)`\n\nListing 16-5 and Listing 16-6 show how Listing 16-1 and Listing 16-2 could be called to insert dated log entries into a log file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%28%28current%20date%29%20as%20string%29%20%26%20space%20%26%20%22STATUS%20OK%22%20%26%20return%0Aset%20theFile%20to%20%28%28%28path%20to%20desktop%20folder%29%20as%20string%29%20%26%20%22MY%20LOG%20FILE.log%22%29%0AwriteTextToFile%28theText%2C%20theFile%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW6\"></a>\n**Listing 16-5**AppleScript: Calling a handler to write an entry to a log file\n\n1. `set theText to ((current date) as string) & space & \"STATUS OK\" & return`\n2. `set theFile to (((path to desktop folder) as string) & \"MY LOG FILE.log\")`\n3. `writeTextToFile(theText, theFile, false)`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20dateString%20%3D%20Date%28%29.toString%28%29%0Avar%20desktopString%20%3D%20app.pathTo%28%22desktop%22%29.toString%28%29%0Avar%20text%20%3D%20%60%24%7BdateString%7D%20STATUS%20OK%5Cn%5Cn%60%0Avar%20file%20%3D%20%60%24%7BdesktopString%7D%2FMY%20LOG%20FILE.log%60%0AwriteTextToFile%28text%2C%20file%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW15\"></a>\n**Listing 16-6**JavaScript: Calling a function to write an entry to a log file\n\n1. `var dateString = Date().toString()`\n2. `var desktopString = app.pathTo(\"desktop\").toString()`\n3. `` var text = `${dateString} STATUS OK\\\\n\\\\n` ``\n4. `` var file = `${desktopString}/MY LOG FILE.log` ``\n5. `writeTextToFile(text, file, false)`\n\nIn practice, this technique could be used to maintain a log when script errors occur. Listing 16-7 and Listing 16-8 are try statements, which can be wrapped around custom script code in order to log any script errors to a file in the `~/Library/Logs/` folder of the current user’s home directory.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%0A%20%20%20%20--%20Your%20custom%20script%20code%20goes%20here%0Aon%20error%20theErrorMessage%20number%20theErrorNumber%0A%20%20%20%20set%20theError%20to%20%22Error%3A%20%22%20%26%20theErrorNumber%20%26%20%22.%20%22%20%26%20theErrorMessage%20%26%20return%0A%20%20%20%20set%20theLogFile%20to%20%28%28path%20to%20library%20folder%20from%20user%20domain%29%20as%20string%29%20%26%20%22Logs%3AScript%20Error%20Log.log%22%0A%20%20%20%20my%20writeTextToFile%28theError%2C%20theLogFile%2C%20false%29%0Aend%20try)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW7\"></a>\n**Listing 16-7**AppleScript: Example of a try statement that writes an entry to a log file when an error occurs\n\n1. `try`\n2. ` -- Your custom script code goes here`\n3. `on error theErrorMessage number theErrorNumber`\n4. ` set theError to \"Error: \" & theErrorNumber & \". \" & theErrorMessage & return`\n5. ` set theLogFile to ((path to library folder from user domain) as string) & \"Logs:Script Error Log.log\"`\n6. ` my writeTextToFile(theError, theLogFile, false)`\n7. `end try`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%20%7B%0A%20%20%20%20%2F%2F%20Your%20custom%20script%20code%20goes%20here%0A%7D%0Acatch%20%28error%29%20%7B%0A%20%20%20%20var%20errorString%20%3D%20%60Error%3A%20%24%7Berror.message%7D%5Cn%5Cn%60%0A%20%20%20%20var%20logFile%20%3D%20app.pathTo%28%22library%20folder%22%2C%20%7B%20from%3A%20%22user%20domain%22%20%7D%29.toString%28%29%20%2B%20%22%2FLogs%2FScript%20Error%20Log.log%22%0A%20%20%20%20writeTextToFile%28errorString%2C%20logFile%2C%20false%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW16\"></a>\n**Listing 16-8**JavaScript: Example of a try statement that writes an entry to a log file when an error occurs\n\n1. `try {`\n2. ` // Your custom script code goes here`\n3. `}`\n4. `catch (error) {`\n5. ``  var errorString = `Error: ${error.message}\\\\n\\\\n` ``\n6. ` var logFile = app.pathTo(\"library folder\", { from: \"user domain\" }).toString() + \"/Logs/Script Error Log.log\"`\n7. ` writeTextToFile(errorString, logFile, false)`\n8. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW2\"></a>\n\n### Reading a File\n\nThe handlers in Listing 16-9 and Listing 16-10 read the contents of a specified file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20readFile%28theFile%29%0A%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20--%20Read%20the%20file%20and%20return%20its%20contents%0A%20%20%20%20return%20read%20file%20theFile%0Aend%20readFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW8\"></a>\n**Listing 16-9**AppleScript: Handler that reads the contents of a file\n\n1. `on readFile(theFile)`\n2. ` -- Convert the file to a string`\n3. ` set theFile to theFile as string`\n5. ` -- Read the file and return its contents`\n6. ` return read file theFile`\n7. `end readFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20readFile%28file%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%2F%2F%20Read%20the%20file%20and%20return%20its%20contents%0A%20%20%20%20return%20app.read%28Path%28fileString%29%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW17\"></a>\n**Listing 16-10**JavaScript: Function that reads the contents of a file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function readFile(file) {`\n5. ` // Convert the file to a string`\n6. ` var fileString = file.toString()`\n8. ` // Read the file and return its contents`\n9. ` return app.read(Path(fileString))`\n10. `}`\n\nListing 16-11 and Listing 16-12 show how to call the handlers in Listing 16-9 and Listing 16-10 to read a specified text file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20of%20type%20%22txt%22%20with%20prompt%20%22Please%20select%20a%20text%20file%20to%20read%3A%22%0AreadFile%28theFile%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW9\"></a>\n**Listing 16-11**AppleScript: Calling a handler to read the contents of a file\n\n1. `set theFile to choose file of type \"txt\" with prompt \"Please select a text file to read:\"`\n2. `readFile(theFile)`\n3. `--&gt; Result: \"Contents of the chosen file.\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20file%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20ofType%3A%20%22txt%22%2C%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20a%20text%20file%20to%20read%3A%22%0A%7D%29%0A%0AreadFile%28file%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW18\"></a>\n**Listing 16-12**JavaScript: Calling a function to read the contents of a file\n\n1. `var file = app.chooseFile({`\n2. ` ofType: \"txt\",`\n3. ` withPrompt: \"Please select a text file to read:\"`\n4. `})`\n6. `readFile(file)`\n7. `// Result: \"Contents of the chosen file.\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW10\"></a>\n\n### Reading and Splitting a File\n\nThe handlers in Listing 16-13 and Listing 16-14 read the contents of a specified text file, using a delimiter to split it into a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20readAndSplitFile%28theFile%2C%20theDelimiter%29%0A%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20--%20Read%20the%20file%20using%20a%20specific%20delimiter%20and%20return%20the%20results%0A%20%20%20%20return%20read%20file%20theFile%20using%20delimiter%20%7BtheDelimiter%7D%0Aend%20readAndSplitFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW11\"></a>\n**Listing 16-13**AppleScript: Handler for reading and splitting the contents of a file based on a delimiter\n\n1. `on readAndSplitFile(theFile, theDelimiter)`\n2. ` -- Convert the file to a string`\n3. ` set theFile to theFile as string`\n5. ` -- Read the file using a specific delimiter and return the results`\n6. ` return read file theFile using delimiter {theDelimiter}`\n7. `end readAndSplitFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20readAndSplitFile%28file%2C%20delimiter%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%2F%2F%20Read%20the%20file%20using%20a%20specific%20delimiter%20and%20return%20the%20results%0A%20%20%20%20return%20app.read%28Path%28fileString%29%2C%20%7B%20usingDelimiter%3A%20delimiter%20%7D%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW19\"></a>\n**Listing 16-14**JavaScript: Function for reading and splitting the contents of a file based on a delimiter\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function readAndSplitFile(file, delimiter) {`\n5. ` // Convert the file to a string`\n6. ` var fileString = file.toString()`\n8. ` // Read the file using a specific delimiter and return the results`\n9. ` return app.read(Path(fileString), { usingDelimiter: delimiter })`\n10. `}`\n\nListing 16-15 and Listing 16-16 shows how to call the handlers in Listing 16-13 and Listing 16-14 to read the paragraphs of a chosen log file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20of%20type%20%22log%22%20with%20prompt%20%22Please%20select%20a%20log%20file%3A%22%0AreadAndSplitFile%28theFile%2C%20return%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW12\"></a>\n**Listing 16-15**AppleScript: Calling a handler to read and split the contents of a file based on a delimiter\n\n1. `set theFile to choose file of type \"log\" with prompt \"Please select a log file:\"`\n2. `readAndSplitFile(theFile, return)`\n3. `--&gt; Result: {\"Log entry 1\", \"Log entry 2\", ... }`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20file%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20ofType%3A%20%22log%22%2C%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20a%20log%20file%3A%22%0A%7D%29%0AreadAndSplitFile%28file%2C%20%22%5Cn%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW20\"></a>\n**Listing 16-16**JavaScript: Calling a function to read and split the contents of a file based on a delimiter\n\n1. `var file = app.chooseFile({`\n2. ` ofType: \"log\",`\n3. ` withPrompt: \"Please select a log file:\"`\n4. `})`\n5. `readAndSplitFile(file, \"\\\\n\")`\n6. `// Result: [\"Log entry 1\", \"Log entry 2\", ...]`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ReadandWriteFiles.html", "sha256": "5f5f77c973135d0db7c3518ca5efaa32d7f383be51e984eb9577907f4ed81982", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "ReferenceFilesandFolders.md", "title": "Referencing Files and Folders", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH34\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH57\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH57-SW1\"></a>\n\n## Referencing Files and Folders\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW39\"></a>\n\n### Referencing Files and Folders in AppleScript\n\nIn AppleScript, file and folder paths are typically represented using `alias`, `file`, and `POSIX file` objects.\n\n> **Note**\n>\n>\n> Additional information about working with file and folder paths in AppleScript can be found in [Aliases and Files](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html#//apple_ref/doc/uid/TP40000983-CH218-SW28) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW3\"></a>\n\n### Alias Objects\n\nAn `alias` object dynamically points to an existing item in the file system. Since an alias is dynamic, it continues pointing to the item even if the item is renamed or moved, the same way an alias file works when you manually create one in the Finder. With an AppleScript alias, the original item must exist at run time or an error will occur.\n\nAn `alias` object is displayed as a colon-delimited path preceded by an `alias` specifier, in the format shown in Listing 15-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=alias%20%22VolumeName%3AFolderName%3ASubfolderName%3AFileName%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW4\"></a>\n**Listing 15-1**AppleScript: Structure of an alias object\n\n1. `alias \"VolumeName:FolderName:SubfolderName:FileName\"`\n\nListing 15-2 shows an example of an `alias` object that references the Desktop folder.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3A%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW5\"></a>\n**Listing 15-2**AppleScript: Example of an alias reference to a folder\n\n1. `alias \"Macintosh HD:Users:yourUserName:Desktop:\"`\n\nListing 15-3 is an example of an `alias` object that references an existing file on the Desktop.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW6\"></a>\n**Listing 15-3**AppleScript: Example of an alias reference to a file\n\n1. `alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\nTo create an alias, add the alias specifier prefix to a colon-delimited path string, as shown in Listing 15-4.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3A%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW10\"></a>\n**Listing 15-4**AppleScript: Creating an alias from a colon-delimited path string\n\n1. `set thePath to alias \"Macintosh HD:Users:yourUserName:Desktop:\"`\n\nMany commands accept an alias as a parameter and/or return an alias as a result. In Listing 15-5, the `choose file` command accepts a folder `alias` object in its `default location` parameter. The command then returns an `alias` object that points to the chosen file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theDefaultFolder%20to%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3A%22%0Achoose%20file%20default%20location%20theDefaultFolder)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW18\"></a>\n**Listing 15-5**AppleScript: Example of a command that accepts an alias parameter and returns an alias result\n\n1. `set theDefaultFolder to alias \"Macintosh HD:Users:yourUserName:Desktop:\"`\n2. `choose file default location theDefaultFolder`\n3. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW7\"></a>\n\n### File Objects\n\nA `file` object is a static reference to an item at a specific location in the file system. It’s not dynamic, and can even refer to an item that doesn’t exist yet. For example, a `save` command may accept a file reference when saving to a new file.\n\nA `file` object is displayed as a colon-delimited path preceded by a `file` specifier, in the format shown in Listing 15-6.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=file%20%22VolumeName%3AFolderName%3ASubfolderName%3AFileName%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW8\"></a>\n**Listing 15-6**AppleScript: Structure of a file object\n\n1. `file \"VolumeName:FolderName:SubfolderName:FileName\"`\n\nListing 15-7 shows an example of a `file` object that references a file that may or may not exist on the Desktop.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=file%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW9\"></a>\n**Listing 15-7**AppleScript: Example of a file reference to a file\n\n1. `file \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\nUnlike the way an `alias` object works, you can’t create a `file` object simply by prefixing a path string with the `file` specifier. For example, Listing 15-7 errors when run within a script.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20file%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW20\"></a>\n**Listing 15-8**AppleScript: Example of incorrect usage of a file object specifier\n\n1. `set theFile to file \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\nInstead, you must prefix the path with the `file` specifier at the time the file is targeted by a command, as shown in Listing 15-8.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0Aread%20file%20theFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW21\"></a>\n**Listing 15-9**AppleScript: Example of correct usage of a file object specifier\n\n1. `set theFile to \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n2. `read file theFile`\n\n> **Note**\n>\n>\n> A `file` object can refer to either a file or a folder, despite the `file` specifier prefix.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW11\"></a>\n\n### POSIX File Objects\n\nSome scriptable apps are designed to work with POSIX-style paths, rather than AppleScript `alias` and `file` objects. Like a `file` object, a `POSIX file` object is not dynamic and can also refer to an item that doesn’t exist yet.\n\nA `POSIX file` object is displayed as a slash-delimited path preceded by a `POSIX file` specifier, in the format shown in Listing 15-10.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=POSIX%20file%20%22%2FFolderName%2FSubfolderName%2FFileName%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW12\"></a>\n**Listing 15-10**AppleScript: Structure of a POSIX file object\n\n1. `POSIX file \"/FolderName/SubfolderName/FileName\"`\n\nListing 15-11 is an example of a `POSIX file` object that references a file that may or may not exist on the Desktop.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=POSIX%20file%20%22%2FUsers%2FyourUserName%2FDesktop%2FMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW13\"></a>\n**Listing 15-11**AppleScript: Example of a POSIX file reference to a file\n\n1. `POSIX file \"/Users/yourUserName/Desktop/My File.txt\"`\n\n> **Note**\n>\n>\n> A `POSIX file` object can refer to either a file or a folder, despite the `POSIX file` specifier prefix.\n>\n> In a POSIX path, the startup disk’s name is omitted and represented by a leading slash. Other disks are referenced in relation to the `Volumes` directory of the startup disk, for example: `/Volumes/DiskName/FolderName/SubFolderName/FileName`.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW15\"></a>\n\n### App-Specific References to Files and Folders\n\nSome apps, such as the Finder and System Events, have their own syntax for referring to files and folders. Listing 15-12 shows how a Finder file reference appears.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=document%20file%20%22My%20File.txt%22%20of%20folder%20%22Desktop%22%20of%20folder%20%22yourUserName%22%20of%20folder%20%22Users%22%20of%20startup%20disk%20of%20application%20%22Finder%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW16\"></a>\n**Listing 15-12**AppleScript: Example of a reference to a file in the Finder\n\n1. `document file \"My File.txt\" of folder \"Desktop\" of folder \"yourUserName\" of folder \"Users\" of startup disk of application \"Finder\"`\n\nListing 15-13 shows how a System Events folder reference appears.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=folder%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3A%22%20of%20application%20%22System%20Events%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW17\"></a>\n**Listing 15-13**AppleScript: Example of a reference to a folder in System Events\n\n1. `folder \"Macintosh HD:Users:yourUserName:Desktop:\" of application \"System Events\"`\n\nSince this terminology is app-specific, it doesn’t work in other apps. For example, you can’t write a script that tries to import a Finder reference to an audio file into iTunes because iTunes doesn’t understand Finder file references. In this case, you must coerce the Finder file reference to something iTunes can understand, like an alias. See [Converting Between Path Formats](#//apple_ref/doc/uid/TP40016239-CH34-SW19) below. In most cases, apps with their own path syntax also support standard AppleScript path types.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW19\"></a>\n\n### Converting Between Path Formats\n\nSince different situations may result in paths appearing in different formats, you may need to regularly convert one path format to another. Sometimes, this can be done by using the `as` coercion operator, as shown in Listing 15-14, Listing 15-15, Listing 15-16, and Listing 15-17.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFilePath%20to%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0Aset%20theFilePath%20to%20theFilePath%20as%20alias)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW23\"></a>\n**Listing 15-14**AppleScript: Coercing a string to an alias\n\n1. `set theFilePath to \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n2. `set theFilePath to theFilePath as alias`\n3. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFilePath%20to%20choose%20file%0A--%3E%20Result%3A%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0A%0Aset%20theFilePath%20to%20theFilePath%20as%20string%0A--%3E%20Result%3A%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW24\"></a>\n**Listing 15-15**AppleScript: Coercing an alias to a string\n\n1. `set theFilePath to choose file`\n2. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n4. `set theFilePath to theFilePath as string`\n5. `--&gt; Result: \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFilePath%20to%20POSIX%20file%20%22%2FUsers%2FyourUserName%2FDesktop%2FMy%20File.txt%22%0Aset%20theFilePath%20to%20theFilePath%20as%20alias%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW25\"></a>\n**Listing 15-16**AppleScript: Coercing a POSIX file to an alias\n\n1. `set theFilePath to POSIX file \"/Users/yourUserName/Desktop/My File.txt\"`\n2. `set theFilePath to theFilePath as alias`\n3. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22Finder%22%0A%20%20%20%20set%20theFilePath%20to%20file%20%22My%20File.txt%22%20of%20desktop%0Aend%20tell%0A--%3E%20Result%3A%20document%20file%20%22My%20File.txt%22%20of%20folder%20%22Desktop%22%20of%20folder%20%22yourUserName%22%20of%20folder%20%22Users%22%20of%20startup%20disk%20of%20application%20%22Finder%22%0A%0Aset%20theFilePath%20to%20theFilePath%20as%20alias%0A--%3E%20Result%3A%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW37\"></a>\n**Listing 15-17**AppleScript: Coercing a Finder file reference to an alias\n\n1. `tell application \"Finder\"`\n2. ` set theFilePath to file \"My File.txt\" of desktop`\n3. `end tell`\n4. `--&gt; Result: document file \"My File.txt\" of folder \"Desktop\" of folder \"yourUserName\" of folder \"Users\" of startup disk of application \"Finder\"`\n6. `set theFilePath to theFilePath as alias`\n7. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\nConverting from a string or alias to a POSIX path can’t be done through coercion. Instead, you must access the `POSIX path` property of the path to convert, as shown in Listing 15-18.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFilePath%20to%20choose%20file%0A--%3E%20Result%3A%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0A%0Aset%20theFilePath%20to%20POSIX%20path%20of%20theFilePath%0A--%3E%20Result%3A%20%22%2FUsers%2FyourUserName%2FDesktop%2FMy%20File.txt%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW26\"></a>\n**Listing 15-18**AppleScript: Converting an alias to a POSIX path string\n\n1. `set theFilePath to choose file`\n2. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n4. `set theFilePath to POSIX path of theFilePath`\n5. `--&gt; Result: \"/Users/yourUserName/Desktop/My File.txt\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW27\"></a>\n\n### Using Conversion Handlers\n\nRunning paths through a conversion handler is a good way to ensure the format you expect.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW28\"></a>\n\n### Converting a Path to an Aliases\n\nThe handler in Listing 15-19 converts strings, `path` objects, `POSIX file` objects, Finder paths, and System Events paths to `alias` format.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertPathToAlias%28thePath%29%0A%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%28path%20of%20disk%20item%20%28thePath%20as%20string%29%29%20as%20alias%0A%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%28path%20of%20disk%20item%20%28path%20of%20thePath%29%20as%20string%29%20as%20alias%0A%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20end%20tell%0Aend%20convertPathToAlias)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW29\"></a>\n**Listing 15-19**AppleScript: Handler that converts a path to an AppleScript alias\n\n1. `on convertPathToAlias(thePath)`\n2. ` tell application \"System Events\"`\n3. ` try`\n4. ` return (path of disk item (thePath as string)) as alias`\n5. ` on error`\n6. ` return (path of disk item (path of thePath) as string) as alias`\n7. ` end try`\n8. ` end tell`\n9. `end convertPathToAlias`\n\nListing 15-19 shows how to call the handler in Listing 15-19 to convert a POSIX-style path string to an alias.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20%22%2FUsers%2FyourUserName%2FDesktop%2FMy%20File.txt%22%0Aset%20thePath%20to%20convertPathToAlias%28thePath%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW30\"></a>\n**Listing 15-20**AppleScript: Calling a handler to convert a path to an AppleScript alias\n\n1. `set thePath to \"/Users/yourUserName/Desktop/My File.txt\"`\n2. `set thePath to convertPathToAlias(thePath)`\n3. `--&gt; Result: alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW31\"></a>\n\n### Converting a Path to a String\n\nThe handler in Listing 15-21 converts a path to string format.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertPathToString%28thePath%29%0A%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20path%20of%20disk%20item%20%28thePath%20as%20string%29%0A%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20path%20of%20thePath%0A%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20end%20tell%0Aend%20convertPathToString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW32\"></a>\n**Listing 15-21**AppleScript: Handler that converts a path to an a string\n\n1. `on convertPathToString(thePath)`\n2. ` tell application \"System Events\"`\n3. ` try`\n4. ` return path of disk item (thePath as string)`\n5. ` on error`\n6. ` return path of thePath`\n7. ` end try`\n8. ` end tell`\n9. `end convertPathToString`\n\nListing 15-22 shows how to call the handler in Listing 15-21 to convert an alias to a path string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0Aset%20thePath%20to%20convertPathToString%28thePath%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW33\"></a>\n**Listing 15-22**AppleScript: Calling a handler to convert an AppleScript alias to a path string\n\n1. `set thePath to alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n2. `set thePath to convertPathToString(thePath)`\n3. `--&gt; Result: \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW34\"></a>\n\n### Converting a Path to a POSIX Path String\n\nThe handler in Listing 15-23 converts a path to POSIX path string format.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20convertPathToPOSIXString%28thePath%29%0A%20%20%20%20tell%20application%20%22System%20Events%22%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20thePath%20to%20path%20of%20disk%20item%20%28thePath%20as%20string%29%0A%20%20%20%20%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20thePath%20to%20path%20of%20thePath%0A%20%20%20%20%20%20%20%20end%20try%0A%20%20%20%20end%20tell%0A%20%20%20%20return%20POSIX%20path%20of%20thePath%0Aend%20convertPathToPOSIXString)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW35\"></a>\n**Listing 15-23**AppleScript: Handler that converts a path to an a POSIX path string\n\n1. `on convertPathToPOSIXString(thePath)`\n2. ` tell application \"System Events\"`\n3. ` try`\n4. ` set thePath to path of disk item (thePath as string)`\n5. ` on error`\n6. ` set thePath to path of thePath`\n7. ` end try`\n8. ` end tell`\n9. ` return POSIX path of thePath`\n10. `end convertPathToPOSIXString`\n\nListing 15-24 shows how to call the handler in Listing 15-23 to convert an alias to a path string.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20thePath%20to%20alias%20%22Macintosh%20HD%3AUsers%3AyourUserName%3ADesktop%3AMy%20File.txt%22%0Aset%20thePath%20to%20convertPathToPOSIXString%28thePath%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW36\"></a>\n**Listing 15-24**AppleScript: Calling a handler to convert an AppleScript alias to a POSIX path string\n\n1. `set thePath to alias \"Macintosh HD:Users:yourUserName:Desktop:My File.txt\"`\n2. `set thePath to convertPathToPOSIXString(thePath)`\n3. `--&gt; Result: \"/Users/yourUserName/Desktop/My File.txt\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW40\"></a>\n\n### Referencing Files and Folders in JavaScript\n\nIn JavaScript, file and folder paths are represented using `Path` objects.\n\nTo create a path, pass a POSIX-style string to the `Path` object, as shown in Listing 15-25.\n\n**JAVASCRIPT**\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW38\"></a>\n**Listing 15-25**JavaScript: Creating a `Path` object\n\n1. `Path(\"/FolderName/SubfolderName/FileName\")`\n\nTo convert a path to a string, call the `toString()` method on the path, as shown in Listing 15-26.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20path%20%3D%20Path%28%22%2FUsers%2FyourUserName%2FDesktop%2FMy%20File.txt%22%29%0Avar%20string%20%3D%20path.toString%28%29%0Astring)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH34-SW41\"></a>\n**Listing 15-26**JavaScript: Converting a `Path` object to a string\n\n1. `var path = Path(\"/Users/yourUserName/Desktop/My File.txt\")`\n2. `var string = path.toString()`\n3. `string`\n4. `// Result: \"/Users/yourUserName/Desktop/My File.txt\"`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ReferenceFilesandFolders.html", "sha256": "3f5549bdd2159702c5740efa02b30eebe2a52187e3a8c266b8fb000e36fe40ab", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "RemoveMarkupfromHTML.md", "title": "Removing HTML Markup from Text", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH64\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH64-SW1\"></a>\n\n## Removing HTML Markup from Text\n\nWhen parsing HTML content, it’s often necessary to remove markup entirely. The handler in Listing 34-1 removes all HTML tags from the text provided, returning only the remaining text—the contents of the tags.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Remove%20HTML%20Markup%20From%20Text&script=on%20removeMarkupFromText%28theText%29%0D%20%20%20%20set%20tagDetected%20to%20false%0D%20%20%20%20set%20theCleanText%20to%20%22%22%0D%20%20%20%20repeat%20with%20a%20from%201%20to%20length%20of%20theText%0D%20%20%20%20%20%20%20%20set%20theCurrentCharacter%20to%20character%20a%20of%20theText%0D%20%20%20%20%20%20%20%20if%20theCurrentCharacter%20is%20%22%3C%22%20then%0D%20%20%20%20%20%20%20%20%20%20%20%20set%20tagDetected%20to%20true%0D%20%20%20%20%20%20%20%20else%20if%20theCurrentCharacter%20is%20%22%3E%22%20then%0D%20%20%20%20%20%20%20%20%20%20%20%20set%20tagDetected%20to%20false%0D%20%20%20%20%20%20%20%20else%20if%20tagDetected%20is%20false%20then%0D%20%20%20%20%20%20%20%20%20%20%20%20set%20theCleanText%20to%20theCleanText%20%26%20theCurrentCharacter%20as%20string%0D%20%20%20%20%20%20%20%20end%20if%0D%20%20%20%20end%20repeat%0D%20%20%20%20return%20theCleanText%0Dend%20removeMarkupFromText%0D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH64-SW2\"></a>\n**Listing 34-1**AppleScript: Handler that removes HTML markup from text\n\n1. `on removeMarkupFromText(theText)`\n2. ` set tagDetected to false`\n3. ` set theCleanText to \"\"`\n4. ` repeat with a from 1 to length of theText`\n5. ` set theCurrentCharacter to character a of theText`\n6. ` if theCurrentCharacter is \"&lt;\" then`\n7. ` set tagDetected to true`\n8. ` else if theCurrentCharacter is \"&gt;\" then`\n9. ` set tagDetected to false`\n10. ` else if tagDetected is false then`\n11. ` set theCleanText to theCleanText & theCurrentCharacter as string`\n12. ` end if`\n13. ` end repeat`\n14. ` return theCleanText`\n15. `end removeMarkupFromText`\n\nListing 34-2 shows how to call the handler in Listing 34-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&name=Call%20Handler%20to%20Remove%20HTML%20Markup%20from%20Text&script=set%20theText%20to%20%22%3Ca%20href%3D%5C%22http%3A%2F%2Fwww.apple.com%2Fmac%5C%22%3EThis%20is%20a%20%3CB%3Egreat%3C%2FB%3E%20time%20to%20own%20a%20Mac!%3C%2Fa%3E%22%0AremoveMarkupFromText%28theText%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH64-SW3\"></a>\n**Listing 34-2**AppleScript: Calling a handler to remove HTML markup from text\n\n1. `set theText to \"&lt;a href=\\\\\"http://www.apple.com/mac\\\\\"&gt;This is a &lt;B&gt;great&lt;/B&gt; time to own a Mac!&lt;/a&gt;\"`\n2. `removeMarkupFromText(theText)`\n3. `--&gt; Result: \"This is a great time to own a Mac!\"`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/RemoveMarkupfromHTML.html", "sha256": "4e1c00f745862b4256d8cf4923c0bb1878c2f4585162de1cad0397803305b3a3", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "RevisionHistory.md", "title": "Document Revision History", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH99\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH99-SW1\"></a>\n\n## Document Revision History\n\nThis table describes the changes to *Mac Automation Scripting Guide*.\n\n| Date | Notes |\n| --- | --- |\n| 2018-06-07 | New document that provides an introduction to using AppleScript and JavaScript to streamline workflows and increase productivity in OS X. |\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/RevisionHistory.html", "sha256": "cd6be19114cd32fd4552d9642f4195328666672a0fbd5f003da3107f00079f11", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "RunaScript.md", "title": "Running a Script", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH14\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH14-SW1\"></a>\n\n## Running a Script\n\nScripts can be opened and run in Script Editor and script applications can be run outside of Script Editor like any other OS X application. Some apps and tools, such as Automator and the systemwide script menu, can also run scripts.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH14-SW2\"></a>\n\n### Running a Script in Script Editor\n\nTo run a script in Script Editor, click the Run button (![image: ../Art/icon_record_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_record_2x.png)) in the toolbar, press Command-R, or choose Script &gt; Run, as shown in Figure 8-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH14-SW3\"></a>\n**Figure 8-1**Running a script in Script Editor\n![image: ../Art/script-editor_run_menu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_run_menu_2x.png)\n\nAs the script runs, the Accessory View pane shows events and results of the script. This information can be useful for troubleshooting. See [Viewing Script Events and Results](https://developer.apple.com/library/archive/mac-automation-scripting-guide/GettoKnowScriptEditor.md#//apple_ref/doc/uid/TP40016239-CH5-SW6).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH14-SW4\"></a>\n\n### Running a Script Application\n\nTo run a script application, double-click the script in the Finder, just like you would do to launch any other application. The script opens and begins running.\n\n> **Note**\n>\n>\n> When running a script app outside of Script Editor, you can’t view a list of the script’s events and results. To monitor this activity, open the app in Script Editor instead, run it, and check the Accessory View pane.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/RunaScript.html", "sha256": "1e766a22efdd6a3c9d91473ac0d8e1a806f2324b061fd006ba35ff23355f5262", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "SaveaScript.md", "title": "Saving a Script", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH13\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW1\"></a>\n\n## Saving a Script\n\nAfter you write a script, you can save it for future reference or to be run outside of Script Editor.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW2\"></a>\n\n### Saving a Script or Script Bundle\n\nScripts and script bundles open in Script Editor when double-clicked in the Finder.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW4\"></a>\n\n**To save a script or script bundle**\n\n1. Choose File &gt; Save (or press Command-S) to display the save dialog.\n2. Type a name for the script and choose an output folder.\n3. Choose Script or Script Bundle from the File Format popup menu.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW6\"></a>\n\n   ![image: ../Art/scripteditor_save_dialog_scriptformat_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_save_dialog_scriptformat_2x.png)\n4. Click Save.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW3\"></a>\n\n### Saving a Script Application\n\nScript applications, known as applets, work like other apps on your Mac. Double-click an applet to run it.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW7\"></a>\n\n**To save an applet**\n\n1. Choose File &gt; Save (or press Command-S) to display the save dialog.\n2. Type a name for the applet and choose an output folder.\n3. Choose Application from the File Format popup menu.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW8\"></a>\n\n   ![image: ../Art/scripteditor_save_dialog_appformat_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_save_dialog_appformat_2x.png)\n4. If you want the script’s description—defined in the Accessory View pane—to display when the applet launches, select the “Show startup screen” checkbox.\n5. If you want to create a stay-open applet, select the “Stay open after run handler” checkbox.\n6. Click Save.\n\n> **Note**\n>\n>\n> To open a saved script applet or droplet for editing, drag it onto the Script Editor app or choose File &gt; Open in Script Editor.\n>\n> To convert a previously saved script or script bundle to an applet, choose File &gt; Duplicate, press Shift-Command-S, or choose File &gt; Export. Then, perform the steps above.\n>\n> If an AppleScript applet contains an `open` event handler, or a JavaScript applet contains an `openDocuments` function, it automatically becomes a drag and drop application known as a droplet. Drag files and folders onto the droplet to process them, or double-click the droplet to run it. To learn about creating droplets, see [Processing Dropped Files and Folders](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ProcessDroppedFilesandFolders.md#//apple_ref/doc/uid/TP40016239-CH53-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW5\"></a>\n\n### Protecting a Script’s Source Code\n\nIf you plan to distribute your script, you may wish to protect is source code. This is done by exporting the script in run-only format.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW10\"></a>\n\n**To save a script in run-only format**\n\n1. Choose File &gt; Export to display the export dialog.\n2. Type a name for the applet and choose an output folder.\n3. Choose a format from the File Format popup menu.\n4. If you’re saving in application format, choose whether you want a startup screen or a stay-open script.\n5. Select the Run-only checkbox.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW11\"></a>\n\n   ![image: ../Art/scripteditor_export_dialog_runonly_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_export_dialog_runonly_2x.png)\n6. Click Save.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-DontLinkElementID_9\"></a>\n\n\nImportant\n\nWhen saving a script in run-only format, make sure you retain a backup of your editable script.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW12\"></a>\n\n### Code Signing a Script\n\nBy default, the security settings in OS X only allow the launching of apps (including applets and droplets) that have been created by you, downloaded from the Mac App Store, or created by developers identified by Apple. If you plan to distribute your scripts to others, you should consider code signing your scripts with an Apple developer ID.\n\nYou obtain a Developer ID certificate from [Certificates, Identifiers & Profiles](https://developer.apple.com/account/mac/certificate/) in your developer account and import it on your Mac. For detailed information about obtaining and importing a certificate, see Maintaining Your Signing Identities and Certificates in *App Distribution Guide*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW13\"></a>\n\n**To prepare a script application or bundle code signing**\n\n1. If the Bundle Contents pane isn’t visible, choose View &gt; Show Bundle, press Command-0, or click the bundle contents button (![image: ../Art/icon_bundlecontents_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_bundlecontents_2x.png)) in the toolbar.\n2. Make sure the following highlighted fields are populated in the Bundle Contents pane.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW14\"></a>\n\n   ![image: ../Art/scripteditor_bundleinfo_codesigningfields_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_bundleinfo_codesigningfields_2x.png)\n   * Name—The name of your script.\n   * Identifier—A uniform type identifier for your script. For information, see *[Uniform Type Identifiers Overview](https://developer.apple.com/library/archive/../../FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html#//apple_ref/doc/uid/TP40001319)*.\n   * Short Version—The version number for your script.\n   * Copyright—The copyright string for your script.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW15\"></a>\n\n**To code sign a script**\n\n1. Choose File &gt; Export to display the export dialog.\n2. Type a name for the applet and choose an output folder.\n3. Choose a format from the File Format popup menu.\n4. If you’re saving in application format, choose whether you want a startup screen or a stay-open script.\n5. Choose whether you want to save the script as run-only.\n6. Choose your developer identity from the Code Sign popup menu.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH13-SW16\"></a>\n\n   ![image: ../Art/scripteditor_export_dialog_code_signing_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_export_dialog_code_signing_2x.png)\n7. Click Save.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/SaveaScript.html", "sha256": "88133199cae24ae4e6b843434e981dc696b9be73f226523bdc1139ab2d10ec6e", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "SpeakText.md", "title": "Speaking Text", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH62\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW1\"></a>\n\n## Speaking Text\n\nSpoken text is another way to provide feedback to users during script execution; instead of reading a message visually, the user can listen to it audibly. Listing 25-1 and Listing 25-2 show how the Standard Additions scripting addition’s `say` command can be used to speak a phrase.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=say%20%22Processing%20is%20complete.%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW2\"></a>\n**Listing 25-1**AppleScript: Speaking text\n\n1. `say \"Processing is complete.\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Aapp.say%28%22Processing%20is%20complete.%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW3\"></a>\n**Listing 25-2**JavaScript: Speaking text\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `app.say(\"Processing is complete.\")`\n\nThe `say` command has a number of optional parameters, some of which allow you to specify a voice and attributes such as speaking rate, pitch, and modulation. See Listing 25-3 and Listing 25-4.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=say%20%22Just%20what%20do%20you%20think%20you%27re%20doing%20Dave%3F%22%20using%20%22Alex%22%20speaking%20rate%20140%20pitch%2042%20modulation%2060)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW4\"></a>\n**Listing 25-3**AppleScript: Speaking text with custom speech attributes\n\n1. `say \"Just what do you think you're doing Dave?\" using \"Alex\" speaking rate 140 pitch 42 modulation 60`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Aapp.say%28%22Just%20what%20do%20you%20think%20you%27re%20doing%20Dave%3F%22%2C%20%7B%0A%20%20%20%20using%3A%20%22Alex%22%2C%0A%20%20%20%20speakingRate%3A%20140%2C%0A%20%20%20%20pitch%3A%2042%2C%0A%20%20%20%20modulation%3A%2060%0A%7D%29%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW5\"></a>\n**Listing 25-4**JavaScript: Speaking text with custom speech attributes\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `app.say(\"Just what do you think you're doing Dave?\", {`\n5. ` using: \"Alex\",`\n6. ` speakingRate: 140,`\n7. ` pitch: 42,`\n8. ` modulation: 60`\n9. `})`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW10\"></a>\n\n### Saving Text as an Audio File\n\nThe `say` command’s `saving as` parameter adds another level of power, enabling text to be converted to audio format and saved as an `.aiff` file for later listening. This technique could be used, for example, to save email messages in audio format, as demonstrated by Listing 25-5 and Listing 25-6.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22Mail%22%0A%20%20%20%20tell%20message%201%20of%20inbox%0A%20%20%20%20%20%20%20%20set%20theSubject%20to%20subject%0A%20%20%20%20%20%20%20%20set%20theBody%20to%20content%0A%20%20%20%20end%20tell%0Aend%20tell%0A%0Aset%20theOutputFile%20to%20%28path%20to%20desktop%20as%20string%29%20%26%20%22message.aiff%22%0Aset%20theAudio%20to%20%22Message%20Subject%3A%20%22%20%26%20theSubject%20%26%20return%20%26%20%22Body%3A%20%22%20%26%20theBody%0Asay%20theAudio%20saving%20to%20theOutputFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW6\"></a>\n**Listing 25-5**AppleScript: Saving text as audio\n\n1. `tell application \"Mail\"`\n2. ` tell message 1 of inbox`\n3. ` set theSubject to subject`\n4. ` set theBody to content`\n5. ` end tell`\n6. `end tell`\n8. `set theOutputFile to (path to desktop as string) & \"message.aiff\"`\n9. `set theAudio to \"Message Subject: \" & theSubject & return & \"Body: \" & theBody`\n10. `say theAudio saving to theOutputFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20Mail%20%3D%20Application%28%22Mail%22%29%0Avar%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Amessage%20%3D%20Mail.inbox.messages%5B0%5D%0Asubject%20%3D%20message.subject%28%29%0Abody%20%3D%20message.content%28%29%0A%0AoutputFile%20%3D%20%28%28app.pathTo%28%22desktop%22%29.toString%28%29%29%20%2B%20%22%2Fmessage.aiff%22%29%0Aaudio%20%3D%20%22Message%20Subject%3A%20%22%20%2B%20subject%20%2B%20%22%5CnBody%3A%20%22%20%2B%20body%0Aapp.say%28audio%2C%20%7BsavingTo%3A%20outputFile%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW7\"></a>\n**Listing 25-6**JavaScript: Saving text as audio\n\n1. `var Mail = Application(\"Mail\")`\n2. `var app = Application.currentApplication()`\n3. `app.includeStandardAdditions = true`\n5. `message = Mail.inbox.messages[0]`\n6. `subject = message.subject()`\n7. `body = message.content()`\n9. `outputFile = ((app.pathTo(\"desktop\").toString()) + \"/message.aiff\")`\n10. `audio = \"Message Subject: \" + subject + \"\\\\nBody: \" + body`\n11. `app.say(audio, {savingTo: outputFile})`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW11\"></a>\n\n### Speaking Text While Displaying a Dialog\n\nTypically, a script executes a single command at a time, waiting for a command to complete before moving onto the next. Listing 25-7 and Listing 25-8 demonstrate how to display a dialog message, while simultaneously using the `NSTask` class in the Foundation framework to read the message out loud.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=use%20framework%20%22Foundation%22%0Ause%20scripting%20additions%0A%0Aset%20theStatusText%20to%20%22Processing%20is%20complete.%22%0Aset%20theTask%20to%20%28current%20application%27s%20NSTask%27s%20launchedTaskWithLaunchPath%3A%22%2Fusr%2Fbin%2Fsay%22%20arguments%3A%7BtheStatusText%7D%29%0Atry%0A%20%20%20%20display%20dialog%20theStatusText%0A%20%20%20%20theTask%27s%20terminate%28%29%0Aon%20error%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20theTask%27s%20terminate%28%29%0A%20%20%20%20end%20try%0Aend%20try)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW8\"></a>\n**Listing 25-7**AppleScriptObjC: Speaking text while displaying a dialog\n\n1. `use framework \"Foundation\"`\n2. `use scripting additions`\n4. `set theStatusText to \"Processing is complete.\"`\n5. `set theTask to (current application's NSTask's launchedTaskWithLaunchPath:\"/usr/bin/say\" arguments:{theStatusText})`\n6. `try`\n7. ` display dialog theStatusText`\n8. ` theTask's terminate()`\n9. `on error`\n10. ` try`\n11. ` theTask's terminate()`\n12. ` end try`\n13. `end try`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Avar%20statusText%20%3D%20%22Processing%20is%20complete.%22%0Avar%20task%20%3D%20%24.NSTask.launchedTaskWithLaunchPathArguments%28%22%2Fusr%2Fbin%2Fsay%22%2C%20%5BstatusText%5D%29%0A%0Atry%20%7B%0A%20%20%20%20app.displayDialog%28statusText%29%0A%20%20%20%20task.terminate%0A%7D%0Acatch%28error%29%7B%0A%20%20%20%20task.terminate%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH62-SW9\"></a>\n**Listing 25-8**JavaScriptObjC: Speaking text while displaying a dialog\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `var statusText = \"Processing is complete.\"`\n5. `var task = $.NSTask.launchedTaskWithLaunchPathArguments(\"/usr/bin/say\", [statusText])`\n7. `try {`\n8. ` app.displayDialog(statusText)`\n9. ` task.terminate`\n10. `}`\n11. `catch(error){`\n12. ` task.terminate`\n13. `}`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/SpeakText.html", "sha256": "91ad49e588a254683e66ac14f31dc1496a58ccab51cd9d91b0a06674e14b9536", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "TypesofScripts.md", "title": "Types of Scripts", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH72\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH72-SW1\"></a>\n\n## Types of Scripts\n\nThere are many different types of scripts on the Mac.\n\n![image: ../Art/icon_applet_48_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_applet_48_2x.png)\n\n**Applets**—A script that’s been saved as an app. It behaves like other apps. Double-click it to launch and run it. When an applet is launched, any code in its `run` handler executes. If a script doesn’t contain an explicit `run` handler, then the top level of the script is treated as an implicit `run` handler and any code there executes.\n\n![image: ../Art/icon_droplet_48_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_droplet_48_2x.png)\n\n**Droplets**—A script applet that has been configured to accept dropped files and folders. Double-click it to launch and run it—execute its `run` handler. Or, drag and drop files and folders onto it to process them. In a droplet, dropped files and folders are passed directly to an AppleScript `open` handler or JavaScript `openDocuments` function for processing.\n\n![image: ../Art/icon_compiled_48_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_compiled_48_2x.png)\n\n**Scripts**—A script document file. Double-click it to open it for editing. Some apps and processes can load and run scripts. For example, Mail rules can execute scripts to process messages matching specific criteria. Scripts are sometimes referred to as *compiled scripts*.\n\n![image: ../Art/icon_compiled_48_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_compiled_48_2x.png)\n\n**Script bundles**—A script document that’s been saved in *bundle* format. A bundle is a directory with a standardized, hierarchical structure that holds executable code and the resources used by that code.\n\n![image: ../Art/icon_applet_48_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/icon_applet_48_2x.png)\n\n**Stay-open scripts**—By default, applets and droplets run and quit after launch. When configured as stay-open, however, they remain open until explicitly ordered to quit. Often, stay-open scripts include an `idle` handler, which initiates periodic actions.\n\nFor detailed information about `run`, `open`, and `idle` handlers in AppleScript, see [Handlers in Script Applications](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW14) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*. For information about `run`, `openDocuments`, and `idle` functions in JavaScript, see [Applets](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW15) in *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)*. For information about bundles, see *[Bundle Programming Guide](https://developer.apple.com/library/archive/../../CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i)*.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/TypesofScripts.html", "sha256": "e4ad4bdf4f9cf1dfd2567a704280fbf8ed79d94700a6931bbd63eeaf572f8f8c", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "UseDictationtoRunScripts.md", "title": "Using Dictation to Run Scripts", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH87\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW1\"></a>\n\n## Using Dictation to Run Scripts\n\nDictation commands is a powerful accessibility feature in OS X that lets you control your Mac using your voice. With dictation commands enabled, simply speak a command and watch it execute. The system comes with dozens of built-in dictation commands for opening apps, selecting menus, and more. You can extend the capabilities of dictation even further by creating your own custom commands using scripting and Automator.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW4\"></a>\n\n### Enabling Dictation Commands\n\nYou must enable dictation commands before you can use them.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW5\"></a>\n\n**To enable dictation commands to run scripts**\n\n1. Launch System Preferences and open the Dictation & Speech preference pane.\n\n   ![image: ../Art/systempreferences_speechanddictation_pane_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/systempreferences_speechanddictation_pane_2x.png)\n2. Click the On radio button to enable dictation.\n3. Click Use Enhanced Dictation.\n\n   Enhanced dictation lets you perform dictation when your computer is offline, and is required to use dictation commands. Enabling this feature downloads some additional system content to your Mac.\n4. Open the Accessibility preference pane.\n\n   ![image: ../Art/systempreferences_accessibility_pane_dictation_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/systempreferences_accessibility_pane_dictation_2x.png)\n5. In the list of accessibility features, click Dictation.\n6. Click Dictation Commands.\n\n   ![image: ../Art/systempreferences_accessibility_pane_dictation_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/systempreferences_accessibility_pane_dictation_2x.png)\n7. Select the“Enabled advanced commands” checkbox.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW6\"></a>\n\n### Creating a Dictation Command Script\n\nAny script can serve as a dictation command. When the command is called, any code in the script’s `run` handler runs.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW7\"></a>\n\n**To create a dictation command script**\n\n1. Launch Script Editor and write a script that performs a task when run.\n2. Save the script in script format to the `~/Library/Speech/Speakable Items/` folder in your Home directory.\n\n   If you want the script to be available to other users on your Mac, save it to the `/Library/Speech/Speakable Items/` instead.\n3. Launch System Preferences and open the Accessibility preference pane.\n4. In the list of accessibility features, click Dictation.\n5. Click Dictation Commands.\n\n   ![image: ../Art/dictation_advancedCommands_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dictation_advancedCommands_2x.png)\n6. Click + to adde a new dictation command.\n7. Enter a phrase to speak to invoke the script.\n8. Choose the application context for triggering the command, such as Any Application, Mail, or Safari.\n9. Choose Run Workflow &gt; Other from the Perform pop-up menu.\n\n   ![image: ../Art/dictation_customscript_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dictation_customscript_2x.png)\n10. Click Done.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW8\"></a>\n\n### Running a Dictation Command Script\n\nTo run a dictation command—script or otherwise—press Fn key twice. When the dictation listener window (Figure 42-1) appears, say the name of the command you want to perform.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW3\"></a>\n**Figure 42-1**Dictation listener window\n![image: ../Art/dictation_window_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/dictation_window_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-DontLinkElementID_10\"></a>\n\n\nTip\n\nTo make dictation even easier, select the “Enable the dictation keyword phrase” checkbox and enter a phrase in System Preferences &gt; Accessibility &gt; Dictation. Once enabled, you don’t need to press the Fn key twice anymore to trigger a command. Instead, just say the keyword phrase, followed by the name of the command. For example, if your keyword phrase is `Computer`, you might say “Computer, send my weekly status report.”\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW2\"></a>\n\n### Creating a Dictation Command Automator Workflow\n\nAutomator can also be used to create dictation commands.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH87-SW9\"></a>\n\n**To create a dictation command Automator workflow**\n\n1. Launch Automator.\n2. Click Dictation Command in the template selection dialog.\n\n   ![image: ../Art/automator_dictationcommand_template_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_dictationcommand_template_2x.png)\n3. Add actions to the workflow.\n\n   The Run AppleScript, Run JavaScript, and Run Shell Script actions can be used to initiate scripts from your workflow.\n4. At the top of the workflow, enter a dictation command and select the Command Enabled checkbox.\n\n   ![image: ../Art/automator_dictationcommand_workflow_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/automator_dictationcommand_workflow_2x.png)\n5. Save the workflow and name it.\n\n> **Note**\n>\n>\n> Automator dictation commands are automatically saved in the `~/Library/Speech/Speakable Items/` folder in your Home directory.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/UseDictationtoRunScripts.html", "sha256": "a1528466b05ef16c330a4a8dbe511052b4337a7921d2d8540c607aeaa532b813", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "UseHandlersFunctions.md", "title": "Using Handlers/Functions", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH52\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH74\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH74-SW1\"></a>\n\n## Using Handlers/Functions\n\nCollections of script statements that can be invoked by name are referred to as *handlers* in AppleScript, *functions* or *methods* in JavaScript, and *subroutines* in some other languages. Throughout this document, these terms are used interchangeably.\n\nHandlers are generally written to perform a task multiple times throughout a script, such as displaying an alert, writing text to a file, or creating an email message. Instead of inserting the same code over and over, you write it once and give it a name. You can name a handler whatever you like as long as the name contains no special characters, such as punctuation, or spaces, and isn’t a reserved language term. You then `call`, or evoke, a handler whenever necessary by referring to it by name. Each time you do, any code in the handler runs. Handlers can optionally be written to receive information as input for processing (*parameters*), and can return information as output (*result* or *return value*).\n\nHandlers provide a way to organize your code by breaking it up into smaller, manageable, modular chunks. This can be useful when troubleshooting; you can narrow in on a single handler to resolve a problem, rather than sorting through a long, complex script. It also makes future script updates easier, as you can change behavior in one place to affect an entire script.\n\n> **Note**\n>\n>\n> AppleScript handlers are generally placed at the end of a script, while in JavaScript, they’re usually placed at the top.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW4\"></a>\n\n### AppleScript Handlers\n\nIn AppleScript, a handler begins with the word `on` or `to`, followed by the handler name and its parameters, if any. It ends with the word `end`, followed by the handler name. AppleScript handlers can be written with positional, labeled, or interleaved parameters.\n\nListing 13-1 shows a simple one-line script that displays a hypothetical error message, which you might want to display numerous times as a script runs.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20dialog%20%22The%20script%20encountered%20a%20problem.%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW7\"></a>\n**Listing 13-1**AppleScript: A simple script that displays an error message\n\n1. `display dialog \"The script encountered a problem.\"`\n\nIn Listing 13-1, the code from Listing 13-1 has been converted to a handler named `displayError`, which has no parameters.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20displayError%28%29%0A%20%20%20%20display%20dialog%20%22The%20script%20encountered%20a%20problem.%22%0Aend%20displayError)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW5\"></a>\n**Listing 13-2**AppleScript: A simple handler that displays an error message\n\n1. `on displayError()`\n2. ` display dialog \"The script encountered a problem.\"`\n3. `end displayError`\n\nListing 13-3 shows a variation of the handler in Listing 13-1, which uses the `to` prefix instead of `on`. Either syntax is acceptable.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=to%20displayError%28%29%0A%20%20%20%20display%20dialog%20%22The%20script%20encountered%20a%20problem.%22%0Aend%20displayError)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW9\"></a>\n**Listing 13-3**AppleScript: A variation of a simple handler that displays an error message\n\n1. `to displayError()`\n2. ` display dialog \"The script encountered a problem.\"`\n3. `end displayError`\n\nYou can now call the `displayError` handler any time you want to display an error, as shown in Listing 13-4.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%0A%20%20%20%20--%20Do%20something%0Aon%20error%0A%20%20%20%20--%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20displayError%28%29%0Aend%20try%0A%0Atry%0A%20%20%20%20--%20Do%20something%20else%0Aon%20error%0A%20%20%20%20--%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20displayError%28%29%0Aend%20try)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW8\"></a>\n**Listing 13-4**AppleScript: Calling a simple handler to display an error message\n\n1. `try`\n2. ` -- Do something`\n3. `on error`\n4. ` -- Notify the user that there's a problem`\n5. ` displayError()`\n6. `end try`\n8. `try`\n9. ` -- Do something else`\n10. `on error`\n11. ` -- Notify the user that there's a problem`\n12. ` displayError()`\n13. `end try`\n\nFor detailed information about AppleScript handlers, see [About Handlers](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206) and [Handler Reference](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_handlers.html#//apple_ref/doc/uid/TP40000983-CH7g) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n> **Note**\n>\n>\n> To call a handler from within a `tell` statement, you must use the reserved words `of me` or `my`, as shown in Listing 13-5.\n>\n> **APPLESCRIPT**\n>\n> [Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22Finder%22%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20--%20Do%20something%0A%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20--%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20%20%20%20%20displayError%28%29%20of%20me%0A%20%20%20%20end%20try%0Aend%20tell%0A%0A%0Atell%20application%20%22Finder%22%0A%20%20%20%20try%0A%20%20%20%20%20%20%20%20--%20Do%20something%20else%0A%20%20%20%20on%20error%0A%20%20%20%20%20%20%20%20--%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20%20%20%20%20my%20displayError%28%29%0A%20%20%20%20end%20try%0Aend%20tell)\n>\n> <a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW10\"></a>\n> **Listing 13-5**AppleScript: Calling a handler from within a tell statement\n>\n> 1. `tell application \"Finder\"`\n> 2. ` try`\n> 3. ` -- Do something`\n> 4. ` on error`\n> 5. ` -- Notify the user that there's a problem`\n> 6. ` displayError() of me`\n> 7. ` end try`\n> 8. `end tell`\n>\n> 11. `tell application \"Finder\"`\n> 12. ` try`\n> 13. ` -- Do something else`\n> 14. ` on error`\n> 15. ` -- Notify the user that there's a problem`\n> 16. ` my displayError()`\n> 17. ` end try`\n> 18. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW6\"></a>\n\n### AppleScript Handlers with Positional Parameters\n\nPositional parameters are a series of comma-separated variables, contained within parentheses, following the handler name. In Listing 13-6, the `displayError` handler from Listing 13-1 has been updated to accept two positional parameters—an error message and a list of buttons to display.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20displayError%28theErrorMessage%2C%20theButtons%29%0A%20%20%20%20display%20dialog%20theErrorMessage%20buttons%20theButtons%0Aend%20displayError)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW11\"></a>\n**Listing 13-6**AppleScript: A handler that displays a specified error message with custom buttons\n\n1. `on displayError(theErrorMessage, theButtons)`\n2. ` display dialog theErrorMessage buttons theButtons`\n3. `end displayError`\n\nTo call the handler, refer to it by name and provide a value for each positional parameter, as shown in Listing 13-7. The order of these values should match the parameter positions in the handler definition.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=displayError%28%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%2C%20%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW12\"></a>\n**Listing 13-7**AppleScript: Calling a handler to display a specified error message with custom buttons\n\n1. `displayError(\"There's not enough available space. Would you like to continue?\", {\"Don't Continue\", \"Continue\"})`\n\nFor additional information about this style of handler, see [Handlers with Positional Parameters](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW13) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW14\"></a>\n\n### AppleScript Handlers with Interleaved Parameters\n\nInterleaved parameters are a variation of positional parameters, in which the parameter name is split into pieces and interleaved with parameters using colons and spaces. Listing 13-8 shows how the handler from Listing 13-6 can be represented using interleaved parameters.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20me%20to%20displayError%3A%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%20withButtons%3A%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%0A%0Aon%20displayError%3AtheErrorMessage%20withButtons%3AtheButtons%0A%20%20%20%20display%20dialog%20theErrorMessage%20buttons%20theButtons%0Aend%20displayError%3AwithButtons%3A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW23\"></a>\n**Listing 13-8**AppleScript: Example of a handler with interleaved parameters\n\n1. `tell me to displayError:\"There's not enough available space. Would you like to continue?\" withButtons:{\"Don't Continue\", \"Continue\"}`\n3. `on displayError:theErrorMessage withButtons:theButtons`\n4. ` display dialog theErrorMessage buttons theButtons`\n5. `end displayError:withButtons:`\n\nInterleaved parameters resemble Objective-C syntax. Therefore, they are typically used to call Objective-C methods in AppleScriptObjC scripts.\n\n[Objective-C to AppleScript Quick Translation Guide](https://developer.apple.com/library/archive/mac-automation-scripting-guide/AppendixA-AppleScriptObjCQuickTranslationGuide.md#//apple_ref/doc/uid/TP40016239-CH79-SW1) discusses interleaved parameter use in AppleScriptObjC scripts. For additional information about this style of handler, see [Handlers with Interleaved Parameters](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW2) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW37\"></a>\n\n### AppleScript Handlers with Labeled Parameters\n\nAppleScript also supports labeled parameters, although this style is rarely used when defining custom handlers. Most often, it’s a style used for event handlers. See [Event Handlers](#//apple_ref/doc/uid/TP40016239-CH52-SW17). Listing 13-9 shows how the `displayError` handler might appear if it were written using the labeled parameter style.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20of%20%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%20over%20%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%0A%0Ato%20display%20of%20theErrorMessage%20over%20theButtons%0A%20%20%20%20display%20dialog%20theErrorMessage%20buttons%20theButtons%0Aend%20display)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW13\"></a>\n**Listing 13-9**AppleScript: Example of a handler with labeled parameters\n\n1. `display of \"There's not enough available space. Would you like to continue?\" over {\"Don't Continue\", \"Continue\"}`\n3. `to display of theErrorMessage over theButtons`\n4. ` display dialog theErrorMessage buttons theButtons`\n5. `end display`\n\nFor additional information about this style of handler, see [Handlers with Labeled Parameters](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW22) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW15\"></a>\n\n### JavaScript Functions\n\nIn JavaScript, a function name is preceded by the word `function` and followed by a list of parameters, if any. The function’s contents are contained within curly braces (`{ ... }`).\n\nListing 13-10 shows a simple script that displays a hypothetical error message.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20displayError%28%29%20%7B%0A%20%20%20%20app.displayDialog%28%22The%20script%20encountered%20a%20problem.%22%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW19\"></a>\n**Listing 13-10**JavaScript: A simple function that displays an error message\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function displayError() {`\n5. ` app.displayDialog(\"The script encountered a problem.\")`\n6. `}`\n\nYou can now call the `displayError` function any time you want to display an error, as shown in Listing 13-11.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%20%7B%0A%20%20%20%20%2F%2F%20Do%20something%0A%7D%20catch%20%28error%29%20%7B%0A%20%20%20%20%2F%2F%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20displayError%28%29%0A%7D%0A%0Atry%20%7B%0A%20%20%20%20%2F%2F%20Do%20something%20else%0A%7D%20catch%20%28error%29%20%7B%0A%20%20%20%20%2F%2F%20Notify%20the%20user%20that%20there%27s%20a%20problem%0A%20%20%20%20displayError%28%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW20\"></a>\n**Listing 13-11**JavaScript: Calling a simple function to display an error message\n\n1. `try {`\n2. ` // Do something`\n3. `} catch (error) {`\n4. ` // Notify the user that there's a problem`\n5. ` displayError()`\n6. `}`\n8. `try {`\n9. ` // Do something else`\n10. `} catch (error) {`\n11. ` // Notify the user that there's a problem`\n12. ` displayError()`\n13. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW38\"></a>\n\n### Using Parameters\n\nJavaScript functions are written with positional parameters, comma-separated variables, contained within parentheses, following the function name. In Listing 13-12, the `displayError` function from Listing 13-10 has been updated to accept two positional parameters—an error message and a list of buttons to display.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20displayError%28errorMessage%2C%20buttons%29%20%7B%0A%20%20%20%20app.displayDialog%28errorMessage%2C%20%7B%0A%20%20%20%20%20%20%20%20buttons%3A%20buttons%0A%20%20%20%20%7D%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW21\"></a>\n**Listing 13-12**JavaScript: A function that displays a specified error message with custom buttons\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function displayError(errorMessage, buttons) {`\n5. ` app.displayDialog(errorMessage, {`\n6. ` buttons: buttons`\n7. ` })`\n8. `}`\n\nTo call the function, refer to it by name and provide a value for each positional parameter, as shown in Listing 13-13. The order of these values should match the parameter positions in the function definition.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=displayError%28%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%2C%20%5B%22Don%27t%20Continue%22%2C%20%22Continue%22%5D%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW22\"></a>\n**Listing 13-13**JavaScript: Calling a function to display a specified error message with custom buttons\n\n1. `displayError(\"There's not enough available space. Would you like to continue?\", [\"Don't Continue\", \"Continue\"])`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW16\"></a>\n\n### Exiting Handlers and Returning a Result\n\nOften, handlers are used to process information and produce a result for further processing. To enable this functionality, add the `return` command, followed by a value to provide, to the handler. In Listing 13-14 and Listing 13-15, the `displayError` handler returns a Boolean value, indicating whether processing should continue after an error has occurred.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20shouldContinueProcessing%20to%20displayError%28%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%29%0Aif%20shouldContinueProcessing%20%3D%20true%20then%0A%20%20%20%20--%20Continue%20processing%20%20%20%20%0Aelse%0A%20%20%20%20--%20Stop%20processing%0Aend%20if%0A%0Aon%20displayError%28theErrorMessage%29%0A%20%20%20%20set%20theResponse%20to%20display%20dialog%20theErrorMessage%20buttons%20%7B%22Don%27t%20Continue%22%2C%20%22Continue%22%7D%20default%20button%20%22Continue%22%0A%20%20%20%20set%20theButtonChoice%20to%20button%20returned%20of%20theResponse%0A%20%20%20%20if%20theButtonChoice%20%3D%20%22Continue%22%20then%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20if%0Aend%20displayError)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW2\"></a>\n**Listing 13-14**AppleScript: Returning a value from a handler\n\n1. `set shouldContinueProcessing to displayError(\"There's not enough available space. Would you like to continue?\")`\n2. `if shouldContinueProcessing = true then`\n3. ` -- Continue processing`\n4. `else`\n5. ` -- Stop processing`\n6. `end if`\n8. `on displayError(theErrorMessage)`\n9. ` set theResponse to display dialog theErrorMessage buttons {\"Don't Continue\", \"Continue\"} default button \"Continue\"`\n10. ` set theButtonChoice to button returned of theResponse`\n11. ` if theButtonChoice = \"Continue\" then`\n12. ` return true`\n13. ` else`\n14. ` return false`\n15. ` end if`\n16. `end displayError`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20displayError%28errorMessage%29%20%7B%0A%20%20%20%20var%20response%20%3D%20app.displayDialog%28errorMessage%2C%20%7B%0A%20%20%20%20%20%20%20%20buttons%3A%20%5B%22Don%27t%20Continue%22%2C%20%22Continue%22%5D%2C%0A%20%20%20%20%20%20%20%20defaultButton%3A%20%22Continue%22%0A%20%20%20%20%7D%29%0A%20%20%20%20var%20buttonChoice%20%3D%20response.buttonReturned%0A%20%20%20%20if%20%28buttonChoice%20%3D%3D%20%22Continue%22%29%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20return%20false%0A%7D%0A%0Avar%20shouldContinueProcessing%20%3D%20displayError%28%22There%27s%20not%20enough%20available%20space.%20Would%20you%20like%20to%20continue%3F%22%29%0Aif%20%28shouldContinueProcessing%29%20%7B%0A%20%20%20%20%2F%2F%20Continue%20processing%0A%7D%20else%20%7B%0A%20%20%20%20%2F%2F%20Stop%20processing%0A%7D%0A)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW18\"></a>\n**Listing 13-15**JavaScript: Returning a value from a function\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function displayError(errorMessage) {`\n5. ` var response = app.displayDialog(errorMessage, {`\n6. ` buttons: [\"Don't Continue\", \"Continue\"],`\n7. ` defaultButton: \"Continue\"`\n8. ` })`\n9. ` var buttonChoice = response.buttonReturned`\n10. ` if (buttonChoice == \"Continue\")`\n11. ` return true`\n12. ` else`\n13. ` return false`\n14. `}`\n16. `var shouldContinueProcessing = displayError(\"There's not enough available space. Would you like to continue?\")`\n17. `if (shouldContinueProcessing) {`\n18. ` // Continue processing`\n19. `} else {`\n20. ` // Stop processing`\n21. `}`\n\n> **Note**\n>\n>\n> You can return a value at any time within a handler, not just at the end.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW17\"></a>\n\n### Event Handlers\n\nSome apps, including scripts themselves, can call handlers when certain events occur, such as when launched or quit. In Mail, you can set up a rule to look for incoming emails matching certain criteria. When a matching email is detected, Mail can call a handler in a specified script to process the email. Handlers like these are considered *event handlers* or *command handlers*.\n\nListing 13-16 shows an example of a Mail rule event handler. It receives any detected messages as input, and can loop through them to process them.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=using%20terms%20from%20application%20%22Mail%22%0A%20%20%20%20on%20perform%20mail%20action%20with%20messages%20theDetectedMessages%20for%20rule%20theRule%0A%20%20%20%20%20%20%20%20tell%20application%20%22Mail%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theMessageCount%20to%20count%20of%20theDetectedMessages%0A%20%20%20%20%20%20%20%20%20%20%20%20repeat%20with%20a%20from%201%20to%20theMessageCount%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCurrentMessage%20to%20item%20a%20of%20theDetectedMessages%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%20Process%20the%20message%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20end%20perform%20mail%20action%20with%20messages%0Aend%20using%20terms%20from)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW24\"></a>\n**Listing 13-16**AppleScript: Example of a Mail rule event handler\n\n1. `using terms from application \"Mail\"`\n2. ` on perform mail action with messages theDetectedMessages for rule theRule`\n3. ` tell application \"Mail\"`\n4. ` set theMessageCount to count of theDetectedMessages`\n5. ` repeat with a from 1 to theMessageCount`\n6. ` set theCurrentMessage to item a of theDetectedMessages`\n7. ` -- Process the message`\n8. ` end repeat`\n9. ` end tell`\n10. ` end perform mail action with messages`\n11. `end using terms from`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW40\"></a>\n\n### Script Event Handlers\n\nAs previously mentioned, scripts can contain event handlers too. These handlers run when certain events occur.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW41\"></a>\n\n### Run Handlers\n\nThe `run` event handler is called when a script runs. By default, any executable code at the top level of a script—that is, not contained within a handler or `script` object—is considered to be contained within an implicit `run` handler. See Listing 13-17 and Listing 13-18.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=display%20dialog%20%22The%20script%20is%20running.%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW25\"></a>\n**Listing 13-17**AppleScript: Example of an implicitly defined `run` handler\n\n1. `display dialog \"The script is running.\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0Aapp.displayDialog%28%22The%20script%20is%20running.%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW26\"></a>\n**Listing 13-18**JavaScript: Example of an implicitly defined `run` function\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n3. `app.displayDialog(\"The script is running.\")`\n\nOptionally, the `run` handler can be explicitly defined. Listing 13-19 and Listing 13-20 produce the exact same behavior as Listing 13-17 and Listing 13-18.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20run%0A%20%20%20%20display%20dialog%20%22The%20script%20is%20running.%22%0Aend%20run)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW27\"></a>\n**Listing 13-19**AppleScript: Example of an explicitly defined `run` handler\n\n1. `on run`\n2. ` display dialog \"The script is running.\"`\n3. `end run`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20run%28%29%20%7B%0A%20%20%20%20var%20app%20%3D%20Application.currentApplication%28%29%0A%20%20%20%20app.includeStandardAdditions%20%3D%20true%0A%20%20%20%20app.displayDialog%28%22The%20script%20is%20running.%22%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW28\"></a>\n**Listing 13-20**JavaScript: Example of an explicitly defined `run` function\n\n1. `function run() {`\n2. ` var app = Application.currentApplication()`\n3. ` app.includeStandardAdditions = true`\n4. ` app.displayDialog(\"The script is running.\")`\n5. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW42\"></a>\n\n### Quit Handlers\n\nThe `quit` event handler is optional, and is called when a script app quits. Use this as an opportunity to perform cleanup tasks, if necessary, such as removing temporary folders or logging progress. Listing 13-21 and Listing 13-22 demonstrate the use of a `quit` handler.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20quit%0A%20%20%20%20display%20dialog%20%22The%20script%20is%20quitting.%22%0Aend%20quit)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW29\"></a>\n**Listing 13-21**AppleScript: Example of a `quit` handler\n\n1. `on quit`\n2. ` display dialog \"The script is quitting.\"`\n3. `end quit`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20quit%28%29%20%7B%0A%20%20%20%20app.displayDialog%28%22The%20script%20is%20quitting.%22%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW30\"></a>\n**Listing 13-22**JavaScript: Example of a `quit` function\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function quit() {`\n5. ` app.displayDialog(\"The script is quitting.\")`\n6. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW43\"></a>\n\n### Open Handlers\n\nThe inclusion of an `open` handler or `openDocuments` method in a script app automatically makes the app drag-and-droppable. When launched in this way, the `open` handler receives a dropped list of files or folders as a direct parameter, as shown in Listing 13-23 and Listing 13-24.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20open%20theDroppedItems%0A%20%20%20%20--%20Process%20the%20dropped%20items%20here%0Aend%20open)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW33\"></a>\n**Listing 13-23**AppleScript: Structure of an `open` handler\n\n1. `on open theDroppedItems`\n2. ` -- Process the dropped items here`\n3. `end open`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20openDocuments%28droppedItems%29%20%7B%0A%20%20%20%20%2F%2F%20Process%20the%20dropped%20items%20here%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW34\"></a>\n**Listing 13-24**JavaScript: Structure of an `openDocuments` function\n\n1. `function openDocuments(droppedItems) {`\n2. ` // Process the dropped items here`\n3. `}`\n\nFor detailed information about using the `open` handler to create drop scripts, see [Processing Dropped Files and Folders](https://developer.apple.com/library/archive/mac-automation-scripting-guide/ProcessDroppedFilesandFolders.md#//apple_ref/doc/uid/TP40016239-CH53-SW1).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW44\"></a>\n\n### Idle Handlers\n\nWhen saving a script, you can optionally save it as a stay-open application. See Figure 13-1. In a stay-open script app, the script stays open after the `run` handler completes, and an `idle` handler is called every 30 seconds. Use the `idle` handler to perform periodic processing tasks, such as checking a watched folder for new files to process. To change the duration between `idle` calls, return a new duration, in seconds, as the result of the `idle` handler. Listing 13-25 and Listing 13-26 demonstrate an `idle` handler that delays for five seconds between executions.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW35\"></a>\n**Figure 13-1**Saving a stay-open script\n![image: ../Art/scripteditor_savestayopenapp_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_savestayopenapp_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20idle%0A%20%20%20%20display%20dialog%20%22The%20script%20is%20idling.%22%0A%20%20%20%20return%205%0Aend%20idle)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW31\"></a>\n**Listing 13-25**AppleScript: Example of an `idle` handler\n\n1. `on idle`\n2. ` display dialog \"The script is idling.\"`\n3. ` return 5`\n4. `end idle`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20idle%28%29%20%7B%0A%20%20%20%20app.displayDialog%28%22The%20script%20is%20idling.%22%29%0A%20%20%20%20return%205%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH52-SW32\"></a>\n**Listing 13-26**JavaScript: Example of an `idle` function\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function idle() {`\n5. ` app.displayDialog(\"The script is idling.\")`\n6. ` return 5`\n7. `}`\n\nFor information about using the `idle` handler for folder watching, see [Watching Folders](https://developer.apple.com/library/archive/mac-automation-scripting-guide/WatchFolders.md#//apple_ref/doc/uid/TP40016239-CH39-SW1).\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/UseHandlersFunctions.html", "sha256": "85a9ec93a23177202e3822ef1b3e44987301ec9bad709b98fb2c7797adf33db6", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "UseScriptLibraries.md", "title": "Using Script Libraries", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH36\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW1\"></a>\n\n## Using Script Libraries\n\nA script library is a collection of handlers, which can be loaded and used by other scripts. For example, a scripter might compile a set of commonly-used text-processing handlers into a text library. This library could then be shared by multiple scripts that need to perform text processing operations.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW2\"></a>\n\n### Writing Script Libraries\n\nTo write a script library, create a Script Editor document that contains one or more handlers, such as the one shown in Listing 14-1 and Listing 14-2, and save it in *script* format, as shown in Figure 14-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW8\"></a>\n**Figure 14-1**Saving a script library\n![image: ../Art/scripteditor_savescriptlibrary_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_savescriptlibrary_2x.png)\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20changeCaseOfText%28theText%2C%20theCaseToSwitchTo%29%0A%20%20%20%20if%20theCaseToSwitchTo%20contains%20%22lower%22%20then%0A%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0A%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0A%20%20%20%20else%20if%20theCaseToSwitchTo%20contains%20%22upper%22%20then%0A%20%20%20%20%20%20%20%20set%20theComparisonCharacters%20to%20%22abcdefghijklmnopqrstuvwxyz%22%0A%20%20%20%20%20%20%20%20set%20theSourceCharacters%20to%20%22ABCDEFGHIJKLMNOPQRSTUVWXYZ%22%0A%20%20%20%20else%0A%20%20%20%20%20%20%20%20return%20theText%0A%20%20%20%20end%20if%0A%20%20%20%20set%20theAlteredText%20to%20%22%22%0A%20%20%20%20repeat%20with%20aCharacter%20in%20theText%0A%20%20%20%20%20%20%20%20set%20theOffset%20to%20offset%20of%20aCharacter%20in%20theComparisonCharacters%0A%20%20%20%20%20%20%20%20if%20theOffset%20is%20not%200%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20character%20theOffset%20of%20theSourceCharacters%29%20as%20string%0A%20%20%20%20%20%20%20%20else%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theAlteredText%20to%20%28theAlteredText%20%26%20aCharacter%29%20as%20string%0A%20%20%20%20%20%20%20%20end%20if%0A%20%20%20%20end%20repeat%0A%20%20%20%20return%20theAlteredText%0Aend%20changeCaseOfText)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW4\"></a>\n**Listing 14-1**AppleScript: Handler that converts text to uppercase or lowercase\n\n1. `on changeCaseOfText(theText, theCaseToSwitchTo)`\n2. ` if theCaseToSwitchTo contains \"lower\" then`\n3. ` set theComparisonCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n4. ` set theSourceCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n5. ` else if theCaseToSwitchTo contains \"upper\" then`\n6. ` set theComparisonCharacters to \"abcdefghijklmnopqrstuvwxyz\"`\n7. ` set theSourceCharacters to \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`\n8. ` else`\n9. ` return theText`\n10. ` end if`\n11. ` set theAlteredText to \"\"`\n12. ` repeat with aCharacter in theText`\n13. ` set theOffset to offset of aCharacter in theComparisonCharacters`\n14. ` if theOffset is not 0 then`\n15. ` set theAlteredText to (theAlteredText & character theOffset of theSourceCharacters) as string`\n16. ` else`\n17. ` set theAlteredText to (theAlteredText & aCharacter) as string`\n18. ` end if`\n19. ` end repeat`\n20. ` return theAlteredText`\n21. `end changeCaseOfText`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=function%20changeCaseOfText%28text%2C%20caseToSwitchTo%29%20%7B%0A%20%20%20%20var%20alteredText%20%3D%20text%0A%20%20%20%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22lower%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.toLowerCase%28%29%0A%20%20%20%20%7D%0A%20%20%20%20else%20if%20%28caseToSwitchTo%20%3D%3D%3D%20%22upper%22%29%20%7B%0A%20%20%20%20%20%20%20%20alteredText%20%3D%20alteredText.toUpperCase%28%29%0A%20%20%20%20%7D%0A%20%20%20%20return%20alteredText%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW5\"></a>\n**Listing 14-2**JavaScript: Function that converts text to uppercase or lowercase\n\n1. `function changeCaseOfText(text, caseToSwitchTo) {`\n2. ` var alteredText = text`\n3. ` if (caseToSwitchTo === \"lower\") {`\n4. ` alteredText = alteredText.toLowerCase()`\n5. ` }`\n6. ` else if (caseToSwitchTo === \"upper\") {`\n7. ` alteredText = alteredText.toUpperCase()`\n8. ` }`\n9. ` return alteredText`\n10. `}`\n\nMove the saved script to one of the following folders on your Mac, creating the folder if it doesn’t already exist:\n\n* `~/Library/Script Libraries/`\n* `/Library/Script Libraries/`\n* `/Resources/` folder inside a script or app bundle.\n\nFor additional information about writing script libraries, see [Creating a Library](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_script_objects.html#//apple_ref/doc/uid/TP40000983-CH207-SW13) in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)* and [Libraries](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW14) in *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)*.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW3\"></a>\n\n### Using Script Libraries\n\nOnce a script library is installed, your other scripts can target its handlers at any time.\n\nTo target a script library in AppleScript, use a `tell` statement, as shown in Listing 14-3.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20script%20%22My%20Text%20Processor%22%0A%20%20%20%20changeCaseOfText%28%22scripting%20is%20awesome!%22%2C%20%22upper%22%29%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW6\"></a>\n**Listing 14-3**AppleScript: Targeting a handler in a script library\n\n1. `tell script \"My Text Processor\"`\n2. ` changeCaseOfText(\"scripting is awesome!\", \"upper\")`\n3. `end tell`\n4. `--&gt; Result: \"SCRIPTING IS AWESOME!\"`\n\nTo target a script library in JavaScript, use the `Library` command to reference the library. Then, you can target handlers in the referenced library, as shown in Listing 14-4.\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=textProcessor%20%3D%20Library%28%22My%20Text%20Processor%22%29%0AtextProcessor.changeCaseOfText%28%22scripting%20is%20awesome!%22%2C%20%22upper%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH36-SW7\"></a>\n**Listing 14-4**JavaScript: Targeting a function in a script library\n\n1. `textProcessor = Library(\"My Text Processor\")`\n2. `textProcessor.changeCaseOfText(\"scripting is awesome!\", \"upper\")`\n3. `// Result: \"SCRIPTING IS AWESOME!\"`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/UseScriptLibraries.html", "sha256": "fcb98fc55de201b19de0f579feea951a1aaa7ee699289f7ce1e9ee9f969afbf2", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "UsetheSystem-WideScriptMenu.md", "title": "Using the Systemwide Script Menu", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH7\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW1\"></a>\n\n## Using the Systemwide Script Menu\n\nThe OS X script menu provides quick access to your collection of scripts. Simply select a script in the menu at any time to run it instantly. Within the script menu, scripts can be organized into subfolders and by application. See Figure 41-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW4\"></a>\n**Figure 41-1**The OS X script menu\n![image: ../Art/scriptmenu_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scriptmenu_2x.png)\n> **Note**\n>\n>\n> The script menu can run compiled scripts, as well as scripts saved as apps. It can also run UNIX shell scripts and Automator workflows.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW6\"></a>\n\n### Enabling the Script Menu\n\nThe script menu is disabled by default in OS X.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW7\"></a>\n\n**To enable the script menu**\n\n1. Launch Script Editor, located in `/Applications/Utilities/`.\n2. Select Script Editor &gt; Preferences, or press Command-Comma (,), to open the preferences window.\n3. Click General in the toolbar.\n4. Enable the “Show Script menu in menu bar” checkbox.\n5. Choose whether application scripts—scripts that appear only when a corresponding app is in the front—should appear at the top or bottom of the script menu.\n\n   <a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW3\"></a>\n\n   ![image: ../Art/scripteditor_scriptmenu_preferences_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scripteditor_scriptmenu_preferences_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-DontLinkElementID_11\"></a>\n\n\nTip\n\nThe script menu displays scripts in the `~/Library/Scripts/` folder of your user directory. To include scripts at the computer-level (in the `/Library/Scripts/` folder), enable the “Show Computer scripts” checkbox.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW8\"></a>\n\n### Adding User-Level Scripts to the Script Menu\n\nUser-level scripts are scripts that only you can see and use. They aren’t available to other users on your Mac.\n\nTo add user-level scripts to the script menu, save them into the `~/Library/Scripts/` folder of your user directory. For quick access to this folder, select Open Scripts Folder &gt; Open User Scripts Folder from the script menu. When you do this, the folder is automatically created if it doesn’t already exist.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW9\"></a>\n\n### Adding Computer-Level Scripts to the Script Menu\n\nComputer-level scripts are scripts that any user on your Mac can see and use.\n\nTo add computer-level scripts to the script menu, save them into the `/Library/Scripts/` folder on your Mac. For quick access to this folder, select Open Scripts Folder &gt; Open Computer Scripts Folder from the script menu. When you do this, the folder is automatically created if it doesn’t already exist.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW10\"></a>\n\n### Adding Application-Specific Scripts to the Script Menu\n\nApplication-specific scripts are only visible in the script menu when a specific app is in the front.\n\nTo add application-specific scripts to the script menu, save them into the `~/Library/Scripts/Applications/«ApplicationName»` folder in your user directory or the `/Library/Scripts/Applications/«ApplicationName»` folder on your Mac. For quick access to this folder, bring the app to the front, then select Open Scripts Folder &gt; Open «ApplicationName» Scripts Folder from the script menu. When you do this, a folder for the application is automatically created if it doesn’t already exist.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW11\"></a>\n\n### Running Scripts in the Script Menu\n\nSelect a script from the script menu to run it. If the script is an application, it launches and runs normally. If the script is a compiled script, a progress indicator appears in the menu bar. See Figure 41-2.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH7-SW2\"></a>\n**Figure 41-2**Script menu progress\n![image: ../Art/scriptmenu_progress_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/scriptmenu_progress_2x.png)\n> **Note**\n>\n>\n> To reveal a script in the script menu, select it in the menu while pressing the Shift key.\n>\n> To open a script menu script in Script Editor, select it in the menu while pressing the Option key.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/UsetheSystem-WideScriptMenu.html", "sha256": "1aa62879d04f8541c0580f9a60a74b35e719b1d356cd145d08c83180c6482894", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "WatchFolders.md", "title": "Watching Folders", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH39\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW1\"></a>\n\n## Watching Folders\n\nThe ability to watch folders and take action on incoming items is a powerful automation technique that enables the creation of fully unattended workflows. A watched folder might be used, for example, to watermark incoming photos, convert them to PDF, and email them to clients for review. Many companies set up script servers—dedicated robot machines that watch folders and process detected items, allowing employees to offload tedious and repetitious work in order to focus on other important tasks.\n\nIn OS X, there are two primary ways to set up scripting-based watched folders: folder actions and stay open script apps.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW5\"></a>\n\n### Using Folder Actions to Watch Folders\n\nFolder actions is a feature in OS X that lets you connect scripts to folders on your Mac. A folder action script includes one or more event handlers that run in response to certain events, such as opening, closing, or adding items to the connected folder. With folder actions, you can create automated workflows that:\n\n* Notify you when new files and folders arrive in a folder\n* Notify you when existing files and folders are removed from a folder\n* Perform processing of newly detected files and folders\n* Initiate any automated task when a new file or folder is detected\n* Adjust or reset the view properties of a folder’s window when it’s opened, closed, or resized\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW3\"></a>\n\n### Write a Folder Action Script\n\nThe event handlers supported by folder actions are defined in the Standard Additions scripting addition that comes with OS X. They are:\n\n| Folder event | Event handler | Parameters |\n| --- | --- | --- |\n| Items—files or folders—are added to the folder | `adding folder items to` | Direct parameter—The connected folder. `after receiving`—A list of items added to the folder. |\n| Items are removed from the folder | `removing folder items from` | Direct parameter—The connected folder. `after losing`—A list of items removed from the folder. For items that were deleted, names of the removed items are provided. |\n| The folder is opened in a new Finder window | `opening folder` | Direct parameter—The connected folder. |\n| The window of a folder is closed | `closing folder window for` | Direct parameter—The connected folder. |\n| The window of a folder is moved | `moving folder window for` | Direct parameter—The connected folder. `from`—The coordinates of the folder’s window before it was moved. |\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW7\"></a>\n\n**To create a folder action script**\n\n1. Create a Script Editor document.\n2. Add one or more folder action event handlers to the document.\n3. Save the document as a compiled script to one of the following folders:\n\n   * `/Library/Scripts/Folder Action Scripts/`—The script can be used by any user.\n   * `~/Library/Scripts/Folder Action Scripts/`—The script can be used by the current user only.\n\nThe following examples demonstrate how to use different folder action event handlers.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20opening%20folder%20theAttachedFolder%0A%20%20%20%20--%20Get%20the%20name%20of%20the%20attached%20folder%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%20of%20theAttachedFolder%0A%0A%20%20%20%20%20%20%20%20--%20Display%20an%20alert%20indicating%20that%20the%20folder%20was%20opened%0A%20%20%20%20%20%20%20%20activate%0A%20%20%20%20%20%20%20%20display%20alert%20%22Attention!%22%20message%20%22The%20folder%20%22%20%26%20%28quoted%20form%20of%20theName%29%20%26%20%22%20was%20opened.%22%0A%20%20%20%20end%20tell%0Aend%20opening%20folder)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW8\"></a>\n**Listing 18-1**AppleScript: Example of the `opening folder` event handler\n\n1. `on opening folder theAttachedFolder`\n2. ` -- Get the name of the attached folder`\n3. ` tell application \"Finder\"`\n4. ` set theName to name of theAttachedFolder`\n6. ` -- Display an alert indicating that the folder was opened`\n7. ` activate`\n8. ` display alert \"Attention!\" message \"The folder \" & (quoted form of theName) & \" was opened.\"`\n9. ` end tell`\n10. `end opening folder`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20closing%20folder%20window%20for%20theAttachedFolder%0A%20%20%20%20--%20Get%20the%20name%20of%20the%20attached%20folder%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%20of%20theAttachedFolder%0A%0A%20%20%20%20%20%20%20%20--%20Display%20an%20alert%20indicating%20that%20the%20folder%20was%20closed%0A%20%20%20%20%20%20%20%20activate%0A%20%20%20%20%20%20%20%20display%20alert%20%22Attention!%22%20message%20%22The%20folder%20%22%20%26%20%28quoted%20form%20of%20theName%29%20%26%20%22%20was%20closed.%22%0A%20%20%20%20end%20tell%0Aend%20closing%20folder%20window%20for)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW9\"></a>\n**Listing 18-2**AppleScript: Example of the `closing folder window for` event handler\n\n1. `on closing folder window for theAttachedFolder`\n2. ` -- Get the name of the attached folder`\n3. ` tell application \"Finder\"`\n4. ` set theName to name of theAttachedFolder`\n6. ` -- Display an alert indicating that the folder was closed`\n7. ` activate`\n8. ` display alert \"Attention!\" message \"The folder \" & (quoted form of theName) & \" was closed.\"`\n9. ` end tell`\n10. `end closing folder window for`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20adding%20folder%20items%20to%20theAttachedFolder%20after%20receiving%20theNewItems%0A%20%20%20%20--%20Get%20the%20name%20of%20the%20attached%20folder%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%20of%20theAttachedFolder%0A%0A%20%20%20%20%20%20%20%20--%20Count%20the%20new%20items%0A%20%20%20%20%20%20%20%20set%20theCount%20to%20length%20of%20theNewItems%0A%0A%20%20%20%20%20%20%20%20--%20Display%20an%20alert%20indicating%20that%20the%20new%20items%20were%20received%0A%20%20%20%20%20%20%20%20activate%0A%20%20%20%20%20%20%20%20display%20alert%20%22Attention!%22%20message%20%28theCount%20%26%20%22%20new%20items%20were%20detected%20in%20folder%20%22%20%26%20%28quoted%20form%20of%20theName%29%20%26%20%22.%22%20as%20string%29%0A%0A%20%20%20%20%20%20%20%20--%20Loop%20through%20the%20newly%20detected%20items%0A%20%20%20%20%20%20%20%20repeat%20with%20anItem%20in%20theNewItems%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Process%20the%20current%20item%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Move%20the%20current%20item%20to%20another%20folder%20so%20it%27s%20not%20processed%20again%20in%20the%20future%0A%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20end%20tell%0Aend%20adding%20folder%20items%20to)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW10\"></a>\n**Listing 18-3**AppleScript: Example of the `adding folder items to` event handler\n\n1. `on adding folder items to theAttachedFolder after receiving theNewItems`\n2. ` -- Get the name of the attached folder`\n3. ` tell application \"Finder\"`\n4. ` set theName to name of theAttachedFolder`\n6. ` -- Count the new items`\n7. ` set theCount to length of theNewItems`\n9. ` -- Display an alert indicating that the new items were received`\n10. ` activate`\n11. ` display alert \"Attention!\" message (theCount & \" new items were detected in folder \" & (quoted form of theName) & \".\" as string)`\n13. ` -- Loop through the newly detected items`\n14. ` repeat with anItem in theNewItems`\n16. ` -- Process the current item`\n18. ` -- Move the current item to another folder so it's not processed again in the future`\n20. ` end repeat`\n21. ` end tell`\n22. `end adding folder items to`\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20removing%20folder%20items%20from%20theAttachedFolder%20after%20losing%20theRemovedItems%0A%20%20%20%20--%20Get%20the%20name%20of%20the%20attached%20folder%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20set%20theName%20to%20name%20of%20theAttachedFolder%0A%0A%20%20%20%20%20%20%20%20--%20Count%20the%20removed%20items%0A%20%20%20%20%20%20%20%20set%20theCount%20to%20length%20of%20theRemovedItems%0A%0A%20%20%20%20%20%20%20%20--%20Display%20an%20alert%20indicating%20that%20items%20were%20removed%0A%20%20%20%20%20%20%20%20activate%0A%20%20%20%20%20%20%20%20display%20alert%20%22Attention!%22%20message%20%28theCount%20%26%20%22%20items%20were%20removed%20from%20folder%20%22%20%26%20%28quoted%20form%20of%20theName%29%20%26%20%22.%22%20as%20string%29%0A%0A%20%20%20%20%20%20%20%20--%20Loop%20through%20the%20removed%20items%2C%20performing%20any%20additional%20tasks%0A%20%20%20%20%20%20%20%20repeat%20with%20anItem%20in%20theRemovedItems%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20--%20Process%20the%20current%20item%0A%0A%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20end%20tell%0Aend%20removing%20folder%20items%20from)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW11\"></a>\n**Listing 18-4**AppleScript: Example of the `removing folder items from` event handler\n\n1. `on removing folder items from theAttachedFolder after losing theRemovedItems`\n2. ` -- Get the name of the attached folder`\n3. ` tell application \"Finder\"`\n4. ` set theName to name of theAttachedFolder`\n6. ` -- Count the removed items`\n7. ` set theCount to length of theRemovedItems`\n9. ` -- Display an alert indicating that items were removed`\n10. ` activate`\n11. ` display alert \"Attention!\" message (theCount & \" items were removed from folder \" & (quoted form of theName) & \".\" as string)`\n13. ` -- Loop through the removed items, performing any additional tasks`\n14. ` repeat with anItem in theRemovedItems`\n16. ` -- Process the current item`\n18. ` end repeat`\n19. ` end tell`\n20. `end removing folder items from`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW4\"></a>\n\n### Attaching a Folder Action Script to a Folder\n\nA folder action script must be connected to a folder in order to use it. This is done with Folder Actions Setup, an app that’s launched from the Finder’s contextual menu.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW12\"></a>\n\n**To attach a folder action script to a folder**\n\n1. Control-click the folder in Finder.\n2. Choose Folder Actions Setup from the contextual menu.\n\n   The Folder Actions Setup app launches, the folder is automatically added to the Folders with Actions list, and you’re prompted to select a script.\n3. Choose a script to connect to the folder and click Attach.\n\n   ![image: ../Art/folderactionssetup_attachfolder_panel_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/folderactionssetup_attachfolder_panel_2x.png)\n4. Make sure the Enable Folder Actions checkbox is selected, as well as the On checkboxes next to the folder.\n\n   ![image: ../Art/folderactionssetup_main_window_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/folderactionssetup_main_window_2x.png)\n\nOnce the script and folder are connected, the folder action event handlers in the script should run when the corresponding actions occur.\n\n> **Note**\n>\n>\n> Folder Actions Setup can also be used to disable or remove folder action scripts and watched folders.\n>\n> The Folder Actions Setup app itself resides in `/System/Library/CoreServices/`.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW6\"></a>\n\n### Watching Folders Using an Idle Loop and a Stay Open Script App\n\nAlthough folder actions provide efficient folder watching capabilities, some scripters prefer to implement customized folder watching workflows that provide more control over the folder watching process. This is typically done by creating a stay-open script with an `idle` handler that checks a folder at regular intervals for new items to process. Listing 18-5 demonstrates an `idle` handler-based script that watches an Input folder on the Desktop.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20idle%0A%20%20%20%20--%20Locate%20the%20folder%20to%20watch%0A%20%20%20%20set%20theFolder%20to%20locateAndCreateFolder%28path%20to%20desktop%20folder%2C%20%22Input%22%29%0A%0A%20%20%20%20--%20Watch%20the%20folder%0A%20%20%20%20watchFolder%28theFolder%29%0A%0A%20%20%20%20--%20Delay%202%20minutes%20before%20checking%20the%20folder%20again%0A%20%20%20%20return%20120%0Aend%20idle%0A%0Aon%20watchFolder%28theFolder%29%0A%0A%20%20%20%20--%20Check%20for%20files%20in%20the%20folder%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20set%20theFilesToProcess%20to%20every%20file%20of%20theFolder%0A%20%20%20%20end%20tell%0A%0A%20%20%20%20--%20Stop%20if%20there%20are%20no%20files%20to%20process%0A%20%20%20%20if%20theFilesToProcess%20%3D%20%7B%7D%20then%20return%0A%0A%20%20%20%20--%20Locate%20an%20output%20folder%0A%20%20%20%20set%20theOutputFolder%20to%20locateAndCreateFolder%28path%20to%20desktop%20folder%2C%20%22Output%22%29%0A%0A%20%20%20%20repeat%20with%20aFile%20in%20theFilesToProcess%0A%0A%20%20%20%20%20%20%20%20--%20Process%20the%20current%20file%0A%0A%20%20%20%20%20%20%20%20--%20Move%20the%20current%20file%20to%20the%20output%20folder%20so%20it%20doesn%27t%20get%20processed%20again%0A%20%20%20%20%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20%20%20%20%20move%20aFile%20to%20theOutputFolder%0A%20%20%20%20%20%20%20%20end%20tell%0A%0A%20%20%20%20end%20repeat%0Aend%20watchFolder%0A%0A--%20Locate%20a%20folder%2C%20creating%20it%20if%20it%20doesn%27t%20exist%0Aon%20locateAndCreateFolder%28theParentFolder%2C%20theFolderName%29%0A%20%20%20%20tell%20application%20%22Finder%22%0A%20%20%20%20%20%20%20%20if%20%28%28folder%20theFolderName%20of%20theParentFolder%29%20exists%29%20%3D%20false%20then%20make%20new%20folder%20at%20theParentFolder%20with%20properties%20%7Bname%3AtheFolderName%7D%0A%20%20%20%20%20%20%20%20return%20%28folder%20theFolderName%20of%20theParentFolder%29%20as%20alias%0A%20%20%20%20end%20tell%0Aend%20locateAndCreateFolder)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW2\"></a>\n**Listing 18-5**AppleScript: Watch a folder for files using an idle loop\n\n1. `on idle`\n2. ` -- Locate the folder to watch`\n3. ` set theFolder to locateAndCreateFolder(path to desktop folder, \"Input\")`\n5. ` -- Watch the folder`\n6. ` watchFolder(theFolder)`\n8. ` -- Delay 2 minutes before checking the folder again`\n9. ` return 120`\n10. `end idle`\n12. `on watchFolder(theFolder)`\n14. ` -- Check for files in the folder`\n15. ` tell application \"Finder\"`\n16. ` set theFilesToProcess to every file of theFolder`\n17. ` end tell`\n19. ` -- Stop if there are no files to process`\n20. ` if theFilesToProcess = {} then return`\n22. ` -- Locate an output folder`\n23. ` set theOutputFolder to locateAndCreateFolder(path to desktop folder, \"Output\")`\n25. ` repeat with aFile in theFilesToProcess`\n27. ` -- Process the current file`\n29. ` -- Move the current file to the output folder so it doesn't get processed again`\n30. ` tell application \"Finder\"`\n31. ` move aFile to theOutputFolder`\n32. ` end tell`\n34. ` end repeat`\n35. `end watchFolder`\n37. `-- Locate a folder, creating it if it doesn't exist`\n38. `on locateAndCreateFolder(theParentFolder, theFolderName)`\n39. ` tell application \"Finder\"`\n40. ` if ((folder theFolderName of theParentFolder) exists) = false then make new folder at theParentFolder with properties {name:theFolderName}`\n41. ` return (folder theFolderName of theParentFolder) as alias`\n42. ` end tell`\n43. `end locateAndCreateFolder`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH39-SW14\"></a>\n\n### Folder Watching Best Practices\n\nRegardless of what method you use for folder watching, follow these best practices to produce an efficient and reliable workflow:\n\n* Wait for items to finish writing to disk before processing them.\n* Move processed items to an output folder so the same items aren’t detected and processed a second time.\n* Handle errors gracefully, such as by moving problematic items to an error folder so other processing can proceed.\n* Bring dialogs and alerts to the front so they’re visible and can be addressed.\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/WatchFolders.html", "sha256": "366bc58964b4c60040cdf7f7249f6d083bb38bb97a855b3ca67a9f70682999ce", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "WorkwithPropertyListFiles.md", "title": "Working with Property List Files", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH66\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH65\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH65-SW1\"></a>\n\n## Working with Property List Files\n\nMany apps store settings in property list files (also called plists). Scripts can also store and retrieve data in plists. The terminology for interacting with plists is found in the Property List Suite of the System Events scripting dictionary (see Figure 35-1).\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW4\"></a>\n**Figure 35-1**Property list terminology in the System Events scripting dictionary\n![image: ../Art/systemevents_dictionary_propertylistsuite_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/systemevents_dictionary_propertylistsuite_2x.png)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW7\"></a>\n\n### Creating a New Property List File\n\nListing 35-1 demonstrates how to create a new property list file. First, an empty plist file (class `property list file`) is created. Next, individual property list items (class `property list item`) of varying type (Boolean, date, list, number, record, string) are added to the file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20--%20Create%20an%20empty%20property%20list%20dictionary%20item%0A%20%20%20%20set%20theParentDictionary%20to%20make%20new%20property%20list%20item%20with%20properties%20%7Bkind%3Arecord%7D%0A%0A%20%20%20%20--%20Create%20a%20new%20property%20list%20file%20using%20the%20empty%20dictionary%20list%20item%20as%20contents%0A%20%20%20%20set%20thePropertyListFilePath%20to%20%22~%2FDesktop%2FExample.plist%22%0A%0A%20%20%20%20set%20thePropertyListFile%20to%20make%20new%20property%20list%20file%20with%20properties%20%7Bcontents%3AtheParentDictionary%2C%20name%3AthePropertyListFilePath%7D%0A%0A%20%20%20%20--%20Add%20a%20Boolean%20key%0A%20%20%20%20tell%20property%20list%20items%20of%20thePropertyListFile%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Aboolean%2C%20name%3A%22booleanKey%22%2C%20value%3Atrue%7D%0A%0A%20%20%20%20%20%20%20%20--%20Add%20a%20date%20key%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Adate%2C%20name%3A%22dateKey%22%2C%20value%3Acurrent%20date%7D%0A%0A%20%20%20%20%20%20%20%20--%20Add%20a%20list%20key%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Alist%2C%20name%3A%22listKey%22%7D%0A%0A%20%20%20%20%20%20%20%20--%20Add%20a%20number%20key%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Anumber%2C%20name%3A%22numberKey%22%2C%20value%3A5%7D%0A%0A%20%20%20%20%20%20%20%20--%20Add%20a%20record%2Fdictionary%20key%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Arecord%2C%20name%3A%22recordKey%22%7D%0A%0A%20%20%20%20%20%20%20%20--%20Add%20a%20string%20key%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Astring%2C%20name%3A%22stringKey%22%2C%20value%3A%22string%20value%22%7D%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW2\"></a>\n**Listing 35-1**AppleScript: Creating a property list file\n\n1. `tell application \"System Events\"`\n2. ` -- Create an empty property list dictionary item`\n3. ` set theParentDictionary to make new property list item with properties {kind:record}`\n5. ` -- Create a new property list file using the empty dictionary list item as contents`\n6. ` set thePropertyListFilePath to \"~/Desktop/Example.plist\"`\n8. ` set thePropertyListFile to make new property list file with properties {contents:theParentDictionary, name:thePropertyListFilePath}`\n10. ` -- Add a Boolean key`\n11. ` tell property list items of thePropertyListFile`\n12. ` make new property list item at end with properties {kind:boolean, name:\"booleanKey\", value:true}`\n14. ` -- Add a date key`\n15. ` make new property list item at end with properties {kind:date, name:\"dateKey\", value:current date}`\n17. ` -- Add a list key`\n18. ` make new property list item at end with properties {kind:list, name:\"listKey\"}`\n20. ` -- Add a number key`\n21. ` make new property list item at end with properties {kind:number, name:\"numberKey\", value:5}`\n23. ` -- Add a record/dictionary key`\n24. ` make new property list item at end with properties {kind:record, name:\"recordKey\"}`\n26. ` -- Add a string key`\n27. ` make new property list item at end with properties {kind:string, name:\"stringKey\", value:\"string value\"}`\n28. ` end tell`\n29. `end tell`\n\nListing 35-2 shows the contents of a property list file created by the script in Listing 35-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW3\"></a>\n**Listing 35-2**Example XML for a property list file created by a script\n\n1. `&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;`\n2. `&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;`\n3. `&lt;plist version=\"1.0\"&gt;`\n4. `&lt;dict&gt;`\n5. ` &lt;key&gt;booleanKey&lt;/key&gt;`\n6. ` &lt;true/&gt;`\n7. ` &lt;key&gt;dateKey&lt;/key&gt;`\n8. ` &lt;date&gt;2016-01-28T19:34:13Z&lt;/date&gt;`\n9. ` &lt;key&gt;listKey&lt;/key&gt;`\n10. ` &lt;array/&gt;`\n11. ` &lt;key&gt;numberKey&lt;/key&gt;`\n12. ` &lt;integer&gt;5&lt;/integer&gt;`\n13. ` &lt;key&gt;recordKey&lt;/key&gt;`\n14. ` &lt;dict/&gt;`\n15. ` &lt;key&gt;stringKey&lt;/key&gt;`\n16. ` &lt;string&gt;string value&lt;/string&gt;`\n17. `&lt;/dict&gt;`\n18. `&lt;/plist&gt;`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW8\"></a>\n\n### Reading a Property List Key Value\n\nListing 35-3 shows how to read a value of a key in a property list file.\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20property%20list%20file%20thePropertyListFilePath%0A%20%20%20%20%20%20%20%20return%20value%20of%20property%20list%20item%20%22stringKey%22%0A%20%20%20%20end%20tell%0Aend%20tell%0A--%3E%20Result%3A%20%22string%20value%22)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW5\"></a>\n**Listing 35-3**AppleScript: Reading a key value in a property list file\n\n1. `tell application \"System Events\"`\n2. ` tell property list file thePropertyListFilePath`\n3. ` return value of property list item \"stringKey\"`\n4. ` end tell`\n5. `end tell`\n6. `--&gt; Result: \"string value\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW9\"></a>\n\n### Changing a Property List Key Value\n\nListing 35-4 shows how to change the value of a key in a property list file.\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20property%20list%20file%20thePropertyListFilePath%0A%20%20%20%20%20%20%20%20set%20value%20of%20property%20list%20item%20%22stringKey%22%20to%20%22new%20string%20value%22%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW6\"></a>\n**Listing 35-4**AppleScript: Changing the value of a key in a property list file\n\n1. `tell application \"System Events\"`\n2. ` tell property list file thePropertyListFilePath`\n3. ` set value of property list item \"stringKey\" to \"new string value\"`\n4. ` end tell`\n5. `end tell`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW10\"></a>\n\n### Adding a New Property List Item\n\nListing 35-3 shows how to add a new key and value to a property list file.\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20property%20list%20items%20of%20property%20list%20file%20thePropertyListFilePath%0A%20%20%20%20%20%20%20%20make%20new%20property%20list%20item%20at%20end%20with%20properties%20%7Bkind%3Astring%2C%20name%3A%22newStringKey%22%2C%20value%3A%22new%20string%20value%22%7D%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH66-SW11\"></a>\n**Listing 35-5**AppleScript: Adding a new key and value to a property list file\n\n1. `tell application \"System Events\"`\n2. ` tell property list items of property list file thePropertyListFilePath`\n3. ` make new property list item at end with properties {kind:string, name:\"newStringKey\", value:\"new string value\"}`\n4. ` end tell`\n5. `end tell`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/WorkwithPropertyListFiles.html", "sha256": "abda40a5e7f420b034039ff43b9485de0afcb982832dd4c3894fc0d839c99f65", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "WorkwithXML.md", "title": "Working with XML", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH67\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH67-SW1\"></a>\n\n## Working with XML\n\nThe XML Suite of the System Events scripting dictionary defines several classes that make it quick and easy to read and parse XML data. The `XML file` class represents any text file containing structured XML like the example data shown in Listing 36-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH67-SW3\"></a>\n**Listing 36-1**XML: Example XML data\n\n1. `&lt;books&gt;`\n2. `&lt;book country=\"US\"&gt;`\n3. `&lt;name&gt;The Secret Lives of Cats&lt;/name&gt;`\n4. `&lt;publisher&gt;Feline Press&lt;/publisher&gt;`\n5. `&lt;/book&gt;`\n6. `&lt;/books&gt;`\n\nAt the top level, an XML file contains an `XML data` object that’s comprised of nested `XML element` objects. Each `XML element` object has a `name` and a `value` property, and may also contain `XML attribute` objects that define additional metadata. The example code in Listing 36-2 demonstrates how to access these classes to read and parse the contents of an XML file on the Desktop that contains the XML data from Listing 36-1.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=tell%20application%20%22System%20Events%22%0A%20%20%20%20tell%20XML%20file%20%22~%2FDesktop%2FBook%20Data.xml%22%0A%20%20%20%20%20%20%20%20tell%20XML%20element%20%22books%22%0A%20%20%20%20%20%20%20%20%20%20%20%20set%20theBookElements%20to%20every%20XML%20element%20whose%20name%20%3D%20%22book%22%0A%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%7BXML%20element%201%20of%20XML%20element%201%20of%20contents%20of%20XML%20file%20%22Macintosh%20HD%3AUsers%3AYourUserName%3ADesktop%3ABook%20Data.xml%22%20of%20application%20%22System%20Events%22%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20repeat%20with%20a%20from%201%20to%20length%20of%20theBookElements%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theCurrentBookElement%20to%20item%20a%20of%20theBookElements%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20XML%20element%201%20of%20XML%20element%201%20of%20contents%20of%20XML%20file%20%22Macintosh%20HD%3AUsers%3Abwaldie%3ADesktop%3ABook%20Data.xml%22%20of%20application%20%22System%20Events%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tell%20theCurrentBookElement%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%20of%20theCurrentBookElement%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%22book%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%20of%20every%20XML%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%7B%22name%22%2C%20%22publisher%22%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%20of%20every%20XML%20attribute%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%7B%22country%22%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20value%20of%20every%20XML%20attribute%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%7B%22US%22%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20theBookName%20to%20value%20of%20XML%20element%20%22name%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%22The%20Secret%20Lives%20of%20Cats%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20set%20thePublisher%20to%20value%20of%20XML%20element%20%22publisher%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20--%3E%20%22Feline%20Press%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20repeat%0A%20%20%20%20%20%20%20%20end%20tell%0A%20%20%20%20end%20tell%0Aend%20tell)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH67-SW2\"></a>\n**Listing 36-2**AppleScript: Using System Events to parse an XML file\n\n1. `tell application \"System Events\"`\n2. ` tell XML file \"~/Desktop/Book Data.xml\"`\n3. ` tell XML element \"books\"`\n4. ` set theBookElements to every XML element whose name = \"book\"`\n5. ` --&gt; {XML element 1 of XML element 1 of contents of XML file \"Macintosh HD:Users:YourUserName:Desktop:Book Data.xml\" of application \"System Events\"}`\n7. ` repeat with a from 1 to length of theBookElements`\n8. ` set theCurrentBookElement to item a of theBookElements`\n9. ` --&gt; XML element 1 of XML element 1 of contents of XML file \"Macintosh HD:Users:YourUserName:Desktop:Book Data.xml\" of application \"System Events\"`\n11. ` tell theCurrentBookElement`\n12. ` name of theCurrentBookElement`\n13. ` --&gt; \"book\"`\n15. ` name of every XML element`\n16. ` --&gt; {\"name\", \"publisher\"}`\n18. ` name of every XML attribute`\n19. ` --&gt; {\"country\"}`\n21. ` value of every XML attribute`\n22. ` --&gt; {\"US\"}`\n24. ` set theBookName to value of XML element \"name\"`\n25. ` --&gt; \"The Secret Lives of Cats\"`\n27. ` set thePublisher to value of XML element \"publisher\"`\n28. ` --&gt; \"Feline Press\"`\n29. ` end tell`\n30. ` end repeat`\n31. ` end tell`\n32. ` end tell`\n33. `end tell`\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/WorkwithXML.html", "sha256": "9c9104969aac1783d6b6c755e3ea8902749f25e1215eca0d2ee34bd224a3c559", "etag": null, "last_modified": null}
{"collection": "mac-automation-scripting-guide", "path": "index.md", "title": "About Mac Scripting", "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH56\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH56-SW1\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH2\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH2-SW1\"></a>\n\n## About Mac Scripting\n\nScripting allows you to automate complex, repetitive, and time-consuming tasks by writing scripts that interact with apps, processes, and the operating system. A script consists of a series of statements, each of which performs a specific operation. These statements work together to automate tasks. Through scripting, you can create powerful workflow solutions that enhance productivity, reduce errors, save time, and save money.\n\nThere are many different scripting languages. On the Mac, the primary ones used for automation are *AppleScript* and *JavaScript*.\n\n> **Note**\n>\n>\n> OS X also includes Automator, an app for building workflows that run prebuilt, configurable actions to perform tasks in apps and throughout the operating system. Automator doesn’t require you to write any code, but can be extended through scripting. Because Automator uses preconceived actions and operates in a linear manner, it’s more limited in functionality than scripting. Automator is great for performing simple tasks involving a small number of sequential steps or apps. Scripting is a better choice for performing advanced, branching, or complex tasks.\n>\n> Python and Perl are other examples of scripting languages.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH56-SW3\"></a>\n\n### AppleScript\n\nAppleScript is a mature scripting language developed by Apple. It’s relatively easy to learn in relation to other scripting and programming languages, has been around since System 7.1, and has been widely adopted in both enterprise and personal workflows. While the AppleScript scripting language uses an English-like terminology which may appear simple, it is a rich, object-oriented language, capable of performing complicated programming tasks.\n\nThe core fundamentals of AppleScript are described in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*, as well as in numerous third-party books.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH56-SW4\"></a>\n\n### JavaScript\n\nJavaScript is a popular cross-platform scripting language. Historically, it’s been most commonly used to implement features on websites and in web-based apps that are accessed through browsers. However, some apps implement JavaScript-based scripting models for the purpose of automation. In OS X 10.10, JavaScript became a peer to AppleScript in OS X. There are many third-party websites and books that document the JavaScript language.\n\nFor fundamentals on JavaScript as a scripting language for automation in OS X, see *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)*. For information about the JavaScript language, see [Mozilla’s official JavaScript documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript).\n", "binary": false, "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html", "sha256": "907fdd55c69c521ebb267152d9a9bb4f86785c68fb73dba1bbcda2fa67e56166", "etag": null, "last_modified": null}
