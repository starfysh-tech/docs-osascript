{
  "collection": "mac-automation-scripting-guide",
  "path": "ReadandWriteFiles.md",
  "title": "Reading and Writing Files",
  "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH58\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW1\"></a>\n\n## Reading and Writing Files\n\nScripts are often designed to write data to files such as logs or backups. The Standard Additions scripting addition contains a number of commands that make it possible to read and write files.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW3\"></a>\n\n### Writing to a File\n\nThe handlers in Listing 16-1 and Listing 16-2 safely write data to disk, creating a new file if the targeted file doesnâ€™t already exist. Provide the text to write, a target file path, and indicate whether to overwrite existing content. If you choose not to overwrite existing content, then the text provided is appended to any existing content.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20writeTextToFile%28theText%2C%20theFile%2C%20overwriteExistingContent%29%0A%20%20%20%20try%0A%0A%20%20%20%20%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20%20%20%20%20--%20Open%20the%20file%20for%20writing%0A%20%20%20%20%20%20%20%20set%20theOpenedFile%20to%20open%20for%20access%20file%20theFile%20with%20write%20permission%0A%0A%20%20%20%20%20%20%20%20--%20Clear%20the%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20overwriteExistingContent%20is%20true%20then%20set%20eof%20of%20theOpenedFile%20to%200%0A%0A%20%20%20%20%20%20%20%20--%20Write%20the%20new%20content%20to%20the%20file%0A%20%20%20%20%20%20%20%20write%20theText%20to%20theOpenedFile%20starting%20at%20eof%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20file%0A%20%20%20%20%20%20%20%20close%20access%20theOpenedFile%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%0A%20%20%20%20%20%20%20%20--%20Handle%20a%20write%20error%0A%20%20%20%20on%20error%0A%0A%20%20%20%20%20%20%20%20--%20Close%20the%20file%0A%20%20%20%20%20%20%20%20try%0A%20%20%20%20%20%20%20%20%20%20%20%20close%20access%20file%20theFile%0A%20%20%20%20%20%20%20%20end%20try%0A%0A%20%20%20%20%20%20%20%20--%20Return%20a%20boolean%20indicating%20that%20writing%20failed%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20end%20try%0Aend%20writeTextToFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW4\"></a>\n**Listing 16-1**AppleScript: Handler that writes text to a file\n\n1. `on writeTextToFile(theText, theFile, overwriteExistingContent)`\n2. ` try`\n4. ` -- Convert the file to a string`\n5. ` set theFile to theFile as string`\n7. ` -- Open the file for writing`\n8. ` set theOpenedFile to open for access file theFile with write permission`\n10. ` -- Clear the file if content should be overwritten`\n11. ` if overwriteExistingContent is true then set eof of theOpenedFile to 0`\n13. ` -- Write the new content to the file`\n14. ` write theText to theOpenedFile starting at eof`\n16. ` -- Close the file`\n17. ` close access theOpenedFile`\n19. ` -- Return a boolean indicating that writing was successful`\n20. ` return true`\n22. ` -- Handle a write error`\n23. ` on error`\n25. ` -- Close the file`\n26. ` try`\n27. ` close access file theFile`\n28. ` end try`\n30. ` -- Return a boolean indicating that writing failed`\n31. ` return false`\n32. ` end try`\n33. `end writeTextToFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20writeTextToFile%28text%2C%20file%2C%20overwriteExistingContent%29%20%7B%0A%20%20%20%20try%20%7B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Open%20the%20file%20for%20writing%0A%20%20%20%20%20%20%20%20var%20openedFile%20%3D%20app.openForAccess%28Path%28fileString%29%2C%20%7B%20writePermission%3A%20true%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Clear%20the%20file%20if%20content%20should%20be%20overwritten%0A%20%20%20%20%20%20%20%20if%20%28overwriteExistingContent%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20app.setEof%28openedFile%2C%20%7B%20to%3A%200%20%7D%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Write%20the%20new%20content%20to%20the%20file%0A%20%20%20%20%20%20%20%20app.write%28text%2C%20%7B%20to%3A%20openedFile%2C%20startingAt%3A%20app.getEof%28openedFile%29%20%7D%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Close%20the%20file%0A%20%20%20%20%20%20%20%20app.closeAccess%28openedFile%29%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20%7D%0A%20%20%20%20%C5%93%20%28error%29%20%7B%0A%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Close%20the%20file%0A%20%20%20%20%20%20%20%20%20%20%20%20app.closeAccess%28file%29%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20catch%28error%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Report%20the%20error%20is%20closing%20failed%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log%28%60Couldn%27t%20close%20file%3A%20%24%7Berror%7D%60%29%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20a%20boolean%20indicating%20that%20writing%20was%20successful%0A%20%20%20%20%20%20%20%20return%20false%0A%20%20%20%20%7D%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW13\"></a>\n**Listing 16-2**JavaScript: Function that writes text to a file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function writeTextToFile(text, file, overwriteExistingContent) {`\n5. ` try {`\n7. ` // Convert the file to a string`\n8. ` var fileString = file.toString()`\n10. ` // Open the file for writing`\n11. ` var openedFile = app.openForAccess(Path(fileString), { writePermission: true })`\n13. ` // Clear the file if content should be overwritten`\n14. ` if (overwriteExistingContent) {`\n15. ` app.setEof(openedFile, { to: 0 })`\n16. ` }`\n18. ` // Write the new content to the file`\n19. ` app.write(text, { to: openedFile, startingAt: app.getEof(openedFile) })`\n21. ` // Close the file`\n22. ` app.closeAccess(openedFile)`\n24. ` // Return a boolean indicating that writing was successful`\n25. ` return true`\n26. ` }`\n27. ` catch(error) {`\n29. ` try {`\n30. ` // Close the file`\n31. ` app.closeAccess(file)`\n32. ` }`\n33. ` catch(error) {`\n34. ` // Report the error is closing failed`\n35. ``  console.log(`Couldn't close file: ${error}`) ``\n36. ` }`\n38. ` // Return a boolean indicating that writing was successful`\n39. ` return false`\n40. ` }`\n41. `}`\n\nListing 16-3 and Listing 16-4 show how to call the handlers in Listing 16-1 and Listing 16-2 to write text content to a file on the Desktop, replacing any existing content in the file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20this_story%20to%20%22Once%20upon%20a%20time%20in%20Silicon%20Valley...%22%0Aset%20theFile%20to%20%28%28%28path%20to%20desktop%20folder%29%20as%20string%29%20%26%20%22MY%20STORY.txt%22%29%0AwriteTextToFile%28this_story%2C%20theFile%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW5\"></a>\n**Listing 16-3**AppleScript: Calling a handler to write text to a file\n\n1. `set this_story to \"Once upon a time in Silicon Valley...\"`\n2. `set theFile to (((path to desktop folder) as string) & \"MY STORY.txt\")`\n3. `writeTextToFile(this_story, theFile, true)`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20story%20%3D%20%22Once%20upon%20a%20time%20in%20Silicon%20Valley...%22%0Avar%20desktopString%20%3D%20app.pathTo%28%22desktop%22%29.toString%28%29%0Avar%20file%20%3D%20%60%24%7BdesktopString%7D%2FMY%20STORY.txt%60%0AwriteTextToFile%28story%2C%20file%2C%20true%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW14\"></a>\n**Listing 16-4**JavaScript: Calling a function to write text to a file\n\n1. `var story = \"Once upon a time in Silicon Valley...\"`\n2. `var desktopString = app.pathTo(\"desktop\").toString()`\n3. `` var file = `${desktopString}/MY STORY.txt` ``\n4. `writeTextToFile(story, file, true)`\n\nListing 16-5 and Listing 16-6 show how Listing 16-1 and Listing 16-2 could be called to insert dated log entries into a log file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theText%20to%20%28%28current%20date%29%20as%20string%29%20%26%20space%20%26%20%22STATUS%20OK%22%20%26%20return%0Aset%20theFile%20to%20%28%28%28path%20to%20desktop%20folder%29%20as%20string%29%20%26%20%22MY%20LOG%20FILE.log%22%29%0AwriteTextToFile%28theText%2C%20theFile%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW6\"></a>\n**Listing 16-5**AppleScript: Calling a handler to write an entry to a log file\n\n1. `set theText to ((current date) as string) & space & \"STATUS OK\" & return`\n2. `set theFile to (((path to desktop folder) as string) & \"MY LOG FILE.log\")`\n3. `writeTextToFile(theText, theFile, false)`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20dateString%20%3D%20Date%28%29.toString%28%29%0Avar%20desktopString%20%3D%20app.pathTo%28%22desktop%22%29.toString%28%29%0Avar%20text%20%3D%20%60%24%7BdateString%7D%20STATUS%20OK%5Cn%5Cn%60%0Avar%20file%20%3D%20%60%24%7BdesktopString%7D%2FMY%20LOG%20FILE.log%60%0AwriteTextToFile%28text%2C%20file%2C%20false%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW15\"></a>\n**Listing 16-6**JavaScript: Calling a function to write an entry to a log file\n\n1. `var dateString = Date().toString()`\n2. `var desktopString = app.pathTo(\"desktop\").toString()`\n3. `` var text = `${dateString} STATUS OK\\\\n\\\\n` ``\n4. `` var file = `${desktopString}/MY LOG FILE.log` ``\n5. `writeTextToFile(text, file, false)`\n\nIn practice, this technique could be used to maintain a log when script errors occur. Listing 16-7 and Listing 16-8 are try statements, which can be wrapped around custom script code in order to log any script errors to a file in the `~/Library/Logs/` folder of the current userâ€™s home directory.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%0A%20%20%20%20--%20Your%20custom%20script%20code%20goes%20here%0Aon%20error%20theErrorMessage%20number%20theErrorNumber%0A%20%20%20%20set%20theError%20to%20%22Error%3A%20%22%20%26%20theErrorNumber%20%26%20%22.%20%22%20%26%20theErrorMessage%20%26%20return%0A%20%20%20%20set%20theLogFile%20to%20%28%28path%20to%20library%20folder%20from%20user%20domain%29%20as%20string%29%20%26%20%22Logs%3AScript%20Error%20Log.log%22%0A%20%20%20%20my%20writeTextToFile%28theError%2C%20theLogFile%2C%20false%29%0Aend%20try)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW7\"></a>\n**Listing 16-7**AppleScript: Example of a try statement that writes an entry to a log file when an error occurs\n\n1. `try`\n2. ` -- Your custom script code goes here`\n3. `on error theErrorMessage number theErrorNumber`\n4. ` set theError to \"Error: \" & theErrorNumber & \". \" & theErrorMessage & return`\n5. ` set theLogFile to ((path to library folder from user domain) as string) & \"Logs:Script Error Log.log\"`\n6. ` my writeTextToFile(theError, theLogFile, false)`\n7. `end try`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=try%20%7B%0A%20%20%20%20%2F%2F%20Your%20custom%20script%20code%20goes%20here%0A%7D%0Acatch%20%28error%29%20%7B%0A%20%20%20%20var%20errorString%20%3D%20%60Error%3A%20%24%7Berror.message%7D%5Cn%5Cn%60%0A%20%20%20%20var%20logFile%20%3D%20app.pathTo%28%22library%20folder%22%2C%20%7B%20from%3A%20%22user%20domain%22%20%7D%29.toString%28%29%20%2B%20%22%2FLogs%2FScript%20Error%20Log.log%22%0A%20%20%20%20writeTextToFile%28errorString%2C%20logFile%2C%20false%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW16\"></a>\n**Listing 16-8**JavaScript: Example of a try statement that writes an entry to a log file when an error occurs\n\n1. `try {`\n2. ` // Your custom script code goes here`\n3. `}`\n4. `catch (error) {`\n5. ``  var errorString = `Error: ${error.message}\\\\n\\\\n` ``\n6. ` var logFile = app.pathTo(\"library folder\", { from: \"user domain\" }).toString() + \"/Logs/Script Error Log.log\"`\n7. ` writeTextToFile(errorString, logFile, false)`\n8. `}`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW2\"></a>\n\n### Reading a File\n\nThe handlers in Listing 16-9 and Listing 16-10 read the contents of a specified file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20readFile%28theFile%29%0A%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20--%20Read%20the%20file%20and%20return%20its%20contents%0A%20%20%20%20return%20read%20file%20theFile%0Aend%20readFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW8\"></a>\n**Listing 16-9**AppleScript: Handler that reads the contents of a file\n\n1. `on readFile(theFile)`\n2. ` -- Convert the file to a string`\n3. ` set theFile to theFile as string`\n5. ` -- Read the file and return its contents`\n6. ` return read file theFile`\n7. `end readFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20readFile%28file%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%2F%2F%20Read%20the%20file%20and%20return%20its%20contents%0A%20%20%20%20return%20app.read%28Path%28fileString%29%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW17\"></a>\n**Listing 16-10**JavaScript: Function that reads the contents of a file\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function readFile(file) {`\n5. ` // Convert the file to a string`\n6. ` var fileString = file.toString()`\n8. ` // Read the file and return its contents`\n9. ` return app.read(Path(fileString))`\n10. `}`\n\nListing 16-11 and Listing 16-12 show how to call the handlers in Listing 16-9 and Listing 16-10 to read a specified text file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20of%20type%20%22txt%22%20with%20prompt%20%22Please%20select%20a%20text%20file%20to%20read%3A%22%0AreadFile%28theFile%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW9\"></a>\n**Listing 16-11**AppleScript: Calling a handler to read the contents of a file\n\n1. `set theFile to choose file of type \"txt\" with prompt \"Please select a text file to read:\"`\n2. `readFile(theFile)`\n3. `--&gt; Result: \"Contents of the chosen file.\"`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20file%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20ofType%3A%20%22txt%22%2C%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20a%20text%20file%20to%20read%3A%22%0A%7D%29%0A%0AreadFile%28file%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW18\"></a>\n**Listing 16-12**JavaScript: Calling a function to read the contents of a file\n\n1. `var file = app.chooseFile({`\n2. ` ofType: \"txt\",`\n3. ` withPrompt: \"Please select a text file to read:\"`\n4. `})`\n6. `readFile(file)`\n7. `// Result: \"Contents of the chosen file.\"`\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW10\"></a>\n\n### Reading and Splitting a File\n\nThe handlers in Listing 16-13 and Listing 16-14 read the contents of a specified text file, using a delimiter to split it into a list.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=on%20readAndSplitFile%28theFile%2C%20theDelimiter%29%0A%20%20%20%20--%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20set%20theFile%20to%20theFile%20as%20string%0A%0A%20%20%20%20--%20Read%20the%20file%20using%20a%20specific%20delimiter%20and%20return%20the%20results%0A%20%20%20%20return%20read%20file%20theFile%20using%20delimiter%20%7BtheDelimiter%7D%0Aend%20readAndSplitFile)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW11\"></a>\n**Listing 16-13**AppleScript: Handler for reading and splitting the contents of a file based on a delimiter\n\n1. `on readAndSplitFile(theFile, theDelimiter)`\n2. ` -- Convert the file to a string`\n3. ` set theFile to theFile as string`\n5. ` -- Read the file using a specific delimiter and return the results`\n6. ` return read file theFile using delimiter {theDelimiter}`\n7. `end readAndSplitFile`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20app%20%3D%20Application.currentApplication%28%29%0Aapp.includeStandardAdditions%20%3D%20true%0A%0Afunction%20readAndSplitFile%28file%2C%20delimiter%29%20%7B%0A%20%20%20%20%2F%2F%20Convert%20the%20file%20to%20a%20string%0A%20%20%20%20var%20fileString%20%3D%20file.toString%28%29%0A%0A%20%20%20%20%2F%2F%20Read%20the%20file%20using%20a%20specific%20delimiter%20and%20return%20the%20results%0A%20%20%20%20return%20app.read%28Path%28fileString%29%2C%20%7B%20usingDelimiter%3A%20delimiter%20%7D%29%0A%7D)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW19\"></a>\n**Listing 16-14**JavaScript: Function for reading and splitting the contents of a file based on a delimiter\n\n1. `var app = Application.currentApplication()`\n2. `app.includeStandardAdditions = true`\n4. `function readAndSplitFile(file, delimiter) {`\n5. ` // Convert the file to a string`\n6. ` var fileString = file.toString()`\n8. ` // Read the file using a specific delimiter and return the results`\n9. ` return app.read(Path(fileString), { usingDelimiter: delimiter })`\n10. `}`\n\nListing 16-15 and Listing 16-16 shows how to call the handlers in Listing 16-13 and Listing 16-14 to read the paragraphs of a chosen log file.\n\n**APPLESCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=set%20theFile%20to%20choose%20file%20of%20type%20%22log%22%20with%20prompt%20%22Please%20select%20a%20log%20file%3A%22%0AreadAndSplitFile%28theFile%2C%20return%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW12\"></a>\n**Listing 16-15**AppleScript: Calling a handler to read and split the contents of a file based on a delimiter\n\n1. `set theFile to choose file of type \"log\" with prompt \"Please select a log file:\"`\n2. `readAndSplitFile(theFile, return)`\n3. `--&gt; Result: {\"Log entry 1\", \"Log entry 2\", ... }`\n\n**JAVASCRIPT**\n\n[Open in Script Editor](https://developer.apple.com/library/archive/mac-automation-scripting-guide/applescript:/com.apple.scripteditor?action=new&script=var%20file%20%3D%20app.chooseFile%28%7B%0A%20%20%20%20ofType%3A%20%22log%22%2C%0A%20%20%20%20withPrompt%3A%20%22Please%20select%20a%20log%20file%3A%22%0A%7D%29%0AreadAndSplitFile%28file%2C%20%22%5Cn%22%29)\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH58-SW20\"></a>\n**Listing 16-16**JavaScript: Calling a function to read and split the contents of a file based on a delimiter\n\n1. `var file = app.chooseFile({`\n2. ` ofType: \"log\",`\n3. ` withPrompt: \"Please select a log file:\"`\n4. `})`\n5. `readAndSplitFile(file, \"\\\\n\")`\n6. `// Result: [\"Log entry 1\", \"Log entry 2\", ...]`\n",
  "binary": false,
  "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ReadandWriteFiles.html",
  "sha256": "5f5f77c973135d0db7c3518ca5efaa32d7f383be51e984eb9577907f4ed81982",
  "etag": null,
  "last_modified": null
}
