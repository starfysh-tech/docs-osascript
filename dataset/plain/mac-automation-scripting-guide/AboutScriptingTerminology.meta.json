{
  "collection": "mac-automation-scripting-guide",
  "path": "AboutScriptingTerminology.md",
  "title": "About Scripting Terminology",
  "body": "<a id=\"//apple_ref/doc/uid/TP40016239-CH75\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH75-SW2\"></a>\n<a id=\"//apple_ref/doc/uid/TP40016239-CH9\"></a><a id=\"//apple_ref/doc/uid/TP40016239-CH9-SW1\"></a>\n\n## About Scripting Terminology\n\nAppleScript and JavaScript possess core language commands, classes, and properties that make scripting possible. For AppleScript, core terminology is documented in *[AppleScript Language Guide](https://developer.apple.com/library/archive/../../AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983)*. For JavaScript, see *[JavaScript for Automation Release Notes](https://developer.apple.com/library/archive/../../../releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/Introduction.html#//apple_ref/doc/uid/TP40014508)* and [Mozilla’s official JavaScript documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript).\n\nEach scriptable app introduces additional terminology that extends the core language. For example, Mail introduces terminology for creating and sending email messages. iTunes introduces terminology for working with music and playlists. In order to write a script that controls an app, you need to familiarize yourself with that app’s terminology.\n\nThe terminology for an app is found in its *scripting dictionary*, an `.sdef` file stored in the app bundle. The dictionary describes the commands, classes, and properties an app supports. This information is used by the scripting components of the operating system, the app itself, and any other apps or scripts that interact with the app through scripting. It also serves as a reference, which you can consult in Script Editor for guidance as you write a script. See Figure 10-1.\n\n<a id=\"//apple_ref/doc/uid/TP40016239-CH75-SW1\"></a>\n**Figure 10-1**Example of a scripting dictionary in Script Editor\n![image: ../Art/script-editor_dictionary_2x.png](https://developer.apple.com/library/archive/mac-automation-scripting-guide/Art/script-editor_dictionary_2x.png)\n\nNot every OS X app supports scripting, but many apps do, including Mail, Address Book, Calendar, iTunes, and Messages. To determine if a particular app is scriptable, see if it has a scripting dictionary. See [Opening a Scripting Dictionary](https://developer.apple.com/library/archive/mac-automation-scripting-guide/OpenaScriptingDictionary.md#//apple_ref/doc/uid/TP40016239-CH76-SW1).\n\nScripting terminology can vary extensively from app to app. While some apps may have extensive scripting support, others may have very limited scripting support. If an app doesn’t meet your scripting needs, reach out to the app developer and request improved support in a future version. To request scripting enhancements for Apple apps, submit a [bug report](http://bugreport.apple.com) that specifies the app and communicates your specific needs.\n\nAlso, keep in mind that scripting terminology can change from one version of an app or OS X to the next. Always test essential scripts when upgrading to a new app or system version.\n\n> **Note**\n>\n>\n> OS X also supports scripting additions, packages of terminology that extend the core AppleScript language. In fact, OS X comes with Standard Additions, a scripting addition that implements a range of commonly performed functions, such as displaying alerts and dialogs, speaking text, and reading and writing files. Scripting additions are installed in `/System/ScriptingAdditions/`, `/Library/ScriptingAdditions/`, or `~/Library/ScriptingAdditions/`, and have dictionaries just like scriptable apps.\n",
  "binary": false,
  "source_url": "https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/AboutScriptingTerminology.html",
  "sha256": "0382b9e3df03a7c98a9b4ec731013c4ca738a6b96fb7fe37b4004d0396fa14ca",
  "etag": null,
  "last_modified": null
}
